"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _installerBase = _interopRequireDefault(require("@electron-forge/installer-base"));

var _opn = _interopRequireDefault(require("opn"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class InstallerExe extends _installerBase.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", 'exe');
  }

  install({
    filePath
  }) {
    return _asyncToGenerator(function* () {
      yield (0, _opn.default)(filePath, {
        wait: false
      });
    })();
  }

}

exports.default = InstallerExe;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9JbnN0YWxsZXJFeGUudHMiXSwibmFtZXMiOlsiSW5zdGFsbGVyRXhlIiwiSW5zdGFsbGVyQmFzZSIsImluc3RhbGwiLCJmaWxlUGF0aCIsIndhaXQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUVBOzs7Ozs7Ozs7O0FBRWUsTUFBTUEsWUFBTixTQUEyQkMsc0JBQTNCLENBQXlDO0FBQUE7QUFBQTs7QUFBQSxrQ0FDL0MsS0FEK0M7QUFBQTs7QUFHaERDLEVBQUFBLE9BQU4sQ0FBYztBQUNaQyxJQUFBQTtBQURZLEdBQWQsRUFFcUI7QUFBQTtBQUNuQixZQUFNLGtCQUFJQSxRQUFKLEVBQWM7QUFBRUMsUUFBQUEsSUFBSSxFQUFFO0FBQVIsT0FBZCxDQUFOO0FBRG1CO0FBRXBCOztBQVBxRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBJbnN0YWxsZXJCYXNlLCB7IEluc3RhbGxlck9wdGlvbnMgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2UvaW5zdGFsbGVyLWJhc2UnO1xuXG5pbXBvcnQgb3BuIGZyb20gJ29wbic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEluc3RhbGxlckV4ZSBleHRlbmRzIEluc3RhbGxlckJhc2Uge1xuICBuYW1lID0gJ2V4ZSc7XG5cbiAgYXN5bmMgaW5zdGFsbCh7XG4gICAgZmlsZVBhdGgsXG4gIH06IEluc3RhbGxlck9wdGlvbnMpIHtcbiAgICBhd2FpdCBvcG4oZmlsZVBhdGgsIHsgd2FpdDogZmFsc2UgfSk7XG4gIH1cbn1cbiJdfQ==