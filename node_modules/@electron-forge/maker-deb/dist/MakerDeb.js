"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.debianArch = debianArch;
exports.default = void 0;

require("source-map-support/register");

var _makerBase = _interopRequireDefault(require("@electron-forge/maker-base"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function debianArch(nodeArch) {
  switch (nodeArch) {
    case 'ia32':
      return 'i386';

    case 'x64':
      return 'amd64';

    case 'armv7l':
      return 'armhf';

    case 'arm':
      return 'armel';

    default:
      return nodeArch;
  }
}

class MakerDeb extends _makerBase.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", 'deb');

    _defineProperty(this, "defaultPlatforms", ['linux']);
  }

  isSupportedOnCurrentPlatform() {
    return this.isInstalled('electron-installer-debian') && process.platform === 'linux';
  }

  make({
    dir,
    makeDir,
    targetArch,
    packageJSON
  }) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const installer = require('electron-installer-debian');

      const arch = debianArch(targetArch);
      const name = (_this.config.options || {}).name || packageJSON.name;
      const versionedName = `${name}_${installer.transformVersion(packageJSON.version)}_${arch}`;

      const outPath = _path.default.resolve(makeDir, `${versionedName}.deb`);

      yield _this.ensureFile(outPath);
      yield installer(Object.assign({
        options: {}
      }, _this.config, {
        arch,
        src: dir,
        dest: _path.default.dirname(outPath),
        rename: undefined
      }));
      return [outPath];
    })();
  }

}

exports.default = MakerDeb;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NYWtlckRlYi50cyJdLCJuYW1lcyI6WyJkZWJpYW5BcmNoIiwibm9kZUFyY2giLCJNYWtlckRlYiIsIk1ha2VyQmFzZSIsImlzU3VwcG9ydGVkT25DdXJyZW50UGxhdGZvcm0iLCJpc0luc3RhbGxlZCIsInByb2Nlc3MiLCJwbGF0Zm9ybSIsIm1ha2UiLCJkaXIiLCJtYWtlRGlyIiwidGFyZ2V0QXJjaCIsInBhY2thZ2VKU09OIiwiaW5zdGFsbGVyIiwicmVxdWlyZSIsImFyY2giLCJuYW1lIiwiY29uZmlnIiwib3B0aW9ucyIsInZlcnNpb25lZE5hbWUiLCJ0cmFuc2Zvcm1WZXJzaW9uIiwidmVyc2lvbiIsIm91dFBhdGgiLCJwYXRoIiwicmVzb2x2ZSIsImVuc3VyZUZpbGUiLCJPYmplY3QiLCJhc3NpZ24iLCJzcmMiLCJkZXN0IiwiZGlybmFtZSIsInJlbmFtZSIsInVuZGVmaW5lZCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOztBQUVBOzs7Ozs7Ozs7O0FBSU8sU0FBU0EsVUFBVCxDQUFvQkMsUUFBcEIsRUFBeUM7QUFDOUMsVUFBUUEsUUFBUjtBQUNFLFNBQUssTUFBTDtBQUFhLGFBQU8sTUFBUDs7QUFDYixTQUFLLEtBQUw7QUFBWSxhQUFPLE9BQVA7O0FBQ1osU0FBSyxRQUFMO0FBQWUsYUFBTyxPQUFQOztBQUNmLFNBQUssS0FBTDtBQUFZLGFBQU8sT0FBUDs7QUFDWjtBQUFTLGFBQU9BLFFBQVA7QUFMWDtBQU9EOztBQUVjLE1BQU1DLFFBQU4sU0FBdUJDLGtCQUF2QixDQUFpRDtBQUFBO0FBQUE7O0FBQUEsa0NBQ3ZELEtBRHVEOztBQUFBLDhDQUUxQixDQUFDLE9BQUQsQ0FGMEI7QUFBQTs7QUFJOURDLEVBQUFBLDRCQUE0QixHQUFHO0FBQzdCLFdBQU8sS0FBS0MsV0FBTCxDQUFpQiwyQkFBakIsS0FBaURDLE9BQU8sQ0FBQ0MsUUFBUixLQUFxQixPQUE3RTtBQUNEOztBQUVLQyxFQUFBQSxJQUFOLENBQVc7QUFDVEMsSUFBQUEsR0FEUztBQUVUQyxJQUFBQSxPQUZTO0FBR1RDLElBQUFBLFVBSFM7QUFJVEMsSUFBQUE7QUFKUyxHQUFYLEVBS2lCO0FBQUE7O0FBQUE7QUFDZixZQUFNQyxTQUFTLEdBQUdDLE9BQU8sQ0FBQywyQkFBRCxDQUF6Qjs7QUFFQSxZQUFNQyxJQUFJLEdBQUdmLFVBQVUsQ0FBQ1csVUFBRCxDQUF2QjtBQUNBLFlBQU1LLElBQUksR0FBRyxDQUFDLEtBQUksQ0FBQ0MsTUFBTCxDQUFZQyxPQUFaLElBQXVCLEVBQXhCLEVBQTRCRixJQUE1QixJQUFvQ0osV0FBVyxDQUFDSSxJQUE3RDtBQUNBLFlBQU1HLGFBQWEsR0FBSSxHQUFFSCxJQUFLLElBQUdILFNBQVMsQ0FBQ08sZ0JBQVYsQ0FBMkJSLFdBQVcsQ0FBQ1MsT0FBdkMsQ0FBZ0QsSUFBR04sSUFBSyxFQUF6Rjs7QUFDQSxZQUFNTyxPQUFPLEdBQUdDLGNBQUtDLE9BQUwsQ0FBYWQsT0FBYixFQUF1QixHQUFFUyxhQUFjLE1BQXZDLENBQWhCOztBQUVBLFlBQU0sS0FBSSxDQUFDTSxVQUFMLENBQWdCSCxPQUFoQixDQUFOO0FBRUEsWUFBTVQsU0FBUyxDQUFDYSxNQUFNLENBQUNDLE1BQVAsQ0FBYztBQUM1QlQsUUFBQUEsT0FBTyxFQUFFO0FBRG1CLE9BQWQsRUFFYixLQUFJLENBQUNELE1BRlEsRUFFQTtBQUNkRixRQUFBQSxJQURjO0FBRWRhLFFBQUFBLEdBQUcsRUFBRW5CLEdBRlM7QUFHZG9CLFFBQUFBLElBQUksRUFBRU4sY0FBS08sT0FBTCxDQUFhUixPQUFiLENBSFE7QUFJZFMsUUFBQUEsTUFBTSxFQUFFQztBQUpNLE9BRkEsQ0FBRCxDQUFmO0FBU0EsYUFBTyxDQUFDVixPQUFELENBQVA7QUFuQmU7QUFvQmhCOztBQWpDNkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTWFrZXJCYXNlLCB7IE1ha2VyT3B0aW9ucyB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9tYWtlci1iYXNlJztcbmltcG9ydCB7IEZvcmdlQXJjaCwgRm9yZ2VQbGF0Zm9ybSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IE1ha2VyRGViQ29uZmlnIH0gZnJvbSAnLi9Db25maWcnO1xuXG5leHBvcnQgZnVuY3Rpb24gZGViaWFuQXJjaChub2RlQXJjaDogRm9yZ2VBcmNoKSB7XG4gIHN3aXRjaCAobm9kZUFyY2gpIHtcbiAgICBjYXNlICdpYTMyJzogcmV0dXJuICdpMzg2JztcbiAgICBjYXNlICd4NjQnOiByZXR1cm4gJ2FtZDY0JztcbiAgICBjYXNlICdhcm12N2wnOiByZXR1cm4gJ2FybWhmJztcbiAgICBjYXNlICdhcm0nOiByZXR1cm4gJ2FybWVsJztcbiAgICBkZWZhdWx0OiByZXR1cm4gbm9kZUFyY2g7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFrZXJEZWIgZXh0ZW5kcyBNYWtlckJhc2U8TWFrZXJEZWJDb25maWc+IHtcbiAgbmFtZSA9ICdkZWInO1xuICBkZWZhdWx0UGxhdGZvcm1zOiBGb3JnZVBsYXRmb3JtW10gPSBbJ2xpbnV4J107XG5cbiAgaXNTdXBwb3J0ZWRPbkN1cnJlbnRQbGF0Zm9ybSgpIHtcbiAgICByZXR1cm4gdGhpcy5pc0luc3RhbGxlZCgnZWxlY3Ryb24taW5zdGFsbGVyLWRlYmlhbicpICYmIHByb2Nlc3MucGxhdGZvcm0gPT09ICdsaW51eCc7XG4gIH1cblxuICBhc3luYyBtYWtlKHtcbiAgICBkaXIsXG4gICAgbWFrZURpcixcbiAgICB0YXJnZXRBcmNoLFxuICAgIHBhY2thZ2VKU09OLFxuICB9OiBNYWtlck9wdGlvbnMpIHtcbiAgICBjb25zdCBpbnN0YWxsZXIgPSByZXF1aXJlKCdlbGVjdHJvbi1pbnN0YWxsZXItZGViaWFuJyk7XG5cbiAgICBjb25zdCBhcmNoID0gZGViaWFuQXJjaCh0YXJnZXRBcmNoKTtcbiAgICBjb25zdCBuYW1lID0gKHRoaXMuY29uZmlnLm9wdGlvbnMgfHwge30pLm5hbWUgfHwgcGFja2FnZUpTT04ubmFtZTtcbiAgICBjb25zdCB2ZXJzaW9uZWROYW1lID0gYCR7bmFtZX1fJHtpbnN0YWxsZXIudHJhbnNmb3JtVmVyc2lvbihwYWNrYWdlSlNPTi52ZXJzaW9uKX1fJHthcmNofWA7XG4gICAgY29uc3Qgb3V0UGF0aCA9IHBhdGgucmVzb2x2ZShtYWtlRGlyLCBgJHt2ZXJzaW9uZWROYW1lfS5kZWJgKTtcblxuICAgIGF3YWl0IHRoaXMuZW5zdXJlRmlsZShvdXRQYXRoKTtcblxuICAgIGF3YWl0IGluc3RhbGxlcihPYmplY3QuYXNzaWduKHtcbiAgICAgIG9wdGlvbnM6IHt9LFxuICAgIH0sIHRoaXMuY29uZmlnLCB7XG4gICAgICBhcmNoLFxuICAgICAgc3JjOiBkaXIsXG4gICAgICBkZXN0OiBwYXRoLmRpcm5hbWUob3V0UGF0aCksXG4gICAgICByZW5hbWU6IHVuZGVmaW5lZCxcbiAgICB9KSk7XG5cbiAgICByZXR1cm4gW291dFBhdGhdO1xuICB9XG59XG4iXX0=