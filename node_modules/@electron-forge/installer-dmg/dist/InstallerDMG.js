"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _installerDarwin = _interopRequireDefault(require("@electron-forge/installer-darwin"));

var _crossSpawnPromise = _interopRequireDefault(require("cross-spawn-promise"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _hdiutil = require("./util/hdiutil");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class InstallerDMG extends _installerDarwin.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", 'dmg');
  }

  install({
    filePath,
    installSpinner
  }) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const mounts = yield (0, _hdiutil.getMountedImages)();
      let targetMount = mounts.find(mount => mount.imagePath === filePath);

      if (!targetMount) {
        targetMount = yield (0, _hdiutil.mountImage)(filePath);
      }

      try {
        const volumePath = _path.default.resolve('/Volumes', targetMount.mountPath);

        const appName = (yield _fsExtra.default.readdir(volumePath)).find(file => file.endsWith('.app'));

        if (!appName) {
          throw 'Failed to find .app file in DMG';
        }

        const appPath = _path.default.resolve(volumePath, appName);

        const targetApplicationPath = `/Applications/${_path.default.basename(appPath)}`;
        yield _this.moveApp(appPath, targetApplicationPath, installSpinner, true);
        yield (0, _crossSpawnPromise.default)('open', ['-R', targetApplicationPath], {
          detached: true
        });
      } finally {
        yield (0, _hdiutil.unmountImage)(targetMount);
      }
    })();
  }

}

exports.default = InstallerDMG;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9JbnN0YWxsZXJETUcudHMiXSwibmFtZXMiOlsiSW5zdGFsbGVyRE1HIiwiSW5zdGFsbGVyRGFyd2luIiwiaW5zdGFsbCIsImZpbGVQYXRoIiwiaW5zdGFsbFNwaW5uZXIiLCJtb3VudHMiLCJ0YXJnZXRNb3VudCIsImZpbmQiLCJtb3VudCIsImltYWdlUGF0aCIsInZvbHVtZVBhdGgiLCJwYXRoIiwicmVzb2x2ZSIsIm1vdW50UGF0aCIsImFwcE5hbWUiLCJmcyIsInJlYWRkaXIiLCJmaWxlIiwiZW5kc1dpdGgiLCJhcHBQYXRoIiwidGFyZ2V0QXBwbGljYXRpb25QYXRoIiwiYmFzZW5hbWUiLCJtb3ZlQXBwIiwiZGV0YWNoZWQiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUVBOztBQUNBOztBQUNBOztBQUVBOzs7Ozs7Ozs7O0FBRWUsTUFBTUEsWUFBTixTQUEyQkMsd0JBQTNCLENBQTJDO0FBQUE7QUFBQTs7QUFBQSxrQ0FDakQsS0FEaUQ7QUFBQTs7QUFHbERDLEVBQUFBLE9BQU4sQ0FBYztBQUNaQyxJQUFBQSxRQURZO0FBRVpDLElBQUFBO0FBRlksR0FBZCxFQUdxQjtBQUFBOztBQUFBO0FBQ25CLFlBQU1DLE1BQU0sU0FBUyxnQ0FBckI7QUFDQSxVQUFJQyxXQUFXLEdBQUdELE1BQU0sQ0FBQ0UsSUFBUCxDQUFZQyxLQUFLLElBQUlBLEtBQUssQ0FBQ0MsU0FBTixLQUFvQk4sUUFBekMsQ0FBbEI7O0FBRUEsVUFBSSxDQUFDRyxXQUFMLEVBQWtCO0FBQ2hCQSxRQUFBQSxXQUFXLFNBQVMseUJBQVdILFFBQVgsQ0FBcEI7QUFDRDs7QUFFRCxVQUFJO0FBQ0YsY0FBTU8sVUFBVSxHQUFHQyxjQUFLQyxPQUFMLENBQWEsVUFBYixFQUF5Qk4sV0FBVyxDQUFDTyxTQUFyQyxDQUFuQjs7QUFDQSxjQUFNQyxPQUFPLEdBQUcsT0FBT0MsaUJBQUdDLE9BQUgsQ0FBV04sVUFBWCxDQUFQLEVBQStCSCxJQUEvQixDQUFvQ1UsSUFBSSxJQUFJQSxJQUFJLENBQUNDLFFBQUwsQ0FBYyxNQUFkLENBQTVDLENBQWhCOztBQUNBLFlBQUksQ0FBQ0osT0FBTCxFQUFjO0FBQ1osZ0JBQU0saUNBQU47QUFDRDs7QUFDRCxjQUFNSyxPQUFPLEdBQUdSLGNBQUtDLE9BQUwsQ0FBYUYsVUFBYixFQUF5QkksT0FBekIsQ0FBaEI7O0FBQ0EsY0FBTU0scUJBQXFCLEdBQUksaUJBQWdCVCxjQUFLVSxRQUFMLENBQWNGLE9BQWQsQ0FBdUIsRUFBdEU7QUFFQSxjQUFNLEtBQUksQ0FBQ0csT0FBTCxDQUFhSCxPQUFiLEVBQXNCQyxxQkFBdEIsRUFBNkNoQixjQUE3QyxFQUE2RCxJQUE3RCxDQUFOO0FBRUEsY0FBTSxnQ0FBYSxNQUFiLEVBQXFCLENBQUMsSUFBRCxFQUFPZ0IscUJBQVAsQ0FBckIsRUFBb0Q7QUFBRUcsVUFBQUEsUUFBUSxFQUFFO0FBQVosU0FBcEQsQ0FBTjtBQUNELE9BWkQsU0FZVTtBQUNSLGNBQU0sMkJBQWFqQixXQUFiLENBQU47QUFDRDtBQXRCa0I7QUF1QnBCOztBQTdCdUQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgSW5zdGFsbGVyRGFyd2luLCB7IEluc3RhbGxlck9wdGlvbnMgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2UvaW5zdGFsbGVyLWRhcndpbic7XG5cbmltcG9ydCBzcGF3blByb21pc2UgZnJvbSAnY3Jvc3Mtc3Bhd24tcHJvbWlzZSc7XG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IGdldE1vdW50ZWRJbWFnZXMsIG1vdW50SW1hZ2UsIHVubW91bnRJbWFnZSB9IGZyb20gJy4vdXRpbC9oZGl1dGlsJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSW5zdGFsbGVyRE1HIGV4dGVuZHMgSW5zdGFsbGVyRGFyd2luIHtcbiAgbmFtZSA9ICdkbWcnO1xuXG4gIGFzeW5jIGluc3RhbGwoe1xuICAgIGZpbGVQYXRoLFxuICAgIGluc3RhbGxTcGlubmVyLFxuICB9OiBJbnN0YWxsZXJPcHRpb25zKSB7XG4gICAgY29uc3QgbW91bnRzID0gYXdhaXQgZ2V0TW91bnRlZEltYWdlcygpO1xuICAgIGxldCB0YXJnZXRNb3VudCA9IG1vdW50cy5maW5kKG1vdW50ID0+IG1vdW50LmltYWdlUGF0aCA9PT0gZmlsZVBhdGgpO1xuXG4gICAgaWYgKCF0YXJnZXRNb3VudCkge1xuICAgICAgdGFyZ2V0TW91bnQgPSBhd2FpdCBtb3VudEltYWdlKGZpbGVQYXRoKTtcbiAgICB9XG5cbiAgICB0cnkge1xuICAgICAgY29uc3Qgdm9sdW1lUGF0aCA9IHBhdGgucmVzb2x2ZSgnL1ZvbHVtZXMnLCB0YXJnZXRNb3VudC5tb3VudFBhdGgpO1xuICAgICAgY29uc3QgYXBwTmFtZSA9IChhd2FpdCBmcy5yZWFkZGlyKHZvbHVtZVBhdGgpKS5maW5kKGZpbGUgPT4gZmlsZS5lbmRzV2l0aCgnLmFwcCcpKTtcbiAgICAgIGlmICghYXBwTmFtZSkge1xuICAgICAgICB0aHJvdyAnRmFpbGVkIHRvIGZpbmQgLmFwcCBmaWxlIGluIERNRyc7XG4gICAgICB9XG4gICAgICBjb25zdCBhcHBQYXRoID0gcGF0aC5yZXNvbHZlKHZvbHVtZVBhdGgsIGFwcE5hbWUpO1xuICAgICAgY29uc3QgdGFyZ2V0QXBwbGljYXRpb25QYXRoID0gYC9BcHBsaWNhdGlvbnMvJHtwYXRoLmJhc2VuYW1lKGFwcFBhdGgpfWA7XG5cbiAgICAgIGF3YWl0IHRoaXMubW92ZUFwcChhcHBQYXRoLCB0YXJnZXRBcHBsaWNhdGlvblBhdGgsIGluc3RhbGxTcGlubmVyLCB0cnVlKTtcblxuICAgICAgYXdhaXQgc3Bhd25Qcm9taXNlKCdvcGVuJywgWyctUicsIHRhcmdldEFwcGxpY2F0aW9uUGF0aF0sIHsgZGV0YWNoZWQ6IHRydWUgfSBhcyBhbnkpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBhd2FpdCB1bm1vdW50SW1hZ2UodGFyZ2V0TW91bnQpO1xuICAgIH1cbiAgfVxufVxuIl19