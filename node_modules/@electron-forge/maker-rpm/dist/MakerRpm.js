"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.rpmArch = rpmArch;
exports.default = void 0;

require("source-map-support/register");

var _makerBase = _interopRequireDefault(require("@electron-forge/maker-base"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function rpmArch(nodeArch) {
  switch (nodeArch) {
    case 'ia32':
      return 'i386';

    case 'x64':
      return 'x86_64';

    case 'armv7l':
      return 'armv7hl';

    case 'arm':
      return 'armv6hl';

    default:
      return nodeArch;
  }
}

class MakerRpm extends _makerBase.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", 'rpm');

    _defineProperty(this, "defaultPlatforms", ['linux']);
  }

  isSupportedOnCurrentPlatform() {
    return this.isInstalled('electron-installer-redhat') && process.platform === 'linux';
  }

  make({
    dir,
    makeDir,
    targetArch,
    packageJSON
  }) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const installer = require('electron-installer-redhat');

      const arch = rpmArch(targetArch);
      const name = (_this.config.options || {}).name || packageJSON.name;
      const versionedName = `${name}-${packageJSON.version}.${arch}`;

      const outPath = _path.default.resolve(makeDir, `${versionedName}.rpm`);

      yield _this.ensureFile(outPath);
      const rpmConfig = Object.assign({}, _this.config, {
        arch,
        src: dir,
        dest: _path.default.dirname(outPath),
        rename: undefined
      });
      yield installer(rpmConfig);
      return [outPath];
    })();
  }

}

exports.default = MakerRpm;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NYWtlclJwbS50cyJdLCJuYW1lcyI6WyJycG1BcmNoIiwibm9kZUFyY2giLCJNYWtlclJwbSIsIk1ha2VyQmFzZSIsImlzU3VwcG9ydGVkT25DdXJyZW50UGxhdGZvcm0iLCJpc0luc3RhbGxlZCIsInByb2Nlc3MiLCJwbGF0Zm9ybSIsIm1ha2UiLCJkaXIiLCJtYWtlRGlyIiwidGFyZ2V0QXJjaCIsInBhY2thZ2VKU09OIiwiaW5zdGFsbGVyIiwicmVxdWlyZSIsImFyY2giLCJuYW1lIiwiY29uZmlnIiwib3B0aW9ucyIsInZlcnNpb25lZE5hbWUiLCJ2ZXJzaW9uIiwib3V0UGF0aCIsInBhdGgiLCJyZXNvbHZlIiwiZW5zdXJlRmlsZSIsInJwbUNvbmZpZyIsIk9iamVjdCIsImFzc2lnbiIsInNyYyIsImRlc3QiLCJkaXJuYW1lIiwicmVuYW1lIiwidW5kZWZpbmVkIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQUE7O0FBR0E7Ozs7Ozs7Ozs7QUFJTyxTQUFTQSxPQUFULENBQWlCQyxRQUFqQixFQUFzQztBQUMzQyxVQUFRQSxRQUFSO0FBQ0UsU0FBSyxNQUFMO0FBQWEsYUFBTyxNQUFQOztBQUNiLFNBQUssS0FBTDtBQUFZLGFBQU8sUUFBUDs7QUFDWixTQUFLLFFBQUw7QUFBZSxhQUFPLFNBQVA7O0FBQ2YsU0FBSyxLQUFMO0FBQVksYUFBTyxTQUFQOztBQUNaO0FBQVMsYUFBT0EsUUFBUDtBQUxYO0FBT0Q7O0FBRWMsTUFBTUMsUUFBTixTQUF1QkMsa0JBQXZCLENBQWlEO0FBQUE7QUFBQTs7QUFBQSxrQ0FDdkQsS0FEdUQ7O0FBQUEsOENBRTFCLENBQUMsT0FBRCxDQUYwQjtBQUFBOztBQUk5REMsRUFBQUEsNEJBQTRCLEdBQUc7QUFDN0IsV0FBTyxLQUFLQyxXQUFMLENBQWlCLDJCQUFqQixLQUFpREMsT0FBTyxDQUFDQyxRQUFSLEtBQXFCLE9BQTdFO0FBQ0Q7O0FBRUtDLEVBQUFBLElBQU4sQ0FBVztBQUNUQyxJQUFBQSxHQURTO0FBRVRDLElBQUFBLE9BRlM7QUFHVEMsSUFBQUEsVUFIUztBQUlUQyxJQUFBQTtBQUpTLEdBQVgsRUFLaUI7QUFBQTs7QUFBQTtBQUNmLFlBQU1DLFNBQVMsR0FBR0MsT0FBTyxDQUFDLDJCQUFELENBQXpCOztBQUVBLFlBQU1DLElBQUksR0FBR2YsT0FBTyxDQUFDVyxVQUFELENBQXBCO0FBQ0EsWUFBTUssSUFBSSxHQUFHLENBQUMsS0FBSSxDQUFDQyxNQUFMLENBQVlDLE9BQVosSUFBdUIsRUFBeEIsRUFBNEJGLElBQTVCLElBQW9DSixXQUFXLENBQUNJLElBQTdEO0FBQ0EsWUFBTUcsYUFBYSxHQUFJLEdBQUVILElBQUssSUFBR0osV0FBVyxDQUFDUSxPQUFRLElBQUdMLElBQUssRUFBN0Q7O0FBQ0EsWUFBTU0sT0FBTyxHQUFHQyxjQUFLQyxPQUFMLENBQWFiLE9BQWIsRUFBdUIsR0FBRVMsYUFBYyxNQUF2QyxDQUFoQjs7QUFFQSxZQUFNLEtBQUksQ0FBQ0ssVUFBTCxDQUFnQkgsT0FBaEIsQ0FBTjtBQUNBLFlBQU1JLFNBQVMsR0FBR0MsTUFBTSxDQUFDQyxNQUFQLENBQWMsRUFBZCxFQUFrQixLQUFJLENBQUNWLE1BQXZCLEVBQStCO0FBQy9DRixRQUFBQSxJQUQrQztBQUUvQ2EsUUFBQUEsR0FBRyxFQUFFbkIsR0FGMEM7QUFHL0NvQixRQUFBQSxJQUFJLEVBQUVQLGNBQUtRLE9BQUwsQ0FBYVQsT0FBYixDQUh5QztBQUkvQ1UsUUFBQUEsTUFBTSxFQUFFQztBQUp1QyxPQUEvQixDQUFsQjtBQU9BLFlBQU1uQixTQUFTLENBQUNZLFNBQUQsQ0FBZjtBQUNBLGFBQU8sQ0FBQ0osT0FBRCxDQUFQO0FBakJlO0FBa0JoQjs7QUEvQjZEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IE1ha2VyQmFzZSwgeyBNYWtlck9wdGlvbnMgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2UvbWFrZXItYmFzZSc7XG5pbXBvcnQgeyBGb3JnZUFyY2gsIEZvcmdlUGxhdGZvcm0gfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcblxuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IE1ha2VyUnBtQ29uZmlnIH0gZnJvbSAnLi9Db25maWcnO1xuXG5leHBvcnQgZnVuY3Rpb24gcnBtQXJjaChub2RlQXJjaDogRm9yZ2VBcmNoKSB7XG4gIHN3aXRjaCAobm9kZUFyY2gpIHtcbiAgICBjYXNlICdpYTMyJzogcmV0dXJuICdpMzg2JztcbiAgICBjYXNlICd4NjQnOiByZXR1cm4gJ3g4Nl82NCc7XG4gICAgY2FzZSAnYXJtdjdsJzogcmV0dXJuICdhcm12N2hsJztcbiAgICBjYXNlICdhcm0nOiByZXR1cm4gJ2FybXY2aGwnO1xuICAgIGRlZmF1bHQ6IHJldHVybiBub2RlQXJjaDtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNYWtlclJwbSBleHRlbmRzIE1ha2VyQmFzZTxNYWtlclJwbUNvbmZpZz4ge1xuICBuYW1lID0gJ3JwbSc7XG4gIGRlZmF1bHRQbGF0Zm9ybXM6IEZvcmdlUGxhdGZvcm1bXSA9IFsnbGludXgnXTtcblxuICBpc1N1cHBvcnRlZE9uQ3VycmVudFBsYXRmb3JtKCkge1xuICAgIHJldHVybiB0aGlzLmlzSW5zdGFsbGVkKCdlbGVjdHJvbi1pbnN0YWxsZXItcmVkaGF0JykgJiYgcHJvY2Vzcy5wbGF0Zm9ybSA9PT0gJ2xpbnV4JztcbiAgfVxuXG4gIGFzeW5jIG1ha2Uoe1xuICAgIGRpcixcbiAgICBtYWtlRGlyLFxuICAgIHRhcmdldEFyY2gsXG4gICAgcGFja2FnZUpTT04sXG4gIH06IE1ha2VyT3B0aW9ucykge1xuICAgIGNvbnN0IGluc3RhbGxlciA9IHJlcXVpcmUoJ2VsZWN0cm9uLWluc3RhbGxlci1yZWRoYXQnKTtcblxuICAgIGNvbnN0IGFyY2ggPSBycG1BcmNoKHRhcmdldEFyY2gpO1xuICAgIGNvbnN0IG5hbWUgPSAodGhpcy5jb25maWcub3B0aW9ucyB8fCB7fSkubmFtZSB8fCBwYWNrYWdlSlNPTi5uYW1lO1xuICAgIGNvbnN0IHZlcnNpb25lZE5hbWUgPSBgJHtuYW1lfS0ke3BhY2thZ2VKU09OLnZlcnNpb259LiR7YXJjaH1gO1xuICAgIGNvbnN0IG91dFBhdGggPSBwYXRoLnJlc29sdmUobWFrZURpciwgYCR7dmVyc2lvbmVkTmFtZX0ucnBtYCk7XG5cbiAgICBhd2FpdCB0aGlzLmVuc3VyZUZpbGUob3V0UGF0aCk7XG4gICAgY29uc3QgcnBtQ29uZmlnID0gT2JqZWN0LmFzc2lnbih7fSwgdGhpcy5jb25maWcsIHtcbiAgICAgIGFyY2gsXG4gICAgICBzcmM6IGRpcixcbiAgICAgIGRlc3Q6IHBhdGguZGlybmFtZShvdXRQYXRoKSxcbiAgICAgIHJlbmFtZTogdW5kZWZpbmVkLFxuICAgIH0pO1xuXG4gICAgYXdhaXQgaW5zdGFsbGVyKHJwbUNvbmZpZyk7XG4gICAgcmV0dXJuIFtvdXRQYXRoXTtcbiAgfVxufVxuIl19