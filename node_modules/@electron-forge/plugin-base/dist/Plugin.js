"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "StartOptions", {
  enumerable: true,
  get: function get() {
    return _sharedTypes.StartOptions;
  }
});
exports.default = void 0;

require("source-map-support/register");

var _sharedTypes = require("@electron-forge/shared-types");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Plugin {
  /* tslint:disable variable-name */

  /* tslint:enable variable-name */
  constructor(config) {
    this.config = config;

    _defineProperty(this, "name", void 0);

    _defineProperty(this, "__isElectronForgePlugin", void 0);

    Object.defineProperty(this, '__isElectronForgePlugin', {
      value: true,
      enumerable: false,
      configurable: false
    });
  }

  init(dir, config) {}

  getHook(hookName) {
    return null;
  }

  startLogic(startOpts) {
    return _asyncToGenerator(function* () {
      return false;
    })();
  }

}

exports.default = Plugin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9QbHVnaW4udHMiXSwibmFtZXMiOlsiUGx1Z2luIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsImluaXQiLCJkaXIiLCJnZXRIb29rIiwiaG9va05hbWUiLCJzdGFydExvZ2ljIiwic3RhcnRPcHRzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7Ozs7Ozs7QUFLZSxNQUFlQSxNQUFmLENBQWlEO0FBRTlEOztBQUVBO0FBRUFDLEVBQUFBLFdBQVcsQ0FBUUMsTUFBUixFQUFtQjtBQUFBOztBQUFBOztBQUFBOztBQUM1QkMsSUFBQUEsTUFBTSxDQUFDQyxjQUFQLENBQXNCLElBQXRCLEVBQTRCLHlCQUE1QixFQUF1RDtBQUNyREMsTUFBQUEsS0FBSyxFQUFFLElBRDhDO0FBRXJEQyxNQUFBQSxVQUFVLEVBQUUsS0FGeUM7QUFHckRDLE1BQUFBLFlBQVksRUFBRTtBQUh1QyxLQUF2RDtBQUtEOztBQUVEQyxFQUFBQSxJQUFJLENBQUNDLEdBQUQsRUFBY1AsTUFBZCxFQUFtQyxDQUN0Qzs7QUFFRFEsRUFBQUEsT0FBTyxDQUFDQyxRQUFELEVBQXVDO0FBQzVDLFdBQU8sSUFBUDtBQUNEOztBQUVLQyxFQUFBQSxVQUFOLENBQWlCQyxTQUFqQixFQUE2RjtBQUFBO0FBQzNGLGFBQU8sS0FBUDtBQUQyRjtBQUU1Rjs7QUF2QjZEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRm9yZ2VDb25maWcsIEZvcmdlSG9va0ZuLCBJRm9yZ2VQbHVnaW4sIFN0YXJ0T3B0aW9ucyB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9zaGFyZWQtdHlwZXMnO1xuaW1wb3J0IHsgQ2hpbGRQcm9jZXNzIH0gZnJvbSAnY2hpbGRfcHJvY2Vzcyc7XG5cbmV4cG9ydCB7IFN0YXJ0T3B0aW9ucyB9O1xuXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBQbHVnaW48Qz4gaW1wbGVtZW50cyBJRm9yZ2VQbHVnaW4ge1xuICBwdWJsaWMgYWJzdHJhY3QgbmFtZTogc3RyaW5nO1xuICAvKiB0c2xpbnQ6ZGlzYWJsZSB2YXJpYWJsZS1uYW1lICovXG4gIF9faXNFbGVjdHJvbkZvcmdlUGx1Z2luITogdHJ1ZTtcbiAgLyogdHNsaW50OmVuYWJsZSB2YXJpYWJsZS1uYW1lICovXG5cbiAgY29uc3RydWN0b3IocHVibGljIGNvbmZpZzogQykge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnX19pc0VsZWN0cm9uRm9yZ2VQbHVnaW4nLCB7XG4gICAgICB2YWx1ZTogdHJ1ZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICB9KTtcbiAgfVxuXG4gIGluaXQoZGlyOiBzdHJpbmcsIGNvbmZpZzogRm9yZ2VDb25maWcpIHtcbiAgfVxuXG4gIGdldEhvb2soaG9va05hbWU6IHN0cmluZyk6IEZvcmdlSG9va0ZuIHwgbnVsbCB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICBhc3luYyBzdGFydExvZ2ljKHN0YXJ0T3B0czogU3RhcnRPcHRpb25zKTogUHJvbWlzZTxDaGlsZFByb2Nlc3MgfCBzdHJpbmcgfCBzdHJpbmdbXSB8IGZhbHNlPiB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG59XG4iXX0=