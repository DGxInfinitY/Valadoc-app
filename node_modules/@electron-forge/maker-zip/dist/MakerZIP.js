"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _makerBase = _interopRequireDefault(require("@electron-forge/maker-base"));

var _path = _interopRequireDefault(require("path"));

var _pify = _interopRequireDefault(require("pify"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class MakerZIP extends _makerBase.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", 'zip');

    _defineProperty(this, "defaultPlatforms", ['darwin', 'mas', 'win32', 'linux']);
  }

  isSupportedOnCurrentPlatform() {
    return true;
  }

  make({
    dir,
    makeDir,
    appName,
    packageJSON,
    targetPlatform
  }) {
    var _this = this;

    return _asyncToGenerator(function* () {
      const _require = require('cross-zip'),
            zip = _require.zip;

      const zipDir = ['darwin', 'mas'].includes(targetPlatform) ? _path.default.resolve(dir, `${appName}.app`) : dir;

      const zipPath = _path.default.resolve(makeDir, `${_path.default.basename(dir)}-${packageJSON.version}.zip`);

      yield _this.ensureFile(zipPath);
      yield (0, _pify.default)(zip)(zipDir, zipPath);
      return [zipPath];
    })();
  }

}

exports.default = MakerZIP;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9NYWtlclpJUC50cyJdLCJuYW1lcyI6WyJNYWtlclpJUCIsIk1ha2VyQmFzZSIsImlzU3VwcG9ydGVkT25DdXJyZW50UGxhdGZvcm0iLCJtYWtlIiwiZGlyIiwibWFrZURpciIsImFwcE5hbWUiLCJwYWNrYWdlSlNPTiIsInRhcmdldFBsYXRmb3JtIiwicmVxdWlyZSIsInppcCIsInppcERpciIsImluY2x1ZGVzIiwicGF0aCIsInJlc29sdmUiLCJ6aXBQYXRoIiwiYmFzZW5hbWUiLCJ2ZXJzaW9uIiwiZW5zdXJlRmlsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBR0E7O0FBQ0E7Ozs7Ozs7Ozs7QUFJZSxNQUFNQSxRQUFOLFNBQXVCQyxrQkFBdkIsQ0FBaUQ7QUFBQTtBQUFBOztBQUFBLGtDQUN2RCxLQUR1RDs7QUFBQSw4Q0FFMUIsQ0FBQyxRQUFELEVBQVcsS0FBWCxFQUFrQixPQUFsQixFQUEyQixPQUEzQixDQUYwQjtBQUFBOztBQUk5REMsRUFBQUEsNEJBQTRCLEdBQUc7QUFDN0IsV0FBTyxJQUFQO0FBQ0Q7O0FBRUtDLEVBQUFBLElBQU4sQ0FBVztBQUNUQyxJQUFBQSxHQURTO0FBRVRDLElBQUFBLE9BRlM7QUFHVEMsSUFBQUEsT0FIUztBQUlUQyxJQUFBQSxXQUpTO0FBS1RDLElBQUFBO0FBTFMsR0FBWCxFQU1pQjtBQUFBOztBQUFBO0FBQUEsdUJBQ0NDLE9BQU8sQ0FBQyxXQUFELENBRFI7QUFBQSxZQUNQQyxHQURPLFlBQ1BBLEdBRE87O0FBR2YsWUFBTUMsTUFBTSxHQUFHLENBQUMsUUFBRCxFQUFXLEtBQVgsRUFBa0JDLFFBQWxCLENBQTJCSixjQUEzQixJQUE2Q0ssY0FBS0MsT0FBTCxDQUFhVixHQUFiLEVBQW1CLEdBQUVFLE9BQVEsTUFBN0IsQ0FBN0MsR0FBbUZGLEdBQWxHOztBQUVBLFlBQU1XLE9BQU8sR0FBR0YsY0FBS0MsT0FBTCxDQUFhVCxPQUFiLEVBQXVCLEdBQUVRLGNBQUtHLFFBQUwsQ0FBY1osR0FBZCxDQUFtQixJQUFHRyxXQUFXLENBQUNVLE9BQVEsTUFBbkUsQ0FBaEI7O0FBRUEsWUFBTSxLQUFJLENBQUNDLFVBQUwsQ0FBZ0JILE9BQWhCLENBQU47QUFDQSxZQUFNLG1CQUFLTCxHQUFMLEVBQVVDLE1BQVYsRUFBa0JJLE9BQWxCLENBQU47QUFFQSxhQUFPLENBQUNBLE9BQUQsQ0FBUDtBQVZlO0FBV2hCOztBQXpCNkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgTWFrZXJCYXNlLCB7IE1ha2VyT3B0aW9ucyB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9tYWtlci1iYXNlJztcbmltcG9ydCB7IEZvcmdlUGxhdGZvcm0gfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcblxuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgcGlmeSBmcm9tICdwaWZ5JztcblxuZXhwb3J0IHR5cGUgTWFrZXJaSVBDb25maWcgPSB7fTtcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTWFrZXJaSVAgZXh0ZW5kcyBNYWtlckJhc2U8TWFrZXJaSVBDb25maWc+IHtcbiAgbmFtZSA9ICd6aXAnO1xuICBkZWZhdWx0UGxhdGZvcm1zOiBGb3JnZVBsYXRmb3JtW10gPSBbJ2RhcndpbicsICdtYXMnLCAnd2luMzInLCAnbGludXgnXTtcblxuICBpc1N1cHBvcnRlZE9uQ3VycmVudFBsYXRmb3JtKCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgYXN5bmMgbWFrZSh7XG4gICAgZGlyLFxuICAgIG1ha2VEaXIsXG4gICAgYXBwTmFtZSxcbiAgICBwYWNrYWdlSlNPTixcbiAgICB0YXJnZXRQbGF0Zm9ybSxcbiAgfTogTWFrZXJPcHRpb25zKSB7XG4gICAgY29uc3QgeyB6aXAgfSA9IHJlcXVpcmUoJ2Nyb3NzLXppcCcpO1xuXG4gICAgY29uc3QgemlwRGlyID0gWydkYXJ3aW4nLCAnbWFzJ10uaW5jbHVkZXModGFyZ2V0UGxhdGZvcm0pID8gcGF0aC5yZXNvbHZlKGRpciwgYCR7YXBwTmFtZX0uYXBwYCkgOiBkaXI7XG5cbiAgICBjb25zdCB6aXBQYXRoID0gcGF0aC5yZXNvbHZlKG1ha2VEaXIsIGAke3BhdGguYmFzZW5hbWUoZGlyKX0tJHtwYWNrYWdlSlNPTi52ZXJzaW9ufS56aXBgKTtcblxuICAgIGF3YWl0IHRoaXMuZW5zdXJlRmlsZSh6aXBQYXRoKTtcbiAgICBhd2FpdCBwaWZ5KHppcCkoemlwRGlyLCB6aXBQYXRoKTtcblxuICAgIHJldHVybiBbemlwUGF0aF07XG4gIH1cbn1cbiJdfQ==