"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "InstallerOptions", {
  enumerable: true,
  get: function get() {
    return _installerBase.InstallerOptions;
  }
});
exports.default = void 0;

require("source-map-support/register");

var _installerBase = _interopRequireWildcard(require("@electron-forge/installer-base"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _pify = _interopRequireDefault(require("pify"));

var _sudoPrompt = _interopRequireDefault(require("sudo-prompt"));

var _child_process = require("child_process");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

class InstallerDarwin extends _installerBase.default {
  moveApp(appPath, targetApplicationPath, spinner, copyInstead = false) {
    return _asyncToGenerator(function* () {
      let writeAccess = true;

      try {
        yield _fsExtra.default.access('/Applications', _fsExtra.default.constants.W_OK);
      } catch (err) {
        writeAccess = false;
      }

      if (yield _fsExtra.default.pathExists(targetApplicationPath)) {
        spinner.fail();
        throw `The application "${_path.default.basename(targetApplicationPath)}" appears to already exist in /Applications.`;
      }

      const moveCommand = `${copyInstead ? 'cp -r' : 'mv'} "${appPath}" "${targetApplicationPath}"`;

      if (writeAccess) {
        yield (0, _pify.default)(_child_process.exec)(moveCommand);
      } else {
        yield (0, _pify.default)(_sudoPrompt.default.exec)(moveCommand, {
          name: 'Electron Forge'
        });
      }
    })();
  }

}

exports.default = InstallerDarwin;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9JbnN0YWxsZXJEYXJ3aW4udHMiXSwibmFtZXMiOlsiSW5zdGFsbGVyRGFyd2luIiwiSW5zdGFsbGVyQmFzZSIsIm1vdmVBcHAiLCJhcHBQYXRoIiwidGFyZ2V0QXBwbGljYXRpb25QYXRoIiwic3Bpbm5lciIsImNvcHlJbnN0ZWFkIiwid3JpdGVBY2Nlc3MiLCJmcyIsImFjY2VzcyIsImNvbnN0YW50cyIsIldfT0siLCJlcnIiLCJwYXRoRXhpc3RzIiwiZmFpbCIsInBhdGgiLCJiYXNlbmFtZSIsIm1vdmVDb21tYW5kIiwiZXhlYyIsInN1ZG8iLCJuYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFDQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7Ozs7Ozs7OztBQUllLE1BQWVBLGVBQWYsU0FBdUNDLHNCQUF2QyxDQUFxRDtBQUM1REMsRUFBQUEsT0FBTixDQUFjQyxPQUFkLEVBQStCQyxxQkFBL0IsRUFBOERDLE9BQTlELEVBQWdGQyxXQUFXLEdBQUcsS0FBOUYsRUFBcUc7QUFBQTtBQUNuRyxVQUFJQyxXQUFXLEdBQUcsSUFBbEI7O0FBQ0EsVUFBSTtBQUNGLGNBQU1DLGlCQUFHQyxNQUFILENBQVUsZUFBVixFQUEyQkQsaUJBQUdFLFNBQUgsQ0FBYUMsSUFBeEMsQ0FBTjtBQUNELE9BRkQsQ0FFRSxPQUFPQyxHQUFQLEVBQVk7QUFDWkwsUUFBQUEsV0FBVyxHQUFHLEtBQWQ7QUFDRDs7QUFFRCxnQkFBVUMsaUJBQUdLLFVBQUgsQ0FBY1QscUJBQWQsQ0FBVixFQUFnRDtBQUM5Q0MsUUFBQUEsT0FBTyxDQUFDUyxJQUFSO0FBQ0EsY0FBTyxvQkFBbUJDLGNBQUtDLFFBQUwsQ0FBY1oscUJBQWQsQ0FBcUMsOENBQS9EO0FBQ0Q7O0FBRUQsWUFBTWEsV0FBVyxHQUFJLEdBQUVYLFdBQVcsR0FBRyxPQUFILEdBQWEsSUFBSyxLQUFJSCxPQUFRLE1BQUtDLHFCQUFzQixHQUEzRjs7QUFDQSxVQUFJRyxXQUFKLEVBQWlCO0FBQ2YsY0FBTSxtQkFBS1csbUJBQUwsRUFBV0QsV0FBWCxDQUFOO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsY0FBTSxtQkFBS0Usb0JBQUtELElBQVYsRUFBZ0JELFdBQWhCLEVBQTZCO0FBQ2pDRyxVQUFBQSxJQUFJLEVBQUU7QUFEMkIsU0FBN0IsQ0FBTjtBQUdEO0FBcEJrRztBQXFCcEc7O0FBdEJpRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9yYUltcGwgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2UvYXN5bmMtb3JhJztcbmltcG9ydCBJbnN0YWxsZXJCYXNlLCB7IEluc3RhbGxlck9wdGlvbnMgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2UvaW5zdGFsbGVyLWJhc2UnO1xuXG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgcGlmeSBmcm9tICdwaWZ5JztcbmltcG9ydCBzdWRvIGZyb20gJ3N1ZG8tcHJvbXB0JztcbmltcG9ydCB7IGV4ZWMgfSBmcm9tICdjaGlsZF9wcm9jZXNzJztcblxuZXhwb3J0IHsgSW5zdGFsbGVyT3B0aW9ucyB9O1xuXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBJbnN0YWxsZXJEYXJ3aW4gZXh0ZW5kcyBJbnN0YWxsZXJCYXNlIHtcbiAgYXN5bmMgbW92ZUFwcChhcHBQYXRoOiBzdHJpbmcsIHRhcmdldEFwcGxpY2F0aW9uUGF0aDogc3RyaW5nLCBzcGlubmVyOiBPcmFJbXBsLCBjb3B5SW5zdGVhZCA9IGZhbHNlKSB7XG4gICAgbGV0IHdyaXRlQWNjZXNzID0gdHJ1ZTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgZnMuYWNjZXNzKCcvQXBwbGljYXRpb25zJywgZnMuY29uc3RhbnRzLldfT0spO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgd3JpdGVBY2Nlc3MgPSBmYWxzZTtcbiAgICB9XG5cbiAgICBpZiAoYXdhaXQgZnMucGF0aEV4aXN0cyh0YXJnZXRBcHBsaWNhdGlvblBhdGgpKSB7XG4gICAgICBzcGlubmVyLmZhaWwoKTtcbiAgICAgIHRocm93IGBUaGUgYXBwbGljYXRpb24gXCIke3BhdGguYmFzZW5hbWUodGFyZ2V0QXBwbGljYXRpb25QYXRoKX1cIiBhcHBlYXJzIHRvIGFscmVhZHkgZXhpc3QgaW4gL0FwcGxpY2F0aW9ucy5gO1xuICAgIH1cblxuICAgIGNvbnN0IG1vdmVDb21tYW5kID0gYCR7Y29weUluc3RlYWQgPyAnY3AgLXInIDogJ212J30gXCIke2FwcFBhdGh9XCIgXCIke3RhcmdldEFwcGxpY2F0aW9uUGF0aH1cImA7XG4gICAgaWYgKHdyaXRlQWNjZXNzKSB7XG4gICAgICBhd2FpdCBwaWZ5KGV4ZWMpKG1vdmVDb21tYW5kKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXdhaXQgcGlmeShzdWRvLmV4ZWMpKG1vdmVDb21tYW5kLCB7XG4gICAgICAgIG5hbWU6ICdFbGVjdHJvbiBGb3JnZScsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cbn1cbiJdfQ==