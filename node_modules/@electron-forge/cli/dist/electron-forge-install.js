"use strict";

require("source-map-support/register");

var _core = require("@electron-forge/core");

var _inquirer = _interopRequireDefault(require("inquirer"));

var _commander = _interopRequireDefault(require("commander"));

require("./util/terminate");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

_asyncToGenerator(function* () {
  let repo;

  _commander.default.version(require('../package.json').version).arguments('[repository]').option('--prerelease', 'Fetch prerelease versions').action(repository => {
    repo = repository;
  }).parse(process.argv);

  const chooseAsset =
  /*#__PURE__*/
  function () {
    var _ref2 = _asyncToGenerator(function* (assets) {
      const choices = [];
      assets.forEach(asset => {
        choices.push({
          name: asset.name,
          value: asset.id
        });
      });

      const _ref3 = yield _inquirer.default.createPromptModule()({
        choices,
        type: 'list',
        name: 'assetID',
        message: 'Multiple potential assets found, please choose one from the list below:'.cyan
      }),
            assetID = _ref3.assetID;

      return assets.find(asset => asset.id === assetID);
    });

    return function chooseAsset(_x) {
      return _ref2.apply(this, arguments);
    };
  }();

  yield _core.api.install({
    chooseAsset,
    repo,
    interactive: true,
    prerelease: _commander.default.prerelease
  });
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGVjdHJvbi1mb3JnZS1pbnN0YWxsLnRzIl0sIm5hbWVzIjpbInJlcG8iLCJwcm9ncmFtIiwidmVyc2lvbiIsInJlcXVpcmUiLCJhcmd1bWVudHMiLCJvcHRpb24iLCJhY3Rpb24iLCJyZXBvc2l0b3J5IiwicGFyc2UiLCJwcm9jZXNzIiwiYXJndiIsImNob29zZUFzc2V0IiwiYXNzZXRzIiwiY2hvaWNlcyIsImZvckVhY2giLCJhc3NldCIsInB1c2giLCJuYW1lIiwidmFsdWUiLCJpZCIsImlucXVpcmVyIiwiY3JlYXRlUHJvbXB0TW9kdWxlIiwidHlwZSIsIm1lc3NhZ2UiLCJjeWFuIiwiYXNzZXRJRCIsImZpbmQiLCJhcGkiLCJpbnN0YWxsIiwiaW50ZXJhY3RpdmUiLCJwcmVyZWxlYXNlIl0sIm1hcHBpbmdzIjoiOzs7O0FBQUE7O0FBQ0E7O0FBRUE7O0FBRUE7Ozs7Ozs7O0FBRUEsa0JBQUMsYUFBWTtBQUNYLE1BQUlBLElBQUo7O0FBRUFDLHFCQUNHQyxPQURILENBQ1dDLE9BQU8sQ0FBQyxpQkFBRCxDQUFQLENBQTJCRCxPQUR0QyxFQUVHRSxTQUZILENBRWEsY0FGYixFQUdHQyxNQUhILENBR1UsY0FIVixFQUcwQiwyQkFIMUIsRUFJR0MsTUFKSCxDQUlXQyxVQUFELElBQWdCO0FBQ3RCUCxJQUFBQSxJQUFJLEdBQUdPLFVBQVA7QUFDRCxHQU5ILEVBT0dDLEtBUEgsQ0FPU0MsT0FBTyxDQUFDQyxJQVBqQjs7QUFTQSxRQUFNQyxXQUFXO0FBQUE7QUFBQTtBQUFBLGtDQUFHLFdBQU9DLE1BQVAsRUFBa0M7QUFDcEQsWUFBTUMsT0FBMEMsR0FBRyxFQUFuRDtBQUNBRCxNQUFBQSxNQUFNLENBQUNFLE9BQVAsQ0FBZ0JDLEtBQUQsSUFBVztBQUN4QkYsUUFBQUEsT0FBTyxDQUFDRyxJQUFSLENBQWE7QUFBRUMsVUFBQUEsSUFBSSxFQUFFRixLQUFLLENBQUNFLElBQWQ7QUFBb0JDLFVBQUFBLEtBQUssRUFBRUgsS0FBSyxDQUFDSTtBQUFqQyxTQUFiO0FBQ0QsT0FGRDs7QUFGb0QsMEJBSzFCQyxrQkFBU0Msa0JBQVQsR0FBbUQ7QUFDM0VSLFFBQUFBLE9BRDJFO0FBRTNFUyxRQUFBQSxJQUFJLEVBQUUsTUFGcUU7QUFHM0VMLFFBQUFBLElBQUksRUFBRSxTQUhxRTtBQUkzRU0sUUFBQUEsT0FBTyxFQUFFLDBFQUEwRUM7QUFKUixPQUFuRCxDQUwwQjtBQUFBLFlBSzVDQyxPQUw0QyxTQUs1Q0EsT0FMNEM7O0FBWXBELGFBQU9iLE1BQU0sQ0FBQ2MsSUFBUCxDQUFZWCxLQUFLLElBQUlBLEtBQUssQ0FBQ0ksRUFBTixLQUFhTSxPQUFsQyxDQUFQO0FBQ0QsS0FiZ0I7O0FBQUEsb0JBQVhkLFdBQVc7QUFBQTtBQUFBO0FBQUEsS0FBakI7O0FBZUEsUUFBTWdCLFVBQUlDLE9BQUosQ0FBWTtBQUNoQmpCLElBQUFBLFdBRGdCO0FBRWhCWCxJQUFBQSxJQUZnQjtBQUdoQjZCLElBQUFBLFdBQVcsRUFBRSxJQUhHO0FBSWhCQyxJQUFBQSxVQUFVLEVBQUU3QixtQkFBUTZCO0FBSkosR0FBWixDQUFOO0FBTUQsQ0FqQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhcGksIEluc3RhbGxBc3NldCB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9jb3JlJztcbmltcG9ydCBpbnF1aXJlciBmcm9tICdpbnF1aXJlcic7XG5cbmltcG9ydCBwcm9ncmFtIGZyb20gJ2NvbW1hbmRlcic7XG5cbmltcG9ydCAnLi91dGlsL3Rlcm1pbmF0ZSc7XG5cbihhc3luYyAoKSA9PiB7XG4gIGxldCByZXBvITogc3RyaW5nO1xuXG4gIHByb2dyYW1cbiAgICAudmVyc2lvbihyZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uKVxuICAgIC5hcmd1bWVudHMoJ1tyZXBvc2l0b3J5XScpXG4gICAgLm9wdGlvbignLS1wcmVyZWxlYXNlJywgJ0ZldGNoIHByZXJlbGVhc2UgdmVyc2lvbnMnKVxuICAgIC5hY3Rpb24oKHJlcG9zaXRvcnkpID0+IHtcbiAgICAgIHJlcG8gPSByZXBvc2l0b3J5O1xuICAgIH0pXG4gICAgLnBhcnNlKHByb2Nlc3MuYXJndik7XG5cbiAgY29uc3QgY2hvb3NlQXNzZXQgPSBhc3luYyAoYXNzZXRzOiBJbnN0YWxsQXNzZXRbXSkgPT4ge1xuICAgIGNvbnN0IGNob2ljZXM6IHsgbmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nIH1bXSA9IFtdO1xuICAgIGFzc2V0cy5mb3JFYWNoKChhc3NldCkgPT4ge1xuICAgICAgY2hvaWNlcy5wdXNoKHsgbmFtZTogYXNzZXQubmFtZSwgdmFsdWU6IGFzc2V0LmlkIH0pO1xuICAgIH0pO1xuICAgIGNvbnN0IHsgYXNzZXRJRCB9ID0gYXdhaXQgaW5xdWlyZXIuY3JlYXRlUHJvbXB0TW9kdWxlKCk8eyBhc3NldElEOiBzdHJpbmcgfT4oe1xuICAgICAgY2hvaWNlcyxcbiAgICAgIHR5cGU6ICdsaXN0JyxcbiAgICAgIG5hbWU6ICdhc3NldElEJyxcbiAgICAgIG1lc3NhZ2U6ICdNdWx0aXBsZSBwb3RlbnRpYWwgYXNzZXRzIGZvdW5kLCBwbGVhc2UgY2hvb3NlIG9uZSBmcm9tIHRoZSBsaXN0IGJlbG93OicuY3lhbixcbiAgICB9KTtcblxuICAgIHJldHVybiBhc3NldHMuZmluZChhc3NldCA9PiBhc3NldC5pZCA9PT0gYXNzZXRJRCkhO1xuICB9O1xuXG4gIGF3YWl0IGFwaS5pbnN0YWxsKHtcbiAgICBjaG9vc2VBc3NldCxcbiAgICByZXBvLFxuICAgIGludGVyYWN0aXZlOiB0cnVlLFxuICAgIHByZXJlbGVhc2U6IHByb2dyYW0ucHJlcmVsZWFzZSxcbiAgfSk7XG59KSgpO1xuIl19