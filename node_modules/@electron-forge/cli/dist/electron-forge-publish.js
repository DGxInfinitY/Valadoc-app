"use strict";

require("source-map-support/register");

var _core = require("@electron-forge/core");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _commander = _interopRequireDefault(require("commander"));

require("./util/terminate");

var _electronForgeMake = require("./electron-forge-make");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

_asyncToGenerator(function* () {
  let dir = process.cwd();

  _commander.default.version(require('../package.json').version).arguments('[cwd]').option('--target [target[,target...]]', 'The comma-separated deployment targets, defaults to "github"').option('--dry-run', 'Triggers a publish dry run which saves state and doesn\'t upload anything').option('--from-dry-run', 'Attempts to publish artifacts from the last saved dry run').allowUnknownOption(true).action(cwd => {
    if (!cwd) return;

    if (_path.default.isAbsolute(cwd) && _fsExtra.default.existsSync(cwd)) {
      dir = cwd;
    } else if (_fsExtra.default.existsSync(_path.default.resolve(dir, cwd))) {
      dir = _path.default.resolve(dir, cwd);
    }
  }).parse(process.argv);

  const publishOpts = {
    dir,
    interactive: true,
    dryRun: _commander.default.dryRun,
    dryRunResume: _commander.default.fromDryRun
  };
  if (_commander.default.target) publishOpts.publishTargets = _commander.default.target.split(',');
  publishOpts.makeOptions = (0, _electronForgeMake.getMakeOptions)();
  yield _core.api.publish(publishOpts);
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGVjdHJvbi1mb3JnZS1wdWJsaXNoLnRzIl0sIm5hbWVzIjpbImRpciIsInByb2Nlc3MiLCJjd2QiLCJwcm9ncmFtIiwidmVyc2lvbiIsInJlcXVpcmUiLCJhcmd1bWVudHMiLCJvcHRpb24iLCJhbGxvd1Vua25vd25PcHRpb24iLCJhY3Rpb24iLCJwYXRoIiwiaXNBYnNvbHV0ZSIsImZzIiwiZXhpc3RzU3luYyIsInJlc29sdmUiLCJwYXJzZSIsImFyZ3YiLCJwdWJsaXNoT3B0cyIsImludGVyYWN0aXZlIiwiZHJ5UnVuIiwiZHJ5UnVuUmVzdW1lIiwiZnJvbURyeVJ1biIsInRhcmdldCIsInB1Ymxpc2hUYXJnZXRzIiwic3BsaXQiLCJtYWtlT3B0aW9ucyIsImFwaSIsInB1Ymxpc2giXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7Ozs7Ozs7QUFFQSxrQkFBQyxhQUFZO0FBQ1gsTUFBSUEsR0FBRyxHQUFHQyxPQUFPLENBQUNDLEdBQVIsRUFBVjs7QUFDQUMscUJBQ0dDLE9BREgsQ0FDV0MsT0FBTyxDQUFDLGlCQUFELENBQVAsQ0FBMkJELE9BRHRDLEVBRUdFLFNBRkgsQ0FFYSxPQUZiLEVBR0dDLE1BSEgsQ0FHVSwrQkFIVixFQUcyQyw4REFIM0MsRUFJR0EsTUFKSCxDQUlVLFdBSlYsRUFJdUIsMkVBSnZCLEVBS0dBLE1BTEgsQ0FLVSxnQkFMVixFQUs0QiwyREFMNUIsRUFNR0Msa0JBTkgsQ0FNc0IsSUFOdEIsRUFPR0MsTUFQSCxDQU9XUCxHQUFELElBQVM7QUFDZixRQUFJLENBQUNBLEdBQUwsRUFBVTs7QUFDVixRQUFJUSxjQUFLQyxVQUFMLENBQWdCVCxHQUFoQixLQUF3QlUsaUJBQUdDLFVBQUgsQ0FBY1gsR0FBZCxDQUE1QixFQUFnRDtBQUM5Q0YsTUFBQUEsR0FBRyxHQUFHRSxHQUFOO0FBQ0QsS0FGRCxNQUVPLElBQUlVLGlCQUFHQyxVQUFILENBQWNILGNBQUtJLE9BQUwsQ0FBYWQsR0FBYixFQUFrQkUsR0FBbEIsQ0FBZCxDQUFKLEVBQTJDO0FBQ2hERixNQUFBQSxHQUFHLEdBQUdVLGNBQUtJLE9BQUwsQ0FBYWQsR0FBYixFQUFrQkUsR0FBbEIsQ0FBTjtBQUNEO0FBQ0YsR0FkSCxFQWVHYSxLQWZILENBZVNkLE9BQU8sQ0FBQ2UsSUFmakI7O0FBaUJBLFFBQU1DLFdBQTJCLEdBQUc7QUFDbENqQixJQUFBQSxHQURrQztBQUVsQ2tCLElBQUFBLFdBQVcsRUFBRSxJQUZxQjtBQUdsQ0MsSUFBQUEsTUFBTSxFQUFFaEIsbUJBQVFnQixNQUhrQjtBQUlsQ0MsSUFBQUEsWUFBWSxFQUFFakIsbUJBQVFrQjtBQUpZLEdBQXBDO0FBTUEsTUFBSWxCLG1CQUFRbUIsTUFBWixFQUFvQkwsV0FBVyxDQUFDTSxjQUFaLEdBQTZCcEIsbUJBQVFtQixNQUFSLENBQWVFLEtBQWYsQ0FBcUIsR0FBckIsQ0FBN0I7QUFFcEJQLEVBQUFBLFdBQVcsQ0FBQ1EsV0FBWixHQUEwQix3Q0FBMUI7QUFFQSxRQUFNQyxVQUFJQyxPQUFKLENBQVlWLFdBQVosQ0FBTjtBQUNELENBOUJEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXBpLCBQdWJsaXNoT3B0aW9ucyB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9jb3JlJztcblxuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHByb2dyYW0gZnJvbSAnY29tbWFuZGVyJztcblxuaW1wb3J0ICcuL3V0aWwvdGVybWluYXRlJztcbmltcG9ydCB7IGdldE1ha2VPcHRpb25zIH0gZnJvbSAnLi9lbGVjdHJvbi1mb3JnZS1tYWtlJztcblxuKGFzeW5jICgpID0+IHtcbiAgbGV0IGRpciA9IHByb2Nlc3MuY3dkKCk7XG4gIHByb2dyYW1cbiAgICAudmVyc2lvbihyZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uKVxuICAgIC5hcmd1bWVudHMoJ1tjd2RdJylcbiAgICAub3B0aW9uKCctLXRhcmdldCBbdGFyZ2V0Wyx0YXJnZXQuLi5dXScsICdUaGUgY29tbWEtc2VwYXJhdGVkIGRlcGxveW1lbnQgdGFyZ2V0cywgZGVmYXVsdHMgdG8gXCJnaXRodWJcIicpXG4gICAgLm9wdGlvbignLS1kcnktcnVuJywgJ1RyaWdnZXJzIGEgcHVibGlzaCBkcnkgcnVuIHdoaWNoIHNhdmVzIHN0YXRlIGFuZCBkb2VzblxcJ3QgdXBsb2FkIGFueXRoaW5nJylcbiAgICAub3B0aW9uKCctLWZyb20tZHJ5LXJ1bicsICdBdHRlbXB0cyB0byBwdWJsaXNoIGFydGlmYWN0cyBmcm9tIHRoZSBsYXN0IHNhdmVkIGRyeSBydW4nKVxuICAgIC5hbGxvd1Vua25vd25PcHRpb24odHJ1ZSlcbiAgICAuYWN0aW9uKChjd2QpID0+IHtcbiAgICAgIGlmICghY3dkKSByZXR1cm47XG4gICAgICBpZiAocGF0aC5pc0Fic29sdXRlKGN3ZCkgJiYgZnMuZXhpc3RzU3luYyhjd2QpKSB7XG4gICAgICAgIGRpciA9IGN3ZDtcbiAgICAgIH0gZWxzZSBpZiAoZnMuZXhpc3RzU3luYyhwYXRoLnJlc29sdmUoZGlyLCBjd2QpKSkge1xuICAgICAgICBkaXIgPSBwYXRoLnJlc29sdmUoZGlyLCBjd2QpO1xuICAgICAgfVxuICAgIH0pXG4gICAgLnBhcnNlKHByb2Nlc3MuYXJndik7XG5cbiAgY29uc3QgcHVibGlzaE9wdHM6IFB1Ymxpc2hPcHRpb25zID0ge1xuICAgIGRpcixcbiAgICBpbnRlcmFjdGl2ZTogdHJ1ZSxcbiAgICBkcnlSdW46IHByb2dyYW0uZHJ5UnVuLFxuICAgIGRyeVJ1blJlc3VtZTogcHJvZ3JhbS5mcm9tRHJ5UnVuLFxuICB9O1xuICBpZiAocHJvZ3JhbS50YXJnZXQpIHB1Ymxpc2hPcHRzLnB1Ymxpc2hUYXJnZXRzID0gcHJvZ3JhbS50YXJnZXQuc3BsaXQoJywnKTtcblxuICBwdWJsaXNoT3B0cy5tYWtlT3B0aW9ucyA9IGdldE1ha2VPcHRpb25zKCk7XG5cbiAgYXdhaXQgYXBpLnB1Ymxpc2gocHVibGlzaE9wdHMpO1xufSkoKTtcbiJdfQ==