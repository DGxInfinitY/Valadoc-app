"use strict";

require("source-map-support/register");

var _core = require("@electron-forge/core");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _commander = _interopRequireDefault(require("commander"));

require("./util/terminate");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

_asyncToGenerator(function* () {
  let dir = process.cwd();

  _commander.default.version(require('../package.json').version).arguments('[cwd]').option('-a, --arch [arch]', 'Target architecture').option('-p, --platform [platform]', 'Target build platform').action(cwd => {
    if (!cwd) return;

    if (_path.default.isAbsolute(cwd) && _fsExtra.default.existsSync(cwd)) {
      dir = cwd;
    } else if (_fsExtra.default.existsSync(_path.default.resolve(dir, cwd))) {
      dir = _path.default.resolve(dir, cwd);
    }
  }).parse(process.argv);

  const packageOpts = {
    dir,
    interactive: true
  };
  if (_commander.default.arch) packageOpts.arch = _commander.default.arch;
  if (_commander.default.platform) packageOpts.platform = _commander.default.platform;
  yield _core.api.package(packageOpts);
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGVjdHJvbi1mb3JnZS1wYWNrYWdlLnRzIl0sIm5hbWVzIjpbImRpciIsInByb2Nlc3MiLCJjd2QiLCJwcm9ncmFtIiwidmVyc2lvbiIsInJlcXVpcmUiLCJhcmd1bWVudHMiLCJvcHRpb24iLCJhY3Rpb24iLCJwYXRoIiwiaXNBYnNvbHV0ZSIsImZzIiwiZXhpc3RzU3luYyIsInJlc29sdmUiLCJwYXJzZSIsImFyZ3YiLCJwYWNrYWdlT3B0cyIsImludGVyYWN0aXZlIiwiYXJjaCIsInBsYXRmb3JtIiwiYXBpIiwicGFja2FnZSJdLCJtYXBwaW5ncyI6Ijs7OztBQUFBOztBQUVBOztBQUNBOztBQUNBOztBQUVBOzs7Ozs7OztBQUVBLGtCQUFDLGFBQVk7QUFDWCxNQUFJQSxHQUFHLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBUixFQUFWOztBQUVBQyxxQkFDR0MsT0FESCxDQUNXQyxPQUFPLENBQUMsaUJBQUQsQ0FBUCxDQUEyQkQsT0FEdEMsRUFFR0UsU0FGSCxDQUVhLE9BRmIsRUFHR0MsTUFISCxDQUdVLG1CQUhWLEVBRytCLHFCQUgvQixFQUlHQSxNQUpILENBSVUsMkJBSlYsRUFJdUMsdUJBSnZDLEVBS0dDLE1BTEgsQ0FLV04sR0FBRCxJQUFTO0FBQ2YsUUFBSSxDQUFDQSxHQUFMLEVBQVU7O0FBQ1YsUUFBSU8sY0FBS0MsVUFBTCxDQUFnQlIsR0FBaEIsS0FBd0JTLGlCQUFHQyxVQUFILENBQWNWLEdBQWQsQ0FBNUIsRUFBZ0Q7QUFDOUNGLE1BQUFBLEdBQUcsR0FBR0UsR0FBTjtBQUNELEtBRkQsTUFFTyxJQUFJUyxpQkFBR0MsVUFBSCxDQUFjSCxjQUFLSSxPQUFMLENBQWFiLEdBQWIsRUFBa0JFLEdBQWxCLENBQWQsQ0FBSixFQUEyQztBQUNoREYsTUFBQUEsR0FBRyxHQUFHUyxjQUFLSSxPQUFMLENBQWFiLEdBQWIsRUFBa0JFLEdBQWxCLENBQU47QUFDRDtBQUNGLEdBWkgsRUFhR1ksS0FiSCxDQWFTYixPQUFPLENBQUNjLElBYmpCOztBQWVBLFFBQU1DLFdBQTJCLEdBQUc7QUFDbENoQixJQUFBQSxHQURrQztBQUVsQ2lCLElBQUFBLFdBQVcsRUFBRTtBQUZxQixHQUFwQztBQUlBLE1BQUlkLG1CQUFRZSxJQUFaLEVBQWtCRixXQUFXLENBQUNFLElBQVosR0FBbUJmLG1CQUFRZSxJQUEzQjtBQUNsQixNQUFJZixtQkFBUWdCLFFBQVosRUFBc0JILFdBQVcsQ0FBQ0csUUFBWixHQUF1QmhCLG1CQUFRZ0IsUUFBL0I7QUFFdEIsUUFBTUMsVUFBSUMsT0FBSixDQUFZTCxXQUFaLENBQU47QUFDRCxDQTFCRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFwaSwgUGFja2FnZU9wdGlvbnMgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2UvY29yZSc7XG5cbmltcG9ydCBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcbmltcG9ydCBwcm9ncmFtIGZyb20gJ2NvbW1hbmRlcic7XG5cbmltcG9ydCAnLi91dGlsL3Rlcm1pbmF0ZSc7XG5cbihhc3luYyAoKSA9PiB7XG4gIGxldCBkaXIgPSBwcm9jZXNzLmN3ZCgpO1xuXG4gIHByb2dyYW1cbiAgICAudmVyc2lvbihyZXF1aXJlKCcuLi9wYWNrYWdlLmpzb24nKS52ZXJzaW9uKVxuICAgIC5hcmd1bWVudHMoJ1tjd2RdJylcbiAgICAub3B0aW9uKCctYSwgLS1hcmNoIFthcmNoXScsICdUYXJnZXQgYXJjaGl0ZWN0dXJlJylcbiAgICAub3B0aW9uKCctcCwgLS1wbGF0Zm9ybSBbcGxhdGZvcm1dJywgJ1RhcmdldCBidWlsZCBwbGF0Zm9ybScpXG4gICAgLmFjdGlvbigoY3dkKSA9PiB7XG4gICAgICBpZiAoIWN3ZCkgcmV0dXJuO1xuICAgICAgaWYgKHBhdGguaXNBYnNvbHV0ZShjd2QpICYmIGZzLmV4aXN0c1N5bmMoY3dkKSkge1xuICAgICAgICBkaXIgPSBjd2Q7XG4gICAgICB9IGVsc2UgaWYgKGZzLmV4aXN0c1N5bmMocGF0aC5yZXNvbHZlKGRpciwgY3dkKSkpIHtcbiAgICAgICAgZGlyID0gcGF0aC5yZXNvbHZlKGRpciwgY3dkKTtcbiAgICAgIH1cbiAgICB9KVxuICAgIC5wYXJzZShwcm9jZXNzLmFyZ3YpO1xuXG4gIGNvbnN0IHBhY2thZ2VPcHRzOiBQYWNrYWdlT3B0aW9ucyA9IHtcbiAgICBkaXIsXG4gICAgaW50ZXJhY3RpdmU6IHRydWUsXG4gIH07XG4gIGlmIChwcm9ncmFtLmFyY2gpIHBhY2thZ2VPcHRzLmFyY2ggPSBwcm9ncmFtLmFyY2g7XG4gIGlmIChwcm9ncmFtLnBsYXRmb3JtKSBwYWNrYWdlT3B0cy5wbGF0Zm9ybSA9IHByb2dyYW0ucGxhdGZvcm07XG5cbiAgYXdhaXQgYXBpLnBhY2thZ2UocGFja2FnZU9wdHMpO1xufSkoKTtcbiJdfQ==