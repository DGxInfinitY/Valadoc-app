"use strict";

require("source-map-support/register");

var _core = require("@electron-forge/core");

var _fs = _interopRequireDefault(require("fs"));

var _path = _interopRequireDefault(require("path"));

var _commander = _interopRequireDefault(require("commander"));

require("./util/terminate");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

_asyncToGenerator(function* () {
  let dir = process.cwd();

  _commander.default.version(require('../package.json').version).arguments('[cwd]').action(cwd => {
    if (!cwd) return;

    if (_path.default.isAbsolute(cwd) && _fs.default.existsSync(cwd)) {
      dir = cwd;
    } else if (_fs.default.existsSync(_path.default.resolve(dir, cwd))) {
      dir = _path.default.resolve(dir, cwd);
    }
  }).parse(process.argv);

  yield _core.api.lint({
    dir,
    interactive: true
  });
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGVjdHJvbi1mb3JnZS1saW50LnRzIl0sIm5hbWVzIjpbImRpciIsInByb2Nlc3MiLCJjd2QiLCJwcm9ncmFtIiwidmVyc2lvbiIsInJlcXVpcmUiLCJhcmd1bWVudHMiLCJhY3Rpb24iLCJwYXRoIiwiaXNBYnNvbHV0ZSIsImZzIiwiZXhpc3RzU3luYyIsInJlc29sdmUiLCJwYXJzZSIsImFyZ3YiLCJhcGkiLCJsaW50IiwiaW50ZXJhY3RpdmUiXSwibWFwcGluZ3MiOiI7Ozs7QUFBQTs7QUFFQTs7QUFDQTs7QUFDQTs7QUFFQTs7Ozs7Ozs7QUFFQSxrQkFBQyxhQUFZO0FBQ1gsTUFBSUEsR0FBRyxHQUFHQyxPQUFPLENBQUNDLEdBQVIsRUFBVjs7QUFDQUMscUJBQ0dDLE9BREgsQ0FDV0MsT0FBTyxDQUFDLGlCQUFELENBQVAsQ0FBMkJELE9BRHRDLEVBRUdFLFNBRkgsQ0FFYSxPQUZiLEVBR0dDLE1BSEgsQ0FHV0wsR0FBRCxJQUFTO0FBQ2YsUUFBSSxDQUFDQSxHQUFMLEVBQVU7O0FBQ1YsUUFBSU0sY0FBS0MsVUFBTCxDQUFnQlAsR0FBaEIsS0FBd0JRLFlBQUdDLFVBQUgsQ0FBY1QsR0FBZCxDQUE1QixFQUFnRDtBQUM5Q0YsTUFBQUEsR0FBRyxHQUFHRSxHQUFOO0FBQ0QsS0FGRCxNQUVPLElBQUlRLFlBQUdDLFVBQUgsQ0FBY0gsY0FBS0ksT0FBTCxDQUFhWixHQUFiLEVBQWtCRSxHQUFsQixDQUFkLENBQUosRUFBMkM7QUFDaERGLE1BQUFBLEdBQUcsR0FBR1EsY0FBS0ksT0FBTCxDQUFhWixHQUFiLEVBQWtCRSxHQUFsQixDQUFOO0FBQ0Q7QUFDRixHQVZILEVBV0dXLEtBWEgsQ0FXU1osT0FBTyxDQUFDYSxJQVhqQjs7QUFhQSxRQUFNQyxVQUFJQyxJQUFKLENBQVM7QUFDYmhCLElBQUFBLEdBRGE7QUFFYmlCLElBQUFBLFdBQVcsRUFBRTtBQUZBLEdBQVQsQ0FBTjtBQUlELENBbkJEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgYXBpIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2NvcmUnO1xuXG5pbXBvcnQgZnMgZnJvbSAnZnMnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgcHJvZ3JhbSBmcm9tICdjb21tYW5kZXInO1xuXG5pbXBvcnQgJy4vdXRpbC90ZXJtaW5hdGUnO1xuXG4oYXN5bmMgKCkgPT4ge1xuICBsZXQgZGlyID0gcHJvY2Vzcy5jd2QoKTtcbiAgcHJvZ3JhbVxuICAgIC52ZXJzaW9uKHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb24pXG4gICAgLmFyZ3VtZW50cygnW2N3ZF0nKVxuICAgIC5hY3Rpb24oKGN3ZCkgPT4ge1xuICAgICAgaWYgKCFjd2QpIHJldHVybjtcbiAgICAgIGlmIChwYXRoLmlzQWJzb2x1dGUoY3dkKSAmJiBmcy5leGlzdHNTeW5jKGN3ZCkpIHtcbiAgICAgICAgZGlyID0gY3dkO1xuICAgICAgfSBlbHNlIGlmIChmcy5leGlzdHNTeW5jKHBhdGgucmVzb2x2ZShkaXIsIGN3ZCkpKSB7XG4gICAgICAgIGRpciA9IHBhdGgucmVzb2x2ZShkaXIsIGN3ZCk7XG4gICAgICB9XG4gICAgfSlcbiAgICAucGFyc2UocHJvY2Vzcy5hcmd2KTtcblxuICBhd2FpdCBhcGkubGludCh7XG4gICAgZGlyLFxuICAgIGludGVyYWN0aXZlOiB0cnVlLFxuICB9KTtcbn0pKCk7XG4iXX0=