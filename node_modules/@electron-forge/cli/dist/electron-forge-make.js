"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getMakeOptions = void 0;

require("source-map-support/register");

var _core = require("@electron-forge/core");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _commander = _interopRequireDefault(require("commander"));

require("./util/terminate");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

// eslint-disable-next-line import/prefer-default-export
const getMakeOptions = () => {
  let dir = process.cwd();

  _commander.default.version(require('../package.json').version).arguments('[cwd]').option('--skip-package', 'Assume the app is already packaged').option('-a, --arch [arch]', 'Target architecture').option('-p, --platform [platform]', 'Target build platform').option('--targets [targets]', 'Override your make targets for this run').allowUnknownOption(true).action(cwd => {
    if (!cwd) return;

    if (_path.default.isAbsolute(cwd) && _fsExtra.default.existsSync(cwd)) {
      dir = cwd;
    } else if (_fsExtra.default.existsSync(_path.default.resolve(dir, cwd))) {
      dir = _path.default.resolve(dir, cwd);
    }
  }).parse(process.argv);

  const makeOpts = {
    dir,
    interactive: true,
    skipPackage: _commander.default.skipPackage
  };
  if (_commander.default.targets) makeOpts.overrideTargets = _commander.default.targets.split(',');
  if (_commander.default.arch) makeOpts.arch = _commander.default.arch;
  if (_commander.default.platform) makeOpts.platform = _commander.default.platform;
  return makeOpts;
};

exports.getMakeOptions = getMakeOptions;

if (process.mainModule === module || global.__LINKED_FORGE__) {
  _asyncToGenerator(function* () {
    const makeOpts = getMakeOptions();
    yield _core.api.make(makeOpts);
  })();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9lbGVjdHJvbi1mb3JnZS1tYWtlLnRzIl0sIm5hbWVzIjpbImdldE1ha2VPcHRpb25zIiwiZGlyIiwicHJvY2VzcyIsImN3ZCIsInByb2dyYW0iLCJ2ZXJzaW9uIiwicmVxdWlyZSIsImFyZ3VtZW50cyIsIm9wdGlvbiIsImFsbG93VW5rbm93bk9wdGlvbiIsImFjdGlvbiIsInBhdGgiLCJpc0Fic29sdXRlIiwiZnMiLCJleGlzdHNTeW5jIiwicmVzb2x2ZSIsInBhcnNlIiwiYXJndiIsIm1ha2VPcHRzIiwiaW50ZXJhY3RpdmUiLCJza2lwUGFja2FnZSIsInRhcmdldHMiLCJvdmVycmlkZVRhcmdldHMiLCJzcGxpdCIsImFyY2giLCJwbGF0Zm9ybSIsIm1haW5Nb2R1bGUiLCJtb2R1bGUiLCJnbG9iYWwiLCJfX0xJTktFRF9GT1JHRV9fIiwiYXBpIiwibWFrZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBRUE7O0FBQ0E7O0FBQ0E7O0FBRUE7Ozs7Ozs7O0FBRUE7QUFDTyxNQUFNQSxjQUFjLEdBQUcsTUFBTTtBQUNsQyxNQUFJQyxHQUFHLEdBQUdDLE9BQU8sQ0FBQ0MsR0FBUixFQUFWOztBQUNBQyxxQkFDR0MsT0FESCxDQUNXQyxPQUFPLENBQUMsaUJBQUQsQ0FBUCxDQUEyQkQsT0FEdEMsRUFFR0UsU0FGSCxDQUVhLE9BRmIsRUFHR0MsTUFISCxDQUdVLGdCQUhWLEVBRzRCLG9DQUg1QixFQUlHQSxNQUpILENBSVUsbUJBSlYsRUFJK0IscUJBSi9CLEVBS0dBLE1BTEgsQ0FLVSwyQkFMVixFQUt1Qyx1QkFMdkMsRUFNR0EsTUFOSCxDQU1VLHFCQU5WLEVBTWlDLHlDQU5qQyxFQU9HQyxrQkFQSCxDQU9zQixJQVB0QixFQVFHQyxNQVJILENBUVdQLEdBQUQsSUFBUztBQUNmLFFBQUksQ0FBQ0EsR0FBTCxFQUFVOztBQUNWLFFBQUlRLGNBQUtDLFVBQUwsQ0FBZ0JULEdBQWhCLEtBQXdCVSxpQkFBR0MsVUFBSCxDQUFjWCxHQUFkLENBQTVCLEVBQWdEO0FBQzlDRixNQUFBQSxHQUFHLEdBQUdFLEdBQU47QUFDRCxLQUZELE1BRU8sSUFBSVUsaUJBQUdDLFVBQUgsQ0FBY0gsY0FBS0ksT0FBTCxDQUFhZCxHQUFiLEVBQWtCRSxHQUFsQixDQUFkLENBQUosRUFBMkM7QUFDaERGLE1BQUFBLEdBQUcsR0FBR1UsY0FBS0ksT0FBTCxDQUFhZCxHQUFiLEVBQWtCRSxHQUFsQixDQUFOO0FBQ0Q7QUFDRixHQWZILEVBZ0JHYSxLQWhCSCxDQWdCU2QsT0FBTyxDQUFDZSxJQWhCakI7O0FBa0JBLFFBQU1DLFFBQXFCLEdBQUc7QUFDNUJqQixJQUFBQSxHQUQ0QjtBQUU1QmtCLElBQUFBLFdBQVcsRUFBRSxJQUZlO0FBRzVCQyxJQUFBQSxXQUFXLEVBQUVoQixtQkFBUWdCO0FBSE8sR0FBOUI7QUFLQSxNQUFJaEIsbUJBQVFpQixPQUFaLEVBQXFCSCxRQUFRLENBQUNJLGVBQVQsR0FBMkJsQixtQkFBUWlCLE9BQVIsQ0FBZ0JFLEtBQWhCLENBQXNCLEdBQXRCLENBQTNCO0FBQ3JCLE1BQUluQixtQkFBUW9CLElBQVosRUFBa0JOLFFBQVEsQ0FBQ00sSUFBVCxHQUFnQnBCLG1CQUFRb0IsSUFBeEI7QUFDbEIsTUFBSXBCLG1CQUFRcUIsUUFBWixFQUFzQlAsUUFBUSxDQUFDTyxRQUFULEdBQW9CckIsbUJBQVFxQixRQUE1QjtBQUV0QixTQUFPUCxRQUFQO0FBQ0QsQ0E5Qk07Ozs7QUFnQ1AsSUFBSWhCLE9BQU8sQ0FBQ3dCLFVBQVIsS0FBdUJDLE1BQXZCLElBQWtDQyxNQUFELENBQWdCQyxnQkFBckQsRUFBdUU7QUFDckUsb0JBQUMsYUFBWTtBQUNYLFVBQU1YLFFBQVEsR0FBR2xCLGNBQWMsRUFBL0I7QUFFQSxVQUFNOEIsVUFBSUMsSUFBSixDQUFTYixRQUFULENBQU47QUFDRCxHQUpEO0FBS0QiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhcGksIE1ha2VPcHRpb25zIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2NvcmUnO1xuXG5pbXBvcnQgZnMgZnJvbSAnZnMtZXh0cmEnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgcHJvZ3JhbSBmcm9tICdjb21tYW5kZXInO1xuXG5pbXBvcnQgJy4vdXRpbC90ZXJtaW5hdGUnO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgaW1wb3J0L3ByZWZlci1kZWZhdWx0LWV4cG9ydFxuZXhwb3J0IGNvbnN0IGdldE1ha2VPcHRpb25zID0gKCkgPT4ge1xuICBsZXQgZGlyID0gcHJvY2Vzcy5jd2QoKTtcbiAgcHJvZ3JhbVxuICAgIC52ZXJzaW9uKHJlcXVpcmUoJy4uL3BhY2thZ2UuanNvbicpLnZlcnNpb24pXG4gICAgLmFyZ3VtZW50cygnW2N3ZF0nKVxuICAgIC5vcHRpb24oJy0tc2tpcC1wYWNrYWdlJywgJ0Fzc3VtZSB0aGUgYXBwIGlzIGFscmVhZHkgcGFja2FnZWQnKVxuICAgIC5vcHRpb24oJy1hLCAtLWFyY2ggW2FyY2hdJywgJ1RhcmdldCBhcmNoaXRlY3R1cmUnKVxuICAgIC5vcHRpb24oJy1wLCAtLXBsYXRmb3JtIFtwbGF0Zm9ybV0nLCAnVGFyZ2V0IGJ1aWxkIHBsYXRmb3JtJylcbiAgICAub3B0aW9uKCctLXRhcmdldHMgW3RhcmdldHNdJywgJ092ZXJyaWRlIHlvdXIgbWFrZSB0YXJnZXRzIGZvciB0aGlzIHJ1bicpXG4gICAgLmFsbG93VW5rbm93bk9wdGlvbih0cnVlKVxuICAgIC5hY3Rpb24oKGN3ZCkgPT4ge1xuICAgICAgaWYgKCFjd2QpIHJldHVybjtcbiAgICAgIGlmIChwYXRoLmlzQWJzb2x1dGUoY3dkKSAmJiBmcy5leGlzdHNTeW5jKGN3ZCkpIHtcbiAgICAgICAgZGlyID0gY3dkO1xuICAgICAgfSBlbHNlIGlmIChmcy5leGlzdHNTeW5jKHBhdGgucmVzb2x2ZShkaXIsIGN3ZCkpKSB7XG4gICAgICAgIGRpciA9IHBhdGgucmVzb2x2ZShkaXIsIGN3ZCk7XG4gICAgICB9XG4gICAgfSlcbiAgICAucGFyc2UocHJvY2Vzcy5hcmd2KTtcblxuICBjb25zdCBtYWtlT3B0czogTWFrZU9wdGlvbnMgPSB7XG4gICAgZGlyLFxuICAgIGludGVyYWN0aXZlOiB0cnVlLFxuICAgIHNraXBQYWNrYWdlOiBwcm9ncmFtLnNraXBQYWNrYWdlLFxuICB9O1xuICBpZiAocHJvZ3JhbS50YXJnZXRzKSBtYWtlT3B0cy5vdmVycmlkZVRhcmdldHMgPSBwcm9ncmFtLnRhcmdldHMuc3BsaXQoJywnKTtcbiAgaWYgKHByb2dyYW0uYXJjaCkgbWFrZU9wdHMuYXJjaCA9IHByb2dyYW0uYXJjaDtcbiAgaWYgKHByb2dyYW0ucGxhdGZvcm0pIG1ha2VPcHRzLnBsYXRmb3JtID0gcHJvZ3JhbS5wbGF0Zm9ybTtcblxuICByZXR1cm4gbWFrZU9wdHM7XG59O1xuXG5pZiAocHJvY2Vzcy5tYWluTW9kdWxlID09PSBtb2R1bGUgfHwgKGdsb2JhbCBhcyBhbnkpLl9fTElOS0VEX0ZPUkdFX18pIHtcbiAgKGFzeW5jICgpID0+IHtcbiAgICBjb25zdCBtYWtlT3B0cyA9IGdldE1ha2VPcHRpb25zKCk7XG5cbiAgICBhd2FpdCBhcGkubWFrZShtYWtlT3B0cyk7XG4gIH0pKCk7XG59XG4iXX0=