"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class Publisher {
  /* tslint:disable variable-name */

  /* tslint:enable variable-name */
  constructor(config, providedPlatforms) {
    this.config = config;
    this.providedPlatforms = providedPlatforms;

    _defineProperty(this, "name", void 0);

    _defineProperty(this, "defaultPlatforms", void 0);

    _defineProperty(this, "__isElectronForgePublisher", void 0);

    this.config = config;
    Object.defineProperty(this, '__isElectronForgePublisher', {
      value: true,
      enumerable: false,
      configurable: false
    });
  }

  get platforms() {
    if (this.providedPlatforms) return this.providedPlatforms;
    if (this.defaultPlatforms) return this.defaultPlatforms;
    return ['win32', 'linux', 'darwin', 'mas'];
  }
  /**
   * Publishers must implement this method to publish the artifacts returned from
   * make calls.  If any errors occur you must throw them, failing silently or simply
   * logging will not propagate issues up to forge.
   *
   * Please note for a given version publish will be called multiple times, once
   * for each set of "platform" and "arch".  This means if you are publishing
   * darwin and win32 artifacts to somewhere like GitHub on the first publish call
   * you will have to create the version on GitHub and the second call will just
   * be appending files to the existing version.
   */


  publish(opts) {
    var _this = this;

    return _asyncToGenerator(function* () {
      throw new Error(`Publisher ${_this.name} did not implement the publish method`);
    })();
  }

}

exports.default = Publisher;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL3NyYy9QdWJsaXNoZXIudHMiXSwibmFtZXMiOlsiUHVibGlzaGVyIiwiY29uc3RydWN0b3IiLCJjb25maWciLCJwcm92aWRlZFBsYXRmb3JtcyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwicGxhdGZvcm1zIiwiZGVmYXVsdFBsYXRmb3JtcyIsInB1Ymxpc2giLCJvcHRzIiwiRXJyb3IiLCJuYW1lIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFxQmUsTUFBZUEsU0FBZixDQUF1RDtBQUdwRTs7QUFFQTtBQUVBQyxFQUFBQSxXQUFXLENBQVFDLE1BQVIsRUFBNkJDLGlCQUE3QixFQUFrRTtBQUFBO0FBQUE7O0FBQUE7O0FBQUE7O0FBQUE7O0FBQzNFLFNBQUtELE1BQUwsR0FBY0EsTUFBZDtBQUNBRSxJQUFBQSxNQUFNLENBQUNDLGNBQVAsQ0FBc0IsSUFBdEIsRUFBNEIsNEJBQTVCLEVBQTBEO0FBQ3hEQyxNQUFBQSxLQUFLLEVBQUUsSUFEaUQ7QUFFeERDLE1BQUFBLFVBQVUsRUFBRSxLQUY0QztBQUd4REMsTUFBQUEsWUFBWSxFQUFFO0FBSDBDLEtBQTFEO0FBS0Q7O0FBRUQsTUFBSUMsU0FBSixHQUFnQjtBQUNkLFFBQUksS0FBS04saUJBQVQsRUFBNEIsT0FBTyxLQUFLQSxpQkFBWjtBQUM1QixRQUFJLEtBQUtPLGdCQUFULEVBQTJCLE9BQU8sS0FBS0EsZ0JBQVo7QUFDM0IsV0FBTyxDQUFDLE9BQUQsRUFBVSxPQUFWLEVBQW1CLFFBQW5CLEVBQTZCLEtBQTdCLENBQVA7QUFDRDtBQUVEOzs7Ozs7Ozs7Ozs7O0FBV01DLEVBQUFBLE9BQU4sQ0FBY0MsSUFBZCxFQUFzQztBQUFBOztBQUFBO0FBQ3BDLFlBQU0sSUFBSUMsS0FBSixDQUFXLGFBQVksS0FBSSxDQUFDQyxJQUFLLHVDQUFqQyxDQUFOO0FBRG9DO0FBRXJDOztBQW5DbUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGb3JnZVBsYXRmb3JtLCBGb3JnZUNvbmZpZywgRm9yZ2VNYWtlUmVzdWx0LCBJRm9yZ2VQdWJsaXNoZXIgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcblxuLyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblxuZXhwb3J0IGludGVyZmFjZSBQdWJsaXNoZXJPcHRpb25zIHtcbiAgLyoqXG4gICAqIFRoZSBiYXNlIGRpcmVjdG9yeSBvZiB0aGUgYXBwcyBzb3VyY2UgY29kZVxuICAgKi9cbiAgZGlyOiBzdHJpbmc7XG4gIC8qKlxuICAgKiBUaGUgcmVzdWx0cyBmcm9tIHJ1bm5pbmcgdGhlIG1ha2UgY29tbWFuZFxuICAgKi9cbiAgbWFrZVJlc3VsdHM6IEZvcmdlTWFrZVJlc3VsdFtdO1xuICAvKipcbiAgICogVGhlIHJhdyBmb3JnZUNvbmZpZyB0aGlzIGFwcCBpcyB1c2luZy5cbiAgICpcbiAgICogWW91IHByb2JhYmx5IHNob3VsZG4ndCB1c2UgdGhpc1xuICAgKi9cbiAgZm9yZ2VDb25maWc6IEZvcmdlQ29uZmlnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhYnN0cmFjdCBjbGFzcyBQdWJsaXNoZXI8Qz4gaW1wbGVtZW50cyBJRm9yZ2VQdWJsaXNoZXIge1xuICBwdWJsaWMgYWJzdHJhY3QgbmFtZTogc3RyaW5nO1xuICBwdWJsaWMgZGVmYXVsdFBsYXRmb3Jtcz86IEZvcmdlUGxhdGZvcm1bXTtcbiAgLyogdHNsaW50OmRpc2FibGUgdmFyaWFibGUtbmFtZSAqL1xuICBfX2lzRWxlY3Ryb25Gb3JnZVB1Ymxpc2hlciE6IHRydWU7XG4gIC8qIHRzbGludDplbmFibGUgdmFyaWFibGUtbmFtZSAqL1xuXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBjb25maWc6IEMsIHByb3RlY3RlZCBwcm92aWRlZFBsYXRmb3Jtcz86IEZvcmdlUGxhdGZvcm1bXSkge1xuICAgIHRoaXMuY29uZmlnID0gY29uZmlnO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnX19pc0VsZWN0cm9uRm9yZ2VQdWJsaXNoZXInLCB7XG4gICAgICB2YWx1ZTogdHJ1ZSxcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgY29uZmlndXJhYmxlOiBmYWxzZSxcbiAgICB9KTtcbiAgfVxuXG4gIGdldCBwbGF0Zm9ybXMoKSB7XG4gICAgaWYgKHRoaXMucHJvdmlkZWRQbGF0Zm9ybXMpIHJldHVybiB0aGlzLnByb3ZpZGVkUGxhdGZvcm1zO1xuICAgIGlmICh0aGlzLmRlZmF1bHRQbGF0Zm9ybXMpIHJldHVybiB0aGlzLmRlZmF1bHRQbGF0Zm9ybXM7XG4gICAgcmV0dXJuIFsnd2luMzInLCAnbGludXgnLCAnZGFyd2luJywgJ21hcyddIGFzIEZvcmdlUGxhdGZvcm1bXTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQdWJsaXNoZXJzIG11c3QgaW1wbGVtZW50IHRoaXMgbWV0aG9kIHRvIHB1Ymxpc2ggdGhlIGFydGlmYWN0cyByZXR1cm5lZCBmcm9tXG4gICAqIG1ha2UgY2FsbHMuICBJZiBhbnkgZXJyb3JzIG9jY3VyIHlvdSBtdXN0IHRocm93IHRoZW0sIGZhaWxpbmcgc2lsZW50bHkgb3Igc2ltcGx5XG4gICAqIGxvZ2dpbmcgd2lsbCBub3QgcHJvcGFnYXRlIGlzc3VlcyB1cCB0byBmb3JnZS5cbiAgICpcbiAgICogUGxlYXNlIG5vdGUgZm9yIGEgZ2l2ZW4gdmVyc2lvbiBwdWJsaXNoIHdpbGwgYmUgY2FsbGVkIG11bHRpcGxlIHRpbWVzLCBvbmNlXG4gICAqIGZvciBlYWNoIHNldCBvZiBcInBsYXRmb3JtXCIgYW5kIFwiYXJjaFwiLiAgVGhpcyBtZWFucyBpZiB5b3UgYXJlIHB1Ymxpc2hpbmdcbiAgICogZGFyd2luIGFuZCB3aW4zMiBhcnRpZmFjdHMgdG8gc29tZXdoZXJlIGxpa2UgR2l0SHViIG9uIHRoZSBmaXJzdCBwdWJsaXNoIGNhbGxcbiAgICogeW91IHdpbGwgaGF2ZSB0byBjcmVhdGUgdGhlIHZlcnNpb24gb24gR2l0SHViIGFuZCB0aGUgc2Vjb25kIGNhbGwgd2lsbCBqdXN0XG4gICAqIGJlIGFwcGVuZGluZyBmaWxlcyB0byB0aGUgZXhpc3RpbmcgdmVyc2lvbi5cbiAgICovXG4gIGFzeW5jIHB1Ymxpc2gob3B0czogUHVibGlzaGVyT3B0aW9ucykge1xuICAgIHRocm93IG5ldyBFcnJvcihgUHVibGlzaGVyICR7dGhpcy5uYW1lfSBkaWQgbm90IGltcGxlbWVudCB0aGUgcHVibGlzaCBtZXRob2RgKTtcbiAgfVxufVxuIl19