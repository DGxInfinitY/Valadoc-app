"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = upgradeForgeConfig;
exports.updateUpgradedForgeDevDeps = updateUpgradedForgeDevDeps;

require("source-map-support/register");

var _path = _interopRequireDefault(require("path"));

var _initNpm = require("../api/init-scripts/init-npm");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function mapMakeTargets(forge5Config) {
  const makeTargets = new Map();

  if (forge5Config.makeTargets) {
    // TODO: Use object.entries when dropping Node 6
    for (const platform in forge5Config.makeTargets) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = forge5Config.makeTargets[platform][Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          const target = _step.value;
          let platforms = makeTargets.get(target);

          if (platforms === undefined) {
            platforms = [];
            makeTargets.set(target, platforms);
          }

          platforms.push(platform);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  }

  return makeTargets;
}

const forge5MakerMappings = new Map([['electronInstallerDebian', 'deb'], ['electronInstallerDMG', 'dmg'], ['electronInstallerFlatpak', 'flatpak'], ['electronInstallerRedhat', 'rpm'], ['electronInstallerSnap', 'snap'], ['electronWinstallerConfig', 'squirrel'], ['electronWixMSIConfig', 'wix'], ['windowsStoreConfig', 'appx']]);
/**
 * Converts Forge v5 maker config to v6.
 */

function generateForgeMakerConfig(forge5Config) {
  const makeTargets = mapMakeTargets(forge5Config);
  const makers = [];
  var _iteratorNormalCompletion2 = true;
  var _didIteratorError2 = false;
  var _iteratorError2 = undefined;

  try {
    for (var _iterator2 = forge5MakerMappings[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
      const _step2$value = _slicedToArray(_step2.value, 2),
            forge5Key = _step2$value[0],
            makerType = _step2$value[1];

      const config = forge5Config[forge5Key];

      if (config) {
        makers.push({
          name: `@electron-forge/maker-${makerType}`,
          config: forge5Config[forge5Key],
          platforms: makeTargets.get(makerType) || null
        });
      }
    }
  } catch (err) {
    _didIteratorError2 = true;
    _iteratorError2 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
        _iterator2.return();
      }
    } finally {
      if (_didIteratorError2) {
        throw _iteratorError2;
      }
    }
  }

  const zipPlatforms = makeTargets.get('zip');

  if (zipPlatforms) {
    makers.push({
      name: '@electron-forge/maker-zip',
      platforms: zipPlatforms
    });
  }

  return makers;
}

const forge5PublisherMappings = new Map([['github_repository', 'github'], ['s3', 's3'], ['electron-release-server', 'electron-release-server'], ['snapStore', 'snapcraft']]);
/**
 * Converts Forge v5 publisher config to v6.
 */

function generateForgePublisherConfig(forge5Config) {
  const publishers = [];
  var _iteratorNormalCompletion3 = true;
  var _didIteratorError3 = false;
  var _iteratorError3 = undefined;

  try {
    for (var _iterator3 = forge5PublisherMappings[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
      const _step3$value = _slicedToArray(_step3.value, 2),
            forge5Key = _step3$value[0],
            publisherType = _step3$value[1];

      let config = forge5Config[forge5Key];

      if (config) {
        if (publisherType === 'github') {
          config = transformGitHubPublisherConfig(config);
        }

        publishers.push({
          config,
          name: `@electron-forge/publisher-${publisherType}`,
          platforms: null
        });
      }
    }
  } catch (err) {
    _didIteratorError3 = true;
    _iteratorError3 = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
        _iterator3.return();
      }
    } finally {
      if (_didIteratorError3) {
        throw _iteratorError3;
      }
    }
  }

  return publishers;
}
/**
 * Transforms v5 GitHub publisher config to v6 syntax.
 */


function transformGitHubPublisherConfig(config) {
  const name = config.name,
        owner = config.owner,
        options = config.options,
        gitHubConfig = _objectWithoutProperties(config, ["name", "owner", "options"]);

  gitHubConfig.repository = {
    name,
    owner
  };

  if (options) {
    gitHubConfig.octokitOptions = options;
  }

  return gitHubConfig;
}
/**
 * Upgrades Forge v5 config to v6.
 */


function upgradeForgeConfig(forge5Config) {
  const forgeConfig = {};

  if (forge5Config.electronPackagerConfig) {
    delete forge5Config.electronPackagerConfig.packageManager;
    forgeConfig.packagerConfig = forge5Config.electronPackagerConfig;
  }

  if (forge5Config.electronRebuildConfig) {
    forgeConfig.electronRebuildConfig = forge5Config.electronRebuildConfig;
  }

  forgeConfig.makers = generateForgeMakerConfig(forge5Config);
  forgeConfig.publishers = generateForgePublisherConfig(forge5Config);
  return forgeConfig;
}

function updateUpgradedForgeDevDeps(packageJSON, devDeps) {
  const forgeConfig = packageJSON.config.forge;
  devDeps = devDeps.filter(dep => !dep.startsWith('@electron-forge/maker-'));
  devDeps = devDeps.concat(forgeConfig.makers.map(maker => (0, _initNpm.siblingDep)(_path.default.basename(maker.name))));
  devDeps = devDeps.concat(forgeConfig.publishers.map(publisher => (0, _initNpm.siblingDep)(_path.default.basename(publisher.name))));

  if (Object.keys(packageJSON.devDependencies).find(dep => dep === 'electron-prebuilt-compile')) {
    devDeps = devDeps.concat((0, _initNpm.siblingDep)('plugin-compile'));
  }

  return devDeps;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,