"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setInitialForgeConfig = setInitialForgeConfig;
exports.fromBuildIdentifier = fromBuildIdentifier;
exports.default = void 0;

require("source-map-support/register");

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _lodash = _interopRequireDefault(require("lodash.template"));

var _readPackageJson = require("./read-package-json");

var _pluginInterface = _interopRequireDefault(require("./plugin-interface"));

var _hook = require("./hook");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const underscoreCase = str => str.replace(/(.)([A-Z][a-z]+)/g, '$1_$2').replace(/([a-z0-9])([A-Z])/g, '$1_$2').toUpperCase();

const proxify = (buildIdentifier, object, envPrefix) => {
  let newObject = {};

  if (Array.isArray(object)) {
    newObject = [];
  }

  Object.keys(object).forEach(key => {
    const val = object[key];

    if (typeof val === 'object' && key !== 'pluginInterface' && !(val instanceof RegExp)) {
      newObject[key] = proxify(buildIdentifier, object[key], `${envPrefix}_${underscoreCase(key)}`);
    } else {
      newObject[key] = object[key];
    }
  });
  return new Proxy(newObject, {
    get(target, name, receiver) {
      // eslint-disable-next-line no-prototype-builtins
      if (!target.hasOwnProperty(name) && typeof name === 'string') {
        const envValue = process.env[`${envPrefix}_${underscoreCase(name)}`];
        if (envValue) return envValue;
      }

      const value = Reflect.get(target, name, receiver);

      if (value && typeof value === 'object' && value.__isMagicBuildIdentifierMap) {
        const identifier = typeof buildIdentifier === 'function' ? buildIdentifier() : buildIdentifier;
        return value.map[identifier];
      }

      return value;
    },

    getOwnPropertyDescriptor(target, name) {
      const envValue = process.env[`${envPrefix}_${underscoreCase(name)}`]; // eslint-disable-next-line no-prototype-builtins

      if (target.hasOwnProperty(name)) {
        return Reflect.getOwnPropertyDescriptor(target, name);
      }

      if (envValue) {
        return {
          writable: true,
          enumerable: true,
          configurable: true,
          value: envValue
        };
      }
    }

  });
};
/**
 * Sets sensible defaults for the `config.forge` object.
 */


function setInitialForgeConfig(packageJSON) {
  const _packageJSON$name = packageJSON.name,
        name = _packageJSON$name === void 0 ? '' : _packageJSON$name;
  /* eslint-disable no-param-reassign */

  packageJSON.config.forge.makers[0].config.name = name.replace(/-/g, '_');
  /* eslint-enable no-param-reassign */
}

function fromBuildIdentifier(map) {
  return {
    map,
    __isMagicBuildIdentifierMap: true
  };
}

var _default =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* (dir) {
    const packageJSON = yield (0, _readPackageJson.readRawPackageJson)(dir);
    let forgeConfig = packageJSON.config && packageJSON.config.forge ? packageJSON.config.forge : null;

    if (!forgeConfig) {
      if (yield _fsExtra.default.pathExists(_path.default.resolve(dir, 'forge.config.js'))) {
        forgeConfig = 'forge.config.js';
      } else {
        forgeConfig = {};
      }
    }

    if (typeof forgeConfig === 'string' && ((yield _fsExtra.default.pathExists(_path.default.resolve(dir, forgeConfig))) || (yield _fsExtra.default.pathExists(_path.default.resolve(dir, `${forgeConfig}.js`))))) {
      try {
        forgeConfig = require(_path.default.resolve(dir, forgeConfig));
      } catch (err) {
        console.error(`Failed to load: ${_path.default.resolve(dir, forgeConfig)}`);
        throw err;
      }
    } else if (typeof forgeConfig !== 'object') {
      throw new Error('Expected packageJSON.config.forge to be an object or point to a requirable JS file');
    }

    forgeConfig = Object.assign({
      packagerConfig: {},
      rebuildConfig: {},
      makers: [],
      publishers: [],
      plugins: []
    }, forgeConfig);
    const templateObj = Object.assign({}, packageJSON, {
      year: new Date().getFullYear()
    });

    const template = obj => {
      Object.keys(obj).forEach(objKey => {
        if (typeof obj[objKey] === 'object' && obj !== null) {
          template(obj[objKey]);
        } else if (typeof obj[objKey] === 'string') {
          obj[objKey] = (0, _lodash.default)(obj[objKey])(templateObj); // eslint-disable-line

          if (obj[objKey].startsWith('require:')) {
            obj[objKey] = require(_path.default.resolve(dir, obj[objKey].substr(8))); // eslint-disable-line
          }
        }
      });
    };

    template(forgeConfig);
    forgeConfig.pluginInterface = new _pluginInterface.default(dir, forgeConfig);
    forgeConfig = yield (0, _hook.runMutatingHook)(forgeConfig, 'resolveForgeConfig', forgeConfig);
    return proxify(forgeConfig.buildIdentifier || '', forgeConfig, 'ELECTRON_FORGE');
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,