"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.DepVersionRestriction = exports.DepType = void 0;

require("source-map-support/register");

var _debug = _interopRequireDefault(require("debug"));

var _yarnOrNpm = require("./yarn-or-npm");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const d = (0, _debug.default)('electron-forge:dependency-installer');
let DepType;
exports.DepType = DepType;

(function (DepType) {
  DepType["PROD"] = "PROD";
  DepType["DEV"] = "DEV";
})(DepType || (exports.DepType = DepType = {}));

let DepVersionRestriction;
exports.DepVersionRestriction = DepVersionRestriction;

(function (DepVersionRestriction) {
  DepVersionRestriction["EXACT"] = "EXACT";
  DepVersionRestriction["RANGE"] = "RANGE";
})(DepVersionRestriction || (exports.DepVersionRestriction = DepVersionRestriction = {}));

var _default =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* (dir, deps, depType = DepType.PROD, versionRestriction = DepVersionRestriction.RANGE) {
    d('installing', JSON.stringify(deps), 'in:', dir, `depType=${depType},versionRestriction=${versionRestriction},withYarn=${(0, _yarnOrNpm.hasYarn)()}`);

    if (deps.length === 0) {
      d('nothing to install, stopping immediately');
      return Promise.resolve();
    }

    let cmd = ['install'].concat(deps);

    if ((0, _yarnOrNpm.hasYarn)()) {
      cmd = ['add'].concat(deps);
      if (depType === DepType.DEV) cmd.push('--dev');
      if (versionRestriction === DepVersionRestriction.EXACT) cmd.push('--exact');
    } else {
      if (versionRestriction === DepVersionRestriction.EXACT) cmd.push('--save-exact');
      if (depType === DepType.DEV) cmd.push('--save-dev');
      if (depType === DepType.PROD) cmd.push('--save');
    }

    d('executing', JSON.stringify(cmd), 'in:', dir);

    try {
      yield (0, _yarnOrNpm.yarnOrNpmSpawn)(cmd, {
        cwd: dir,
        stdio: 'pipe'
      });
    } catch (err) {
      throw new Error(`Failed to install modules: ${JSON.stringify(deps)}\n\nWith output: ${err.message}\n${err.stderr.toString()}`);
    }
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2luc3RhbGwtZGVwZW5kZW5jaWVzLnRzIl0sIm5hbWVzIjpbImQiLCJEZXBUeXBlIiwiRGVwVmVyc2lvblJlc3RyaWN0aW9uIiwiZGlyIiwiZGVwcyIsImRlcFR5cGUiLCJQUk9EIiwidmVyc2lvblJlc3RyaWN0aW9uIiwiUkFOR0UiLCJKU09OIiwic3RyaW5naWZ5IiwibGVuZ3RoIiwiUHJvbWlzZSIsInJlc29sdmUiLCJjbWQiLCJjb25jYXQiLCJERVYiLCJwdXNoIiwiRVhBQ1QiLCJjd2QiLCJzdGRpbyIsImVyciIsIkVycm9yIiwibWVzc2FnZSIsInN0ZGVyciIsInRvU3RyaW5nIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7Ozs7Ozs7QUFFQSxNQUFNQSxDQUFDLEdBQUcsb0JBQU0scUNBQU4sQ0FBVjtJQUVZQyxPOzs7V0FBQUEsTztBQUFBQSxFQUFBQSxPO0FBQUFBLEVBQUFBLE87R0FBQUEsTyx1QkFBQUEsTzs7SUFLQUMscUI7OztXQUFBQSxxQjtBQUFBQSxFQUFBQSxxQjtBQUFBQSxFQUFBQSxxQjtHQUFBQSxxQixxQ0FBQUEscUI7Ozs7OytCQUtHLFdBQ2JDLEdBRGEsRUFFYkMsSUFGYSxFQUdiQyxPQUFPLEdBQUdKLE9BQU8sQ0FBQ0ssSUFITCxFQUliQyxrQkFBa0IsR0FBR0wscUJBQXFCLENBQUNNLEtBSjlCLEVBS1Y7QUFDSFIsSUFBQUEsQ0FBQyxDQUFDLFlBQUQsRUFBZVMsSUFBSSxDQUFDQyxTQUFMLENBQWVOLElBQWYsQ0FBZixFQUFxQyxLQUFyQyxFQUE0Q0QsR0FBNUMsRUFBa0QsV0FBVUUsT0FBUSx1QkFBc0JFLGtCQUFtQixhQUFZLHlCQUFVLEVBQW5JLENBQUQ7O0FBQ0EsUUFBSUgsSUFBSSxDQUFDTyxNQUFMLEtBQWdCLENBQXBCLEVBQXVCO0FBQ3JCWCxNQUFBQSxDQUFDLENBQUMsMENBQUQsQ0FBRDtBQUNBLGFBQU9ZLE9BQU8sQ0FBQ0MsT0FBUixFQUFQO0FBQ0Q7O0FBQ0QsUUFBSUMsR0FBRyxHQUFHLENBQUMsU0FBRCxFQUFZQyxNQUFaLENBQW1CWCxJQUFuQixDQUFWOztBQUNBLFFBQUkseUJBQUosRUFBZTtBQUNiVSxNQUFBQSxHQUFHLEdBQUcsQ0FBQyxLQUFELEVBQVFDLE1BQVIsQ0FBZVgsSUFBZixDQUFOO0FBQ0EsVUFBSUMsT0FBTyxLQUFLSixPQUFPLENBQUNlLEdBQXhCLEVBQTZCRixHQUFHLENBQUNHLElBQUosQ0FBUyxPQUFUO0FBQzdCLFVBQUlWLGtCQUFrQixLQUFLTCxxQkFBcUIsQ0FBQ2dCLEtBQWpELEVBQXdESixHQUFHLENBQUNHLElBQUosQ0FBUyxTQUFUO0FBQ3pELEtBSkQsTUFJTztBQUNMLFVBQUlWLGtCQUFrQixLQUFLTCxxQkFBcUIsQ0FBQ2dCLEtBQWpELEVBQXdESixHQUFHLENBQUNHLElBQUosQ0FBUyxjQUFUO0FBQ3hELFVBQUlaLE9BQU8sS0FBS0osT0FBTyxDQUFDZSxHQUF4QixFQUE2QkYsR0FBRyxDQUFDRyxJQUFKLENBQVMsWUFBVDtBQUM3QixVQUFJWixPQUFPLEtBQUtKLE9BQU8sQ0FBQ0ssSUFBeEIsRUFBOEJRLEdBQUcsQ0FBQ0csSUFBSixDQUFTLFFBQVQ7QUFDL0I7O0FBQ0RqQixJQUFBQSxDQUFDLENBQUMsV0FBRCxFQUFjUyxJQUFJLENBQUNDLFNBQUwsQ0FBZUksR0FBZixDQUFkLEVBQW1DLEtBQW5DLEVBQTBDWCxHQUExQyxDQUFEOztBQUNBLFFBQUk7QUFDRixZQUFNLCtCQUFlVyxHQUFmLEVBQW9CO0FBQ3hCSyxRQUFBQSxHQUFHLEVBQUVoQixHQURtQjtBQUV4QmlCLFFBQUFBLEtBQUssRUFBRTtBQUZpQixPQUFwQixDQUFOO0FBSUQsS0FMRCxDQUtFLE9BQU9DLEdBQVAsRUFBWTtBQUNaLFlBQU0sSUFBSUMsS0FBSixDQUFXLDhCQUE2QmIsSUFBSSxDQUFDQyxTQUFMLENBQWVOLElBQWYsQ0FBcUIsb0JBQW1CaUIsR0FBRyxDQUFDRSxPQUFRLEtBQUlGLEdBQUcsQ0FBQ0csTUFBSixDQUFXQyxRQUFYLEVBQXNCLEVBQXRILENBQU47QUFDRDtBQUNGLEciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IHsgeWFybk9yTnBtU3Bhd24sIGhhc1lhcm4gfSBmcm9tICcuL3lhcm4tb3ItbnBtJztcblxuY29uc3QgZCA9IGRlYnVnKCdlbGVjdHJvbi1mb3JnZTpkZXBlbmRlbmN5LWluc3RhbGxlcicpO1xuXG5leHBvcnQgZW51bSBEZXBUeXBlIHtcbiAgUFJPRCA9ICdQUk9EJyxcbiAgREVWID0gJ0RFVicsXG59XG5cbmV4cG9ydCBlbnVtIERlcFZlcnNpb25SZXN0cmljdGlvbiB7XG4gIEVYQUNUID0gJ0VYQUNUJyxcbiAgUkFOR0UgPSAnUkFOR0UnLFxufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoXG4gIGRpcjogc3RyaW5nLFxuICBkZXBzOiBzdHJpbmdbXSxcbiAgZGVwVHlwZSA9IERlcFR5cGUuUFJPRCxcbiAgdmVyc2lvblJlc3RyaWN0aW9uID0gRGVwVmVyc2lvblJlc3RyaWN0aW9uLlJBTkdFLFxuKSA9PiB7XG4gIGQoJ2luc3RhbGxpbmcnLCBKU09OLnN0cmluZ2lmeShkZXBzKSwgJ2luOicsIGRpciwgYGRlcFR5cGU9JHtkZXBUeXBlfSx2ZXJzaW9uUmVzdHJpY3Rpb249JHt2ZXJzaW9uUmVzdHJpY3Rpb259LHdpdGhZYXJuPSR7aGFzWWFybigpfWApO1xuICBpZiAoZGVwcy5sZW5ndGggPT09IDApIHtcbiAgICBkKCdub3RoaW5nIHRvIGluc3RhbGwsIHN0b3BwaW5nIGltbWVkaWF0ZWx5Jyk7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9XG4gIGxldCBjbWQgPSBbJ2luc3RhbGwnXS5jb25jYXQoZGVwcyk7XG4gIGlmIChoYXNZYXJuKCkpIHtcbiAgICBjbWQgPSBbJ2FkZCddLmNvbmNhdChkZXBzKTtcbiAgICBpZiAoZGVwVHlwZSA9PT0gRGVwVHlwZS5ERVYpIGNtZC5wdXNoKCctLWRldicpO1xuICAgIGlmICh2ZXJzaW9uUmVzdHJpY3Rpb24gPT09IERlcFZlcnNpb25SZXN0cmljdGlvbi5FWEFDVCkgY21kLnB1c2goJy0tZXhhY3QnKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAodmVyc2lvblJlc3RyaWN0aW9uID09PSBEZXBWZXJzaW9uUmVzdHJpY3Rpb24uRVhBQ1QpIGNtZC5wdXNoKCctLXNhdmUtZXhhY3QnKTtcbiAgICBpZiAoZGVwVHlwZSA9PT0gRGVwVHlwZS5ERVYpIGNtZC5wdXNoKCctLXNhdmUtZGV2Jyk7XG4gICAgaWYgKGRlcFR5cGUgPT09IERlcFR5cGUuUFJPRCkgY21kLnB1c2goJy0tc2F2ZScpO1xuICB9XG4gIGQoJ2V4ZWN1dGluZycsIEpTT04uc3RyaW5naWZ5KGNtZCksICdpbjonLCBkaXIpO1xuICB0cnkge1xuICAgIGF3YWl0IHlhcm5Pck5wbVNwYXduKGNtZCwge1xuICAgICAgY3dkOiBkaXIsXG4gICAgICBzdGRpbzogJ3BpcGUnLFxuICAgIH0pO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBpbnN0YWxsIG1vZHVsZXM6ICR7SlNPTi5zdHJpbmdpZnkoZGVwcyl9XFxuXFxuV2l0aCBvdXRwdXQ6ICR7ZXJyLm1lc3NhZ2V9XFxuJHtlcnIuc3RkZXJyLnRvU3RyaW5nKCl9YCk7XG4gIH1cbn07XG4iXX0=