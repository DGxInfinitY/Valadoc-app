"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _pluginBase = _interopRequireDefault(require("@electron-forge/plugin-base"));

var _debug = _interopRequireDefault(require("debug"));

var _requireSearch = _interopRequireDefault(require("./require-search"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const d = (0, _debug.default)('electron-forge:plugins');

class PluginInterface {
  constructor(dir, forgeConfig) {
    _defineProperty(this, "plugins", void 0);

    _defineProperty(this, "config", void 0);

    this.plugins = forgeConfig.plugins.map(plugin => {
      if (plugin.__isElectronForgePlugin) {
        return plugin;
      }

      if (Array.isArray(plugin)) {
        if (typeof plugin[0] !== 'string') {
          throw `Expected plugin[0] to be a string but found ${plugin[0]}`;
        }

        let opts = {};
        if (typeof plugin[1] !== 'undefined') opts = plugin[1];
        const Plugin = (0, _requireSearch.default)(dir, [plugin[0]]);

        if (!Plugin) {
          throw `Could not find module with name: ${plugin[0]}`;
        }

        return new Plugin(opts);
      }

      throw `Expected plugin to either be a plugin instance or [string, object] but found ${plugin}`; // eslint-disable-line
    }); // Fix linting

    this.config = null;
    Object.defineProperty(this, 'config', {
      value: forgeConfig,
      enumerable: false,
      configurable: false,
      writable: false
    });
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = this.plugins[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        const plugin = _step.value;
        plugin.init(dir, forgeConfig);
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    this.triggerHook = this.triggerHook.bind(this);
    this.overrideStartLogic = this.overrideStartLogic.bind(this);
  }

  triggerHook(hookName, hookArgs) {
    var _this = this;

    return _asyncToGenerator(function* () {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = _this.plugins[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          const plugin = _step2.value;

          if (typeof plugin.getHook === 'function') {
            const hook = plugin.getHook(hookName);
            if (hook) yield hook(_this.config, ...hookArgs);
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    })();
  }

  triggerMutatingHook(hookName, item) {
    var _this2 = this;

    return _asyncToGenerator(function* () {
      var _iteratorNormalCompletion3 = true;
      var _didIteratorError3 = false;
      var _iteratorError3 = undefined;

      try {
        for (var _iterator3 = _this2.plugins[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
          const plugin = _step3.value;

          if (typeof plugin.getHook === 'function') {
            const hook = plugin.getHook(hookName);

            if (hook) {
              item = yield hook(_this2.config, item);
            }
          }
        }
      } catch (err) {
        _didIteratorError3 = true;
        _iteratorError3 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
            _iterator3.return();
          }
        } finally {
          if (_didIteratorError3) {
            throw _iteratorError3;
          }
        }
      }

      return item;
    })();
  }

  overrideStartLogic(opts) {
    var _this3 = this;

    return _asyncToGenerator(function* () {
      let newStartFn;
      const claimed = [];
      var _iteratorNormalCompletion4 = true;
      var _didIteratorError4 = false;
      var _iteratorError4 = undefined;

      try {
        for (var _iterator4 = _this3.plugins[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
          const plugin = _step4.value;

          if (typeof plugin.startLogic === 'function' && plugin.startLogic !== _pluginBase.default.prototype.startLogic) {
            claimed.push(plugin.name);
            newStartFn = plugin.startLogic;
          }
        }
      } catch (err) {
        _didIteratorError4 = true;
        _iteratorError4 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
            _iterator4.return();
          }
        } finally {
          if (_didIteratorError4) {
            throw _iteratorError4;
          }
        }
      }

      if (claimed.length > 1) throw `Multiple plugins tried to take control of the start command, please remove one of them\n --> ${claimed.join(', ')}`;

      if (claimed.length === 1 && newStartFn) {
        d(`plugin: "${claimed[0]}" has taken control of the start command`);
        return yield newStartFn(opts);
      }

      return false;
    })();
  }

}

exports.default = PluginInterface;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,