"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.runMutatingHook = runMutatingHook;
exports.runHook = void 0;

require("source-map-support/register");

var _debug = _interopRequireDefault(require("debug"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const d = (0, _debug.default)('electron-forge:hook');

const runHook =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* (forgeConfig, hookName, ...hookArgs) {
    const hooks = forgeConfig.hooks;

    if (hooks) {
      d(`hook triggered: ${hookName}`);

      if (typeof hooks[hookName] === 'function') {
        d('calling hook:', hookName, 'with args:', hookArgs);
        yield hooks[hookName](forgeConfig, ...hookArgs);
      }
    }

    yield forgeConfig.pluginInterface.triggerHook(hookName, hookArgs);
  });

  return function runHook(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.runHook = runHook;

function runMutatingHook(_x3, _x4, _x5) {
  return _runMutatingHook.apply(this, arguments);
}

function _runMutatingHook() {
  _runMutatingHook = _asyncToGenerator(function* (forgeConfig, hookName, item) {
    const hooks = forgeConfig.hooks;

    if (hooks) {
      d(`hook triggered: ${hookName}`);

      if (typeof hooks[hookName] === 'function') {
        d('calling mutating hook:', hookName, 'with item:', item);
        const result = yield hooks[hookName](forgeConfig, item);

        if (typeof result !== 'undefined') {
          item = result;
        }
      }
    }

    return yield forgeConfig.pluginInterface.triggerMutatingHook(hookName, item);
  });
  return _runMutatingHook.apply(this, arguments);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2hvb2sudHMiXSwibmFtZXMiOlsiZCIsInJ1bkhvb2siLCJmb3JnZUNvbmZpZyIsImhvb2tOYW1lIiwiaG9va0FyZ3MiLCJob29rcyIsInBsdWdpbkludGVyZmFjZSIsInRyaWdnZXJIb29rIiwicnVuTXV0YXRpbmdIb29rIiwiaXRlbSIsInJlc3VsdCIsInRyaWdnZXJNdXRhdGluZ0hvb2siXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7QUFDQTs7Ozs7Ozs7QUFFQSxNQUFNQSxDQUFDLEdBQUcsb0JBQU0scUJBQU4sQ0FBVjs7QUFFTyxNQUFNQyxPQUFPO0FBQUE7QUFBQTtBQUFBLCtCQUFHLFdBQU9DLFdBQVAsRUFBaUNDLFFBQWpDLEVBQW1ELEdBQUdDLFFBQXRELEVBQTBFO0FBQy9GLFVBQU1DLEtBQUssR0FBR0gsV0FBVyxDQUFDRyxLQUExQjs7QUFDQSxRQUFJQSxLQUFKLEVBQVc7QUFDVEwsTUFBQUEsQ0FBQyxDQUFFLG1CQUFrQkcsUUFBUyxFQUE3QixDQUFEOztBQUNBLFVBQUksT0FBT0UsS0FBSyxDQUFDRixRQUFELENBQVosS0FBMkIsVUFBL0IsRUFBMkM7QUFDekNILFFBQUFBLENBQUMsQ0FBQyxlQUFELEVBQWtCRyxRQUFsQixFQUE0QixZQUE1QixFQUEwQ0MsUUFBMUMsQ0FBRDtBQUNBLGNBQU1DLEtBQUssQ0FBQ0YsUUFBRCxDQUFMLENBQWdCRCxXQUFoQixFQUE2QixHQUFHRSxRQUFoQyxDQUFOO0FBQ0Q7QUFDRjs7QUFDRCxVQUFNRixXQUFXLENBQUNJLGVBQVosQ0FBNEJDLFdBQTVCLENBQXdDSixRQUF4QyxFQUFrREMsUUFBbEQsQ0FBTjtBQUNELEdBVm1COztBQUFBLGtCQUFQSCxPQUFPO0FBQUE7QUFBQTtBQUFBLEdBQWI7Ozs7U0FZZU8sZTs7Ozs7dUNBQWYsV0FBa0NOLFdBQWxDLEVBQTREQyxRQUE1RCxFQUE4RU0sSUFBOUUsRUFBbUc7QUFDeEcsVUFBTUosS0FBSyxHQUFHSCxXQUFXLENBQUNHLEtBQTFCOztBQUNBLFFBQUlBLEtBQUosRUFBVztBQUNUTCxNQUFBQSxDQUFDLENBQUUsbUJBQWtCRyxRQUFTLEVBQTdCLENBQUQ7O0FBQ0EsVUFBSSxPQUFPRSxLQUFLLENBQUNGLFFBQUQsQ0FBWixLQUEyQixVQUEvQixFQUEyQztBQUN6Q0gsUUFBQUEsQ0FBQyxDQUFDLHdCQUFELEVBQTJCRyxRQUEzQixFQUFxQyxZQUFyQyxFQUFtRE0sSUFBbkQsQ0FBRDtBQUNBLGNBQU1DLE1BQU0sU0FBU0wsS0FBSyxDQUFDRixRQUFELENBQUwsQ0FBZ0JELFdBQWhCLEVBQTZCTyxJQUE3QixDQUFyQjs7QUFDQSxZQUFJLE9BQU9DLE1BQVAsS0FBa0IsV0FBdEIsRUFBbUM7QUFDakNELFVBQUFBLElBQUksR0FBR0MsTUFBUDtBQUNEO0FBQ0Y7QUFDRjs7QUFDRCxpQkFBYVIsV0FBVyxDQUFDSSxlQUFaLENBQTRCSyxtQkFBNUIsQ0FBZ0RSLFFBQWhELEVBQTBETSxJQUExRCxDQUFiO0FBQ0QsRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEZvcmdlQ29uZmlnIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL3NoYXJlZC10eXBlcyc7XG5pbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuXG5jb25zdCBkID0gZGVidWcoJ2VsZWN0cm9uLWZvcmdlOmhvb2snKTtcblxuZXhwb3J0IGNvbnN0IHJ1bkhvb2sgPSBhc3luYyAoZm9yZ2VDb25maWc6IEZvcmdlQ29uZmlnLCBob29rTmFtZTogc3RyaW5nLCAuLi5ob29rQXJnczogYW55W10pID0+IHtcbiAgY29uc3QgaG9va3MgPSBmb3JnZUNvbmZpZy5ob29rcztcbiAgaWYgKGhvb2tzKSB7XG4gICAgZChgaG9vayB0cmlnZ2VyZWQ6ICR7aG9va05hbWV9YCk7XG4gICAgaWYgKHR5cGVvZiBob29rc1tob29rTmFtZV0gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGQoJ2NhbGxpbmcgaG9vazonLCBob29rTmFtZSwgJ3dpdGggYXJnczonLCBob29rQXJncyk7XG4gICAgICBhd2FpdCBob29rc1tob29rTmFtZV0oZm9yZ2VDb25maWcsIC4uLmhvb2tBcmdzKTtcbiAgICB9XG4gIH1cbiAgYXdhaXQgZm9yZ2VDb25maWcucGx1Z2luSW50ZXJmYWNlLnRyaWdnZXJIb29rKGhvb2tOYW1lLCBob29rQXJncyk7XG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gcnVuTXV0YXRpbmdIb29rPFQ+KGZvcmdlQ29uZmlnOiBGb3JnZUNvbmZpZywgaG9va05hbWU6IHN0cmluZywgaXRlbTogVCk6IFByb21pc2U8VD4ge1xuICBjb25zdCBob29rcyA9IGZvcmdlQ29uZmlnLmhvb2tzO1xuICBpZiAoaG9va3MpIHtcbiAgICBkKGBob29rIHRyaWdnZXJlZDogJHtob29rTmFtZX1gKTtcbiAgICBpZiAodHlwZW9mIGhvb2tzW2hvb2tOYW1lXSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgZCgnY2FsbGluZyBtdXRhdGluZyBob29rOicsIGhvb2tOYW1lLCAnd2l0aCBpdGVtOicsIGl0ZW0pO1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgaG9va3NbaG9va05hbWVdKGZvcmdlQ29uZmlnLCBpdGVtKTtcbiAgICAgIGlmICh0eXBlb2YgcmVzdWx0ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBpdGVtID0gcmVzdWx0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gYXdhaXQgZm9yZ2VDb25maWcucGx1Z2luSW50ZXJmYWNlLnRyaWdnZXJNdXRhdGluZ0hvb2soaG9va05hbWUsIGl0ZW0pO1xufVxuIl19