"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.sudo = void 0;

require("source-map-support/register");

var _child_process = require("child_process");

var _pify = _interopRequireDefault(require("pify"));

var _sudoPrompt = _interopRequireDefault(require("sudo-prompt"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const which =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* (type, prog, promise) {
    if ((0, _child_process.spawnSync)('which', [prog]).status === 0) {
      yield promise();
    } else {
      throw new Error(`${prog} is required to install ${type} packages`);
    }
  });

  return function which(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

const sudo = (type, prog, args) => which(type, prog, () => (0, _pify.default)(_sudoPrompt.default.exec)(`${prog} ${args}`, {
  name: 'Electron Forge'
}));

exports.sudo = sudo;
var _default = which;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsL2xpbnV4LWluc3RhbGxlci50cyJdLCJuYW1lcyI6WyJ3aGljaCIsInR5cGUiLCJwcm9nIiwicHJvbWlzZSIsInN0YXR1cyIsIkVycm9yIiwic3VkbyIsImFyZ3MiLCJzdWRvUHJvbXB0IiwiZXhlYyIsIm5hbWUiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOzs7Ozs7OztBQUVBLE1BQU1BLEtBQUs7QUFBQTtBQUFBO0FBQUEsK0JBQUcsV0FBT0MsSUFBUCxFQUFxQkMsSUFBckIsRUFBbUNDLE9BQW5DLEVBQW1FO0FBQy9FLFFBQUksOEJBQVUsT0FBVixFQUFtQixDQUFDRCxJQUFELENBQW5CLEVBQTJCRSxNQUEzQixLQUFzQyxDQUExQyxFQUE2QztBQUMzQyxZQUFNRCxPQUFPLEVBQWI7QUFDRCxLQUZELE1BRU87QUFDTCxZQUFNLElBQUlFLEtBQUosQ0FBVyxHQUFFSCxJQUFLLDJCQUEwQkQsSUFBSyxXQUFqRCxDQUFOO0FBQ0Q7QUFDRixHQU5VOztBQUFBLGtCQUFMRCxLQUFLO0FBQUE7QUFBQTtBQUFBLEdBQVg7O0FBUU8sTUFBTU0sSUFBSSxHQUFHLENBQUNMLElBQUQsRUFBZUMsSUFBZixFQUE2QkssSUFBN0IsS0FDbEJQLEtBQUssQ0FBQ0MsSUFBRCxFQUFPQyxJQUFQLEVBQWEsTUFBTSxtQkFBS00sb0JBQVdDLElBQWhCLEVBQXVCLEdBQUVQLElBQUssSUFBR0ssSUFBSyxFQUF0QyxFQUF5QztBQUFFRyxFQUFBQSxJQUFJLEVBQUU7QUFBUixDQUF6QyxDQUFuQixDQURBOzs7ZUFHUVYsSyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHNwYXduU3luYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IHBpZnkgZnJvbSAncGlmeSc7XG5pbXBvcnQgc3Vkb1Byb21wdCBmcm9tICdzdWRvLXByb21wdCc7XG5cbmNvbnN0IHdoaWNoID0gYXN5bmMgKHR5cGU6IHN0cmluZywgcHJvZzogc3RyaW5nLCBwcm9taXNlOiAoKSA9PiBQcm9taXNlPGFueT4pID0+IHtcbiAgaWYgKHNwYXduU3luYygnd2hpY2gnLCBbcHJvZ10pLnN0YXR1cyA9PT0gMCkge1xuICAgIGF3YWl0IHByb21pc2UoKTtcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYCR7cHJvZ30gaXMgcmVxdWlyZWQgdG8gaW5zdGFsbCAke3R5cGV9IHBhY2thZ2VzYCk7XG4gIH1cbn07XG5cbmV4cG9ydCBjb25zdCBzdWRvID0gKHR5cGU6IHN0cmluZywgcHJvZzogc3RyaW5nLCBhcmdzOiBzdHJpbmcpID0+XG4gIHdoaWNoKHR5cGUsIHByb2csICgpID0+IHBpZnkoc3Vkb1Byb21wdC5leGVjKShgJHtwcm9nfSAke2FyZ3N9YCwgeyBuYW1lOiAnRWxlY3Ryb24gRm9yZ2UnIH0pKTtcblxuZXhwb3J0IGRlZmF1bHQgd2hpY2g7XG4iXX0=