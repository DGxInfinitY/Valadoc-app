"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

require("colors");

var _asyncOra = require("@electron-forge/async-ora");

var _debug = _interopRequireDefault(require("debug"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _glob = _interopRequireDefault(require("glob"));

var _path = _interopRequireDefault(require("path"));

var _pify = _interopRequireDefault(require("pify"));

var _electronPackager = _interopRequireDefault(require("electron-packager"));

var _forgeConfig = _interopRequireDefault(require("../util/forge-config"));

var _hook = require("../util/hook");

var _messages = require("../util/messages");

var _readPackageJson = require("../util/read-package-json");

var _rebuild = _interopRequireDefault(require("../util/rebuild"));

var _requireSearch = _interopRequireDefault(require("../util/require-search"));

var _resolveDir = _interopRequireDefault(require("../util/resolve-dir"));

var _outDir = _interopRequireDefault(require("../util/out-dir"));

var _electronVersion = require("../util/electron-version");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const _require = require('electron-download/lib/arch'),
      hostArch = _require.host;

const d = (0, _debug.default)('electron-forge:packager');

/**
 * Resolves hooks if they are a path to a file (instead of a `Function`).
 */
function resolveHooks(hooks, dir) {
  if (hooks) {
    return hooks.map(hook => typeof hook === 'string' ? (0, _requireSearch.default)(dir, [hook]) : hook);
  }

  return [];
}
/**
 * Runs given hooks sequentially by mapping them to promises and iterating
 * through while awaiting
 */


function sequentialHooks(hooks) {
  return [
  /*#__PURE__*/
  function () {
    var _ref = _asyncToGenerator(function* (...args) {
      const done = args[args.length - 1];
      const passedArgs = args.splice(0, args.length - 1);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = hooks[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          const hook = _step.value;
          yield (0, _pify.default)(hook)(...passedArgs);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      done();
    });

    return function () {
      return _ref.apply(this, arguments);
    };
  }()];
}

var _default =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(function* ({
    dir = process.cwd(),
    interactive = false,
    arch = hostArch(),
    platform = process.platform,
    outDir
  }) {
    const ora = interactive ? _asyncOra.ora : _asyncOra.fakeOra;
    let prepareSpinner = ora(`Preparing to Package Application for arch: ${(arch === 'all' ? 'ia32' : arch).cyan}`).start();
    let prepareCounter = 0;
    const resolvedDir = yield (0, _resolveDir.default)(dir);

    if (!resolvedDir) {
      throw 'Failed to locate compilable Electron application';
    }

    dir = resolvedDir;
    const forgeConfig = yield (0, _forgeConfig.default)(dir);
    const packageJSON = yield (0, _readPackageJson.readMutatedPackageJson)(dir, forgeConfig);

    if (!packageJSON.main) {
      throw 'packageJSON.main must be set to a valid entry point for your Electron app';
    }

    const calculatedOutDir = outDir || (0, _outDir.default)(dir, forgeConfig);
    let packagerSpinner = null;
    const pruneEnabled = !('prune' in forgeConfig.packagerConfig) || forgeConfig.packagerConfig.prune;
    const afterCopyHooks = [
    /*#__PURE__*/
    function () {
      var _ref3 = _asyncToGenerator(function* (buildPath, electronVersion, pPlatform, pArch, done) {
        if (packagerSpinner) {
          packagerSpinner.succeed();
          prepareCounter += 1;
          prepareSpinner = ora(`Preparing to Package Application for arch: ${(prepareCounter === 2 ? 'armv7l' : 'x64').cyan}`).start();
        }

        const bins = yield (0, _pify.default)(_glob.default)(_path.default.join(buildPath, '**/.bin/**/*'));
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = bins[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            const bin = _step2.value;
            yield _fsExtra.default.remove(bin);
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
              _iterator2.return();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }

        done();
      });

      return function (_x2, _x3, _x4, _x5, _x6) {
        return _ref3.apply(this, arguments);
      };
    }(),
    /*#__PURE__*/
    function () {
      var _ref4 = _asyncToGenerator(function* (buildPath, electronVersion, pPlatform, pArch, done) {
        prepareSpinner.succeed();
        yield (0, _hook.runHook)(forgeConfig, 'packageAfterCopy', buildPath, electronVersion, pPlatform, pArch);
        done();
      });

      return function (_x7, _x8, _x9, _x10, _x11) {
        return _ref4.apply(this, arguments);
      };
    }(),
    /*#__PURE__*/
    function () {
      var _ref5 = _asyncToGenerator(function* (buildPath, electronVersion, pPlatform, pArch, done) {
        yield (0, _rebuild.default)(buildPath, electronVersion, pPlatform, pArch, forgeConfig.electronRebuildConfig);
        packagerSpinner = ora('Packaging Application').start();
        done();
      });

      return function (_x12, _x13, _x14, _x15, _x16) {
        return _ref5.apply(this, arguments);
      };
    }()];
    afterCopyHooks.push(
    /*#__PURE__*/
    function () {
      var _ref6 = _asyncToGenerator(function* (buildPath, electronVersion, pPlatform, pArch, done) {
        const copiedPackageJSON = yield (0, _readPackageJson.readMutatedPackageJson)(buildPath, forgeConfig);

        if (copiedPackageJSON.config && copiedPackageJSON.config.forge) {
          delete copiedPackageJSON.config.forge;
        }

        yield _fsExtra.default.writeJson(_path.default.resolve(buildPath, 'package.json'), copiedPackageJSON, {
          spaces: 2
        });
        done();
      });

      return function (_x17, _x18, _x19, _x20, _x21) {
        return _ref6.apply(this, arguments);
      };
    }());
    afterCopyHooks.push(...resolveHooks(forgeConfig.packagerConfig.afterCopy, dir));
    const afterPruneHooks = [];

    if (pruneEnabled) {
      afterPruneHooks.push(...resolveHooks(forgeConfig.packagerConfig.afterPrune, dir));
    }

    afterPruneHooks.push(
    /*#__PURE__*/
    function () {
      var _ref7 = _asyncToGenerator(function* (buildPath, electronVersion, pPlatform, pArch, done) {
        yield (0, _hook.runHook)(forgeConfig, 'packageAfterPrune', buildPath, electronVersion, pPlatform, pArch);
        done();
      });

      return function (_x22, _x23, _x24, _x25, _x26) {
        return _ref7.apply(this, arguments);
      };
    }());
    const afterExtractHooks = [
    /*#__PURE__*/
    function () {
      var _ref8 = _asyncToGenerator(function* (buildPath, electronVersion, pPlatform, pArch, done) {
        yield (0, _hook.runHook)(forgeConfig, 'packageAfterExtract', buildPath, electronVersion, pPlatform, pArch);
        done();
      });

      return function (_x27, _x28, _x29, _x30, _x31) {
        return _ref8.apply(this, arguments);
      };
    }()];
    afterExtractHooks.push(...resolveHooks(forgeConfig.packagerConfig.afterExtract, dir));
    const packageOpts = Object.assign({
      asar: false,
      overwrite: true
    }, forgeConfig.packagerConfig, {
      dir,
      arch,
      platform,
      afterCopy: sequentialHooks(afterCopyHooks),
      afterExtract: sequentialHooks(afterExtractHooks),
      afterPrune: sequentialHooks(afterPruneHooks),
      out: calculatedOutDir,
      electronVersion: yield (0, _electronVersion.getElectronVersion)(dir, packageJSON)
    });
    packageOpts.quiet = true;

    if (packageOpts.all) {
      throw new Error('config.forge.packagerConfig.all is not supported by Electron Forge');
    }

    if (!packageJSON.version && !packageOpts.appVersion) {
      // eslint-disable-next-line max-len
      (0, _messages.warn)(interactive, 'Please set "version" or "config.forge.packagerConfig.appVersion" in your application\'s package.json so auto-updates work properly'.yellow);
    }

    if (packageOpts.prebuiltAsar) {
      throw new Error('config.forge.packagerConfig.prebuiltAsar is not supported by Electron Forge');
    }

    yield (0, _hook.runHook)(forgeConfig, 'generateAssets');
    yield (0, _hook.runHook)(forgeConfig, 'prePackage');
    d('packaging with options', packageOpts);
    yield (0, _electronPackager.default)(packageOpts);
    yield (0, _hook.runHook)(forgeConfig, 'postPackage');
    if (packagerSpinner) packagerSpinner.succeed();
  });

  return function (_x) {
    return _ref2.apply(this, arguments);
  };
}();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,