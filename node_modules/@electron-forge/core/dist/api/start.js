"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "StartOptions", {
  enumerable: true,
  get: function get() {
    return _sharedTypes.StartOptions;
  }
});
exports.default = void 0;

require("source-map-support/register");

require("colors");

var _asyncOra = require("@electron-forge/async-ora");

var _sharedTypes = require("@electron-forge/shared-types");

var _child_process = require("child_process");

var _path = _interopRequireDefault(require("path"));

var _readPackageJson = require("../util/read-package-json");

var _rebuild = _interopRequireDefault(require("../util/rebuild"));

var _resolveDir = _interopRequireDefault(require("../util/resolve-dir"));

var _forgeConfig = _interopRequireDefault(require("../util/forge-config"));

var _hook = require("../util/hook");

var _electronVersion = require("../util/electron-version");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* ({
    dir = process.cwd(),
    appPath = '.',
    interactive = false,
    enableLogging = false,
    args = [],
    runAsNode = false,
    inspect = false
  }) {
    _asyncOra.asyncOra.interactive = interactive;
    yield (0, _asyncOra.asyncOra)('Locating Application',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const resolvedDir = yield (0, _resolveDir.default)(dir);

      if (!resolvedDir) {
        throw 'Failed to locate startable Electron application';
      }

      dir = resolvedDir;
    }));
    const forgeConfig = yield (0, _forgeConfig.default)(dir);
    const packageJSON = yield (0, _readPackageJson.readMutatedPackageJson)(dir, forgeConfig);

    if (!packageJSON.version) {
      throw `Please set your application's 'version' in '${dir}/package.json'.`;
    }

    yield (0, _rebuild.default)(dir, (yield (0, _electronVersion.getElectronVersion)(dir, packageJSON)), process.platform, process.arch, forgeConfig.electronRebuildConfig);
    yield (0, _hook.runHook)(forgeConfig, 'generateAssets');
    let lastSpawned = null;

    const forgeSpawnWrapper =
    /*#__PURE__*/
    function () {
      var _ref3 = _asyncToGenerator(function* () {
        lastSpawned = yield forgeSpawn(); // When the child app is closed we should stop listening for stdin

        if (lastSpawned) {
          if (interactive && process.stdin.isPaused()) {
            process.stdin.resume();
          }

          lastSpawned.on('exit', () => {
            if (lastSpawned.restarted) return;
            if (!process.stdin.isPaused()) process.stdin.pause();
          });
        } else {
          if (interactive && !process.stdin.isPaused()) {
            process.stdin.pause();
          }
        }

        return lastSpawned;
      });

      return function forgeSpawnWrapper() {
        return _ref3.apply(this, arguments);
      };
    }();

    const forgeSpawn =
    /*#__PURE__*/
    function () {
      var _ref4 = _asyncToGenerator(function* () {
        let electronExecPath = null; // If a plugin has taken over the start command let's stop here

        const spawnedPluginChild = yield forgeConfig.pluginInterface.overrideStartLogic({
          dir,
          appPath,
          interactive,
          enableLogging,
          args,
          runAsNode,
          inspect
        });
        let prefixArgs = [];

        if (typeof spawnedPluginChild === 'string') {
          electronExecPath = spawnedPluginChild;
        } else if (Array.isArray(spawnedPluginChild)) {
          electronExecPath = spawnedPluginChild[0];
          prefixArgs = spawnedPluginChild.slice(1);
        } else if (spawnedPluginChild) {
          yield (0, _hook.runHook)(forgeConfig, 'postStart', spawnedPluginChild);
          return spawnedPluginChild;
        }

        if (!electronExecPath) {
          electronExecPath = require(_path.default.resolve(dir, 'node_modules/electron'));
        }

        const spawnOpts = {
          cwd: dir,
          stdio: 'inherit',
          env: Object.assign({}, process.env, enableLogging ? {
            ELECTRON_ENABLE_LOGGING: 'true',
            ELECTRON_ENABLE_STACK_DUMPING: 'true'
          } : {})
        };

        if (runAsNode) {
          spawnOpts.env.ELECTRON_RUN_AS_NODE = 'true';
        } else {
          delete spawnOpts.env.ELECTRON_RUN_AS_NODE;
        }

        if (inspect) {
          args = ['--inspect'].concat(args);
        }

        let spawned;
        yield (0, _asyncOra.asyncOra)('Launching Application',
        /*#__PURE__*/
        _asyncToGenerator(function* () {
          spawned = (0, _child_process.spawn)(electronExecPath, prefixArgs.concat([appPath]).concat(args), spawnOpts);
        }));
        yield (0, _hook.runHook)(forgeConfig, 'postStart', spawned);
        return spawned;
      });

      return function forgeSpawn() {
        return _ref4.apply(this, arguments);
      };
    }();

    if (interactive) {
      process.stdin.on('data',
      /*#__PURE__*/
      function () {
        var _ref6 = _asyncToGenerator(function* (data) {
          if (data.toString().trim() === 'rs' && lastSpawned) {
            console.info('\nRestarting App\n'.cyan);
            lastSpawned.restarted = true;
            lastSpawned.kill('SIGTERM');
            lastSpawned.emit('restarted', (yield forgeSpawnWrapper()));
          }
        });

        return function (_x2) {
          return _ref6.apply(this, arguments);
        };
      }());
    }

    return forgeSpawnWrapper();
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,