"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.siblingDep = siblingDep;
exports.default = exports.exactDevDeps = exports.devDeps = exports.deps = void 0;

require("source-map-support/register");

var _asyncOra = require("@electron-forge/async-ora");

var _debug = _interopRequireDefault(require("debug"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _username = _interopRequireDefault(require("username"));

var _forgeConfig = require("../../util/forge-config");

var _installDependencies = _interopRequireWildcard(require("../../util/install-dependencies"));

var _readPackageJson = require("../../util/read-package-json");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const d = (0, _debug.default)('electron-forge:init:npm');

const corePackage = _fsExtra.default.readJsonSync(_path.default.resolve(__dirname, '../../../package.json'));

function siblingDep(name) {
  return `@electron-forge/${name}@${corePackage.version}`;
}

const deps = ['electron-squirrel-startup'];
exports.deps = deps;
const devDeps = [siblingDep('cli'), siblingDep('maker-squirrel'), siblingDep('maker-zip'), siblingDep('maker-deb'), siblingDep('maker-rpm')];
exports.devDeps = devDeps;
const exactDevDeps = ['electron'];
exports.exactDevDeps = exactDevDeps;

var _default =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* (dir) {
    yield (0, _asyncOra.asyncOra)('Initializing NPM Module',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const packageJSON = yield (0, _readPackageJson.readRawPackageJson)(_path.default.resolve(__dirname, '../../../tmpl'));
      packageJSON.productName = packageJSON.name = _path.default.basename(dir).toLowerCase();
      packageJSON.author = yield (0, _username.default)();
      (0, _forgeConfig.setInitialForgeConfig)(packageJSON);
      packageJSON.scripts.lint = 'echo "No linting configured"';
      d('writing package.json to:', dir);
      yield _fsExtra.default.writeJson(_path.default.resolve(dir, 'package.json'), packageJSON, {
        spaces: 2
      });
    }));
    yield (0, _asyncOra.asyncOra)('Installing NPM Dependencies',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      d('installing dependencies');
      yield (0, _installDependencies.default)(dir, deps);
      d('installing devDependencies');
      yield (0, _installDependencies.default)(dir, devDeps, _installDependencies.DepType.DEV);
      d('installing exact devDependencies');

      for (var _i = 0; _i < exactDevDeps.length; _i++) {
        const packageName = exactDevDeps[_i];
        yield (0, _installDependencies.default)(dir, [packageName], _installDependencies.DepType.DEV, _installDependencies.DepVersionRestriction.EXACT);
      }
    }));
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvaW5pdC1zY3JpcHRzL2luaXQtbnBtLnRzIl0sIm5hbWVzIjpbImQiLCJjb3JlUGFja2FnZSIsImZzIiwicmVhZEpzb25TeW5jIiwicGF0aCIsInJlc29sdmUiLCJfX2Rpcm5hbWUiLCJzaWJsaW5nRGVwIiwibmFtZSIsInZlcnNpb24iLCJkZXBzIiwiZGV2RGVwcyIsImV4YWN0RGV2RGVwcyIsImRpciIsInBhY2thZ2VKU09OIiwicHJvZHVjdE5hbWUiLCJiYXNlbmFtZSIsInRvTG93ZXJDYXNlIiwiYXV0aG9yIiwic2NyaXB0cyIsImxpbnQiLCJ3cml0ZUpzb24iLCJzcGFjZXMiLCJEZXBUeXBlIiwiREVWIiwicGFja2FnZU5hbWUiLCJEZXBWZXJzaW9uUmVzdHJpY3Rpb24iLCJFWEFDVCJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOztBQUVBOztBQUNBOztBQUNBOzs7Ozs7Ozs7O0FBRUEsTUFBTUEsQ0FBQyxHQUFHLG9CQUFNLHlCQUFOLENBQVY7O0FBQ0EsTUFBTUMsV0FBVyxHQUFHQyxpQkFBR0MsWUFBSCxDQUFnQkMsY0FBS0MsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLHVCQUF4QixDQUFoQixDQUFwQjs7QUFFTyxTQUFTQyxVQUFULENBQW9CQyxJQUFwQixFQUFrQztBQUN2QyxTQUFRLG1CQUFrQkEsSUFBSyxJQUFHUCxXQUFXLENBQUNRLE9BQVEsRUFBdEQ7QUFDRDs7QUFFTSxNQUFNQyxJQUFJLEdBQUcsQ0FBQywyQkFBRCxDQUFiOztBQUNBLE1BQU1DLE9BQU8sR0FBRyxDQUNyQkosVUFBVSxDQUFDLEtBQUQsQ0FEVyxFQUVyQkEsVUFBVSxDQUFDLGdCQUFELENBRlcsRUFHckJBLFVBQVUsQ0FBQyxXQUFELENBSFcsRUFJckJBLFVBQVUsQ0FBQyxXQUFELENBSlcsRUFLckJBLFVBQVUsQ0FBQyxXQUFELENBTFcsQ0FBaEI7O0FBT0EsTUFBTUssWUFBWSxHQUFHLENBQUMsVUFBRCxDQUFyQjs7Ozs7OytCQUVRLFdBQU9DLEdBQVAsRUFBdUI7QUFDcEMsVUFBTSx3QkFBUyx5QkFBVDtBQUFBO0FBQUEsc0JBQW9DLGFBQVk7QUFDcEQsWUFBTUMsV0FBVyxTQUFTLHlDQUFtQlYsY0FBS0MsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLGVBQXhCLENBQW5CLENBQTFCO0FBQ0FRLE1BQUFBLFdBQVcsQ0FBQ0MsV0FBWixHQUEwQkQsV0FBVyxDQUFDTixJQUFaLEdBQW1CSixjQUFLWSxRQUFMLENBQWNILEdBQWQsRUFBbUJJLFdBQW5CLEVBQTdDO0FBQ0FILE1BQUFBLFdBQVcsQ0FBQ0ksTUFBWixTQUEyQix3QkFBM0I7QUFDQSw4Q0FBc0JKLFdBQXRCO0FBRUFBLE1BQUFBLFdBQVcsQ0FBQ0ssT0FBWixDQUFvQkMsSUFBcEIsR0FBMkIsOEJBQTNCO0FBRUFwQixNQUFBQSxDQUFDLENBQUMsMEJBQUQsRUFBNkJhLEdBQTdCLENBQUQ7QUFDQSxZQUFNWCxpQkFBR21CLFNBQUgsQ0FBYWpCLGNBQUtDLE9BQUwsQ0FBYVEsR0FBYixFQUFrQixjQUFsQixDQUFiLEVBQWdEQyxXQUFoRCxFQUE2RDtBQUFFUSxRQUFBQSxNQUFNLEVBQUU7QUFBVixPQUE3RCxDQUFOO0FBQ0QsS0FWSyxFQUFOO0FBWUEsVUFBTSx3QkFBUyw2QkFBVDtBQUFBO0FBQUEsc0JBQXdDLGFBQVk7QUFDeER0QixNQUFBQSxDQUFDLENBQUMseUJBQUQsQ0FBRDtBQUNBLFlBQU0sa0NBQWVhLEdBQWYsRUFBb0JILElBQXBCLENBQU47QUFFQVYsTUFBQUEsQ0FBQyxDQUFDLDRCQUFELENBQUQ7QUFDQSxZQUFNLGtDQUFlYSxHQUFmLEVBQW9CRixPQUFwQixFQUE2QlksNkJBQVFDLEdBQXJDLENBQU47QUFFQXhCLE1BQUFBLENBQUMsQ0FBQyxrQ0FBRCxDQUFEOztBQUNBLDRCQUEwQlksWUFBMUIsZUFBd0M7QUFBbkMsY0FBTWEsV0FBVyxHQUFJYixZQUFKLElBQWpCO0FBQ0gsY0FBTSxrQ0FBZUMsR0FBZixFQUFvQixDQUFDWSxXQUFELENBQXBCLEVBQW1DRiw2QkFBUUMsR0FBM0MsRUFBZ0RFLDJDQUFzQkMsS0FBdEUsQ0FBTjtBQUNEO0FBQ0YsS0FYSyxFQUFOO0FBWUQsRyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFzeW5jT3JhIH0gZnJvbSAnQGVsZWN0cm9uLWZvcmdlL2FzeW5jLW9yYSc7XG5pbXBvcnQgZGVidWcgZnJvbSAnZGVidWcnO1xuaW1wb3J0IGZzIGZyb20gJ2ZzLWV4dHJhJztcbmltcG9ydCBwYXRoIGZyb20gJ3BhdGgnO1xuaW1wb3J0IHVzZXJuYW1lIGZyb20gJ3VzZXJuYW1lJztcblxuaW1wb3J0IHsgc2V0SW5pdGlhbEZvcmdlQ29uZmlnIH0gZnJvbSAnLi4vLi4vdXRpbC9mb3JnZS1jb25maWcnO1xuaW1wb3J0IGluc3RhbGxEZXBMaXN0LCB7IERlcFR5cGUsIERlcFZlcnNpb25SZXN0cmljdGlvbiB9IGZyb20gJy4uLy4uL3V0aWwvaW5zdGFsbC1kZXBlbmRlbmNpZXMnO1xuaW1wb3J0IHsgcmVhZFJhd1BhY2thZ2VKc29uIH0gZnJvbSAnLi4vLi4vdXRpbC9yZWFkLXBhY2thZ2UtanNvbic7XG5cbmNvbnN0IGQgPSBkZWJ1ZygnZWxlY3Ryb24tZm9yZ2U6aW5pdDpucG0nKTtcbmNvbnN0IGNvcmVQYWNrYWdlID0gZnMucmVhZEpzb25TeW5jKHBhdGgucmVzb2x2ZShfX2Rpcm5hbWUsICcuLi8uLi8uLi9wYWNrYWdlLmpzb24nKSk7XG5cbmV4cG9ydCBmdW5jdGlvbiBzaWJsaW5nRGVwKG5hbWU6IHN0cmluZykge1xuICByZXR1cm4gYEBlbGVjdHJvbi1mb3JnZS8ke25hbWV9QCR7Y29yZVBhY2thZ2UudmVyc2lvbn1gO1xufVxuXG5leHBvcnQgY29uc3QgZGVwcyA9IFsnZWxlY3Ryb24tc3F1aXJyZWwtc3RhcnR1cCddO1xuZXhwb3J0IGNvbnN0IGRldkRlcHMgPSBbXG4gIHNpYmxpbmdEZXAoJ2NsaScpLFxuICBzaWJsaW5nRGVwKCdtYWtlci1zcXVpcnJlbCcpLFxuICBzaWJsaW5nRGVwKCdtYWtlci16aXAnKSxcbiAgc2libGluZ0RlcCgnbWFrZXItZGViJyksXG4gIHNpYmxpbmdEZXAoJ21ha2VyLXJwbScpLFxuXTtcbmV4cG9ydCBjb25zdCBleGFjdERldkRlcHMgPSBbJ2VsZWN0cm9uJ107XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIChkaXI6IHN0cmluZykgPT4ge1xuICBhd2FpdCBhc3luY09yYSgnSW5pdGlhbGl6aW5nIE5QTSBNb2R1bGUnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgcGFja2FnZUpTT04gPSBhd2FpdCByZWFkUmF3UGFja2FnZUpzb24ocGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uLy4uLy4uL3RtcGwnKSk7XG4gICAgcGFja2FnZUpTT04ucHJvZHVjdE5hbWUgPSBwYWNrYWdlSlNPTi5uYW1lID0gcGF0aC5iYXNlbmFtZShkaXIpLnRvTG93ZXJDYXNlKCk7XG4gICAgcGFja2FnZUpTT04uYXV0aG9yID0gYXdhaXQgdXNlcm5hbWUoKTtcbiAgICBzZXRJbml0aWFsRm9yZ2VDb25maWcocGFja2FnZUpTT04pO1xuXG4gICAgcGFja2FnZUpTT04uc2NyaXB0cy5saW50ID0gJ2VjaG8gXCJObyBsaW50aW5nIGNvbmZpZ3VyZWRcIic7XG5cbiAgICBkKCd3cml0aW5nIHBhY2thZ2UuanNvbiB0bzonLCBkaXIpO1xuICAgIGF3YWl0IGZzLndyaXRlSnNvbihwYXRoLnJlc29sdmUoZGlyLCAncGFja2FnZS5qc29uJyksIHBhY2thZ2VKU09OLCB7IHNwYWNlczogMiB9KTtcbiAgfSk7XG5cbiAgYXdhaXQgYXN5bmNPcmEoJ0luc3RhbGxpbmcgTlBNIERlcGVuZGVuY2llcycsIGFzeW5jICgpID0+IHtcbiAgICBkKCdpbnN0YWxsaW5nIGRlcGVuZGVuY2llcycpO1xuICAgIGF3YWl0IGluc3RhbGxEZXBMaXN0KGRpciwgZGVwcyk7XG5cbiAgICBkKCdpbnN0YWxsaW5nIGRldkRlcGVuZGVuY2llcycpO1xuICAgIGF3YWl0IGluc3RhbGxEZXBMaXN0KGRpciwgZGV2RGVwcywgRGVwVHlwZS5ERVYpO1xuXG4gICAgZCgnaW5zdGFsbGluZyBleGFjdCBkZXZEZXBlbmRlbmNpZXMnKTtcbiAgICBmb3IgKGNvbnN0IHBhY2thZ2VOYW1lIG9mIGV4YWN0RGV2RGVwcykge1xuICAgICAgYXdhaXQgaW5zdGFsbERlcExpc3QoZGlyLCBbcGFja2FnZU5hbWVdLCBEZXBUeXBlLkRFViwgRGVwVmVyc2lvblJlc3RyaWN0aW9uLkVYQUNUKTtcbiAgICB9XG4gIH0pO1xufTtcbiJdfQ==