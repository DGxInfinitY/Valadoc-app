"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _asyncOra = require("@electron-forge/async-ora");

var _child_process = require("child_process");

var _debug = _interopRequireDefault(require("debug"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const d = (0, _debug.default)('electron-forge:init:git');

var _default =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* (dir) {
    yield (0, _asyncOra.asyncOra)('Initializing Git Repository',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      yield new Promise((resolve, reject) => {
        (0, _child_process.exec)('git rev-parse --show-toplevel', {
          cwd: dir
        }, err => {
          if (err) {
            // not run within a Git repository
            d('executing "git init" in directory:', dir);
            (0, _child_process.exec)('git init', {
              cwd: dir
            }, err => {
              if (err) return reject(err);
              resolve();
            });
          } else {
            d('.git directory already exists, skipping git initialization');
            resolve();
          }
        });
      });
    }));
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvaW5pdC1zY3JpcHRzL2luaXQtZ2l0LnRzIl0sIm5hbWVzIjpbImQiLCJkaXIiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsImN3ZCIsImVyciJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7Ozs7Ozs7O0FBRUEsTUFBTUEsQ0FBQyxHQUFHLG9CQUFNLHlCQUFOLENBQVY7Ozs7OytCQUVlLFdBQU9DLEdBQVAsRUFBdUI7QUFDcEMsVUFBTSx3QkFBUyw2QkFBVDtBQUFBO0FBQUEsc0JBQXdDLGFBQVk7QUFDeEQsWUFBTSxJQUFJQyxPQUFKLENBQVksQ0FBQ0MsT0FBRCxFQUFVQyxNQUFWLEtBQXFCO0FBQ3JDLGlDQUFLLCtCQUFMLEVBQXNDO0FBQ3BDQyxVQUFBQSxHQUFHLEVBQUVKO0FBRCtCLFNBQXRDLEVBRUlLLEdBQUQsSUFBUztBQUNWLGNBQUlBLEdBQUosRUFBUztBQUNQO0FBQ0FOLFlBQUFBLENBQUMsQ0FBQyxvQ0FBRCxFQUF1Q0MsR0FBdkMsQ0FBRDtBQUNBLHFDQUFLLFVBQUwsRUFBaUI7QUFDZkksY0FBQUEsR0FBRyxFQUFFSjtBQURVLGFBQWpCLEVBRUlLLEdBQUQsSUFBUztBQUNWLGtCQUFJQSxHQUFKLEVBQVMsT0FBT0YsTUFBTSxDQUFDRSxHQUFELENBQWI7QUFDVEgsY0FBQUEsT0FBTztBQUNSLGFBTEQ7QUFNRCxXQVRELE1BU087QUFDTEgsWUFBQUEsQ0FBQyxDQUFDLDREQUFELENBQUQ7QUFDQUcsWUFBQUEsT0FBTztBQUNSO0FBQ0YsU0FoQkQ7QUFpQkQsT0FsQkssQ0FBTjtBQW1CRCxLQXBCSyxFQUFOO0FBcUJELEciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3luY09yYSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9hc3luYy1vcmEnO1xuaW1wb3J0IHsgZXhlYyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcblxuY29uc3QgZCA9IGRlYnVnKCdlbGVjdHJvbi1mb3JnZTppbml0OmdpdCcpO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoZGlyOiBzdHJpbmcpID0+IHtcbiAgYXdhaXQgYXN5bmNPcmEoJ0luaXRpYWxpemluZyBHaXQgUmVwb3NpdG9yeScsIGFzeW5jICgpID0+IHtcbiAgICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICBleGVjKCdnaXQgcmV2LXBhcnNlIC0tc2hvdy10b3BsZXZlbCcsIHtcbiAgICAgICAgY3dkOiBkaXIsXG4gICAgICB9LCAoZXJyKSA9PiB7XG4gICAgICAgIGlmIChlcnIpIHtcbiAgICAgICAgICAvLyBub3QgcnVuIHdpdGhpbiBhIEdpdCByZXBvc2l0b3J5XG4gICAgICAgICAgZCgnZXhlY3V0aW5nIFwiZ2l0IGluaXRcIiBpbiBkaXJlY3Rvcnk6JywgZGlyKTtcbiAgICAgICAgICBleGVjKCdnaXQgaW5pdCcsIHtcbiAgICAgICAgICAgIGN3ZDogZGlyLFxuICAgICAgICAgIH0sIChlcnIpID0+IHtcbiAgICAgICAgICAgIGlmIChlcnIpIHJldHVybiByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIHJlc29sdmUoKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkKCcuZ2l0IGRpcmVjdG9yeSBhbHJlYWR5IGV4aXN0cywgc2tpcHBpbmcgZ2l0IGluaXRpYWxpemF0aW9uJyk7XG4gICAgICAgICAgcmVzb2x2ZSgpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSk7XG59O1xuIl19