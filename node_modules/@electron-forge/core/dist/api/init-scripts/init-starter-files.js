"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.copy = void 0;

require("source-map-support/register");

var _asyncOra = require("@electron-forge/async-ora");

var _debug = _interopRequireDefault(require("debug"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const d = (0, _debug.default)('electron-forge:init:starter-files');

const copy =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* (source, target) {
    d(`copying "${source}" --> "${target}"`);
    yield _fsExtra.default.copy(source, target);
  });

  return function copy(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.copy = copy;

var _default =
/*#__PURE__*/
function () {
  var _ref2 = _asyncToGenerator(function* (dir, {
    copyCIFiles
  }) {
    yield (0, _asyncOra.asyncOra)('Copying Starter Files',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const tmplPath = _path.default.resolve(__dirname, '../../../tmpl');

      d('creating directory:', _path.default.resolve(dir, 'src'));
      yield _fsExtra.default.mkdirs(_path.default.resolve(dir, 'src'));
      const rootFiles = ['_gitignore'];
      if (copyCIFiles) rootFiles.push(...['_travis.yml', '_appveyor.yml']);
      const srcFiles = ['index.js', 'index.html'];

      for (var _i = 0; _i < rootFiles.length; _i++) {
        const file = rootFiles[_i];
        yield copy(_path.default.resolve(tmplPath, file), _path.default.resolve(dir, file.replace(/^_/, '.')));
      }

      for (var _i2 = 0; _i2 < srcFiles.length; _i2++) {
        const file = srcFiles[_i2];
        yield copy(_path.default.resolve(tmplPath, file), _path.default.resolve(dir, 'src', file));
      }
    }));
  });

  return function (_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvaW5pdC1zY3JpcHRzL2luaXQtc3RhcnRlci1maWxlcy50cyJdLCJuYW1lcyI6WyJkIiwiY29weSIsInNvdXJjZSIsInRhcmdldCIsImZzIiwiZGlyIiwiY29weUNJRmlsZXMiLCJ0bXBsUGF0aCIsInBhdGgiLCJyZXNvbHZlIiwiX19kaXJuYW1lIiwibWtkaXJzIiwicm9vdEZpbGVzIiwicHVzaCIsInNyY0ZpbGVzIiwiZmlsZSIsInJlcGxhY2UiXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOzs7Ozs7OztBQUVBLE1BQU1BLENBQUMsR0FBRyxvQkFBTSxtQ0FBTixDQUFWOztBQUVPLE1BQU1DLElBQUk7QUFBQTtBQUFBO0FBQUEsK0JBQUcsV0FBT0MsTUFBUCxFQUF1QkMsTUFBdkIsRUFBMEM7QUFDNURILElBQUFBLENBQUMsQ0FBRSxZQUFXRSxNQUFPLFVBQVNDLE1BQU8sR0FBcEMsQ0FBRDtBQUNBLFVBQU1DLGlCQUFHSCxJQUFILENBQVFDLE1BQVIsRUFBZ0JDLE1BQWhCLENBQU47QUFDRCxHQUhnQjs7QUFBQSxrQkFBSkYsSUFBSTtBQUFBO0FBQUE7QUFBQSxHQUFWOzs7Ozs7O2dDQVNRLFdBQU9JLEdBQVAsRUFBb0I7QUFBRUMsSUFBQUE7QUFBRixHQUFwQixFQUFpRTtBQUM5RSxVQUFNLHdCQUFTLHVCQUFUO0FBQUE7QUFBQSxzQkFBa0MsYUFBWTtBQUNsRCxZQUFNQyxRQUFRLEdBQUdDLGNBQUtDLE9BQUwsQ0FBYUMsU0FBYixFQUF3QixlQUF4QixDQUFqQjs7QUFFQVYsTUFBQUEsQ0FBQyxDQUFDLHFCQUFELEVBQXdCUSxjQUFLQyxPQUFMLENBQWFKLEdBQWIsRUFBa0IsS0FBbEIsQ0FBeEIsQ0FBRDtBQUNBLFlBQU1ELGlCQUFHTyxNQUFILENBQVVILGNBQUtDLE9BQUwsQ0FBYUosR0FBYixFQUFrQixLQUFsQixDQUFWLENBQU47QUFDQSxZQUFNTyxTQUFTLEdBQUcsQ0FBQyxZQUFELENBQWxCO0FBQ0EsVUFBSU4sV0FBSixFQUFpQk0sU0FBUyxDQUFDQyxJQUFWLENBQWUsR0FBRyxDQUFDLGFBQUQsRUFBZ0IsZUFBaEIsQ0FBbEI7QUFDakIsWUFBTUMsUUFBUSxHQUFHLENBQUMsVUFBRCxFQUFhLFlBQWIsQ0FBakI7O0FBRUEsNEJBQW1CRixTQUFuQixlQUE4QjtBQUF6QixjQUFNRyxJQUFJLEdBQUlILFNBQUosSUFBVjtBQUNILGNBQU1YLElBQUksQ0FBQ08sY0FBS0MsT0FBTCxDQUFhRixRQUFiLEVBQXVCUSxJQUF2QixDQUFELEVBQStCUCxjQUFLQyxPQUFMLENBQWFKLEdBQWIsRUFBa0JVLElBQUksQ0FBQ0MsT0FBTCxDQUFhLElBQWIsRUFBbUIsR0FBbkIsQ0FBbEIsQ0FBL0IsQ0FBVjtBQUNEOztBQUNELDhCQUFtQkYsUUFBbkIsZ0JBQTZCO0FBQXhCLGNBQU1DLElBQUksR0FBSUQsUUFBSixLQUFWO0FBQ0gsY0FBTWIsSUFBSSxDQUFDTyxjQUFLQyxPQUFMLENBQWFGLFFBQWIsRUFBdUJRLElBQXZCLENBQUQsRUFBK0JQLGNBQUtDLE9BQUwsQ0FBYUosR0FBYixFQUFrQixLQUFsQixFQUF5QlUsSUFBekIsQ0FBL0IsQ0FBVjtBQUNEO0FBQ0YsS0FmSyxFQUFOO0FBZ0JELEciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3luY09yYSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9hc3luYy1vcmEnO1xuaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgcGF0aCBmcm9tICdwYXRoJztcblxuY29uc3QgZCA9IGRlYnVnKCdlbGVjdHJvbi1mb3JnZTppbml0OnN0YXJ0ZXItZmlsZXMnKTtcblxuZXhwb3J0IGNvbnN0IGNvcHkgPSBhc3luYyAoc291cmNlOiBzdHJpbmcsIHRhcmdldDogc3RyaW5nKSA9PiB7XG4gIGQoYGNvcHlpbmcgXCIke3NvdXJjZX1cIiAtLT4gXCIke3RhcmdldH1cImApO1xuICBhd2FpdCBmcy5jb3B5KHNvdXJjZSwgdGFyZ2V0KTtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgSW5pdFN0YXJ0ZXJGaWxlc09wdGlvbnMge1xuICBjb3B5Q0lGaWxlczogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKGRpcjogc3RyaW5nLCB7IGNvcHlDSUZpbGVzIH06IEluaXRTdGFydGVyRmlsZXNPcHRpb25zKSA9PiB7XG4gIGF3YWl0IGFzeW5jT3JhKCdDb3B5aW5nIFN0YXJ0ZXIgRmlsZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdG1wbFBhdGggPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4vLi4vLi4vdG1wbCcpO1xuXG4gICAgZCgnY3JlYXRpbmcgZGlyZWN0b3J5OicsIHBhdGgucmVzb2x2ZShkaXIsICdzcmMnKSk7XG4gICAgYXdhaXQgZnMubWtkaXJzKHBhdGgucmVzb2x2ZShkaXIsICdzcmMnKSk7XG4gICAgY29uc3Qgcm9vdEZpbGVzID0gWydfZ2l0aWdub3JlJ107XG4gICAgaWYgKGNvcHlDSUZpbGVzKSByb290RmlsZXMucHVzaCguLi5bJ190cmF2aXMueW1sJywgJ19hcHB2ZXlvci55bWwnXSk7XG4gICAgY29uc3Qgc3JjRmlsZXMgPSBbJ2luZGV4LmpzJywgJ2luZGV4Lmh0bWwnXTtcblxuICAgIGZvciAoY29uc3QgZmlsZSBvZiByb290RmlsZXMpIHtcbiAgICAgIGF3YWl0IGNvcHkocGF0aC5yZXNvbHZlKHRtcGxQYXRoLCBmaWxlKSwgcGF0aC5yZXNvbHZlKGRpciwgZmlsZS5yZXBsYWNlKC9eXy8sICcuJykpKTtcbiAgICB9XG4gICAgZm9yIChjb25zdCBmaWxlIG9mIHNyY0ZpbGVzKSB7XG4gICAgICBhd2FpdCBjb3B5KHBhdGgucmVzb2x2ZSh0bXBsUGF0aCwgZmlsZSksIHBhdGgucmVzb2x2ZShkaXIsICdzcmMnLCBmaWxlKSk7XG4gICAgfVxuICB9KTtcbn07XG4iXX0=