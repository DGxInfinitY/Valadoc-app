"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _asyncOra = require("@electron-forge/async-ora");

var _debug = _interopRequireDefault(require("debug"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _glob = _interopRequireDefault(require("glob"));

var _resolvePackage = _interopRequireDefault(require("resolve-package"));

var _path = _interopRequireDefault(require("path"));

var _initStarterFiles = require("./init-starter-files");

var _installDependencies = _interopRequireWildcard(require("../../util/install-dependencies"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const d = (0, _debug.default)('electron-forge:init:custom');

var _default =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* (dir, template) {
    let templateModulePath;
    yield (0, _asyncOra.asyncOra)(`Locating custom template: "${template}"`,
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      try {
        templateModulePath = yield (0, _resolvePackage.default)(`electron-forge-template-${template}`);
        d('using global template');
      } catch (err) {
        try {
          templateModulePath = yield (0, _resolvePackage.default)(`@electron-forge/template-${template}`);
          d('using global template');
        } catch (err2) {
          try {
            templateModulePath = require.resolve(`electron-forge-template-${template}`);
            d('using local template');
          } catch (err3) {
            try {
              templateModulePath = require.resolve(`@electron-forge/template-${template}`);
              d('using local template');
            } catch (err4) {
              try {
                templateModulePath = require.resolve(template);
                d('using absolute template');
              } catch (err5) {
                throw `Failed to locate custom template: "${template}"\n\nTry \`npm install -g @electron-forge-template-${template}\``;
              }
            }
          }
        }
      }
    }));

    let templateModule = require(templateModulePath);

    templateModule = templateModule.default || templateModule;
    yield (0, _asyncOra.asyncOra)('Installing Template Dependencies',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      d('installing dependencies');
      yield (0, _installDependencies.default)(dir, templateModule.dependencies || []);
      d('installing devDependencies');
      yield (0, _installDependencies.default)(dir, templateModule.devDependencies || [], _installDependencies.DepType.DEV);
    }));
    yield (0, _asyncOra.asyncOra)('Copying Template Files',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const templateDirectory = templateModule.templateDirectory;

      if (templateDirectory) {
        const tmplPath = templateDirectory;

        if (!_path.default.isAbsolute(templateDirectory)) {
          throw `Custom template path needs to be absolute, this is an issue with "electron-forge-template-${template}"`;
        }

        const files = _glob.default.sync(_path.default.resolve(tmplPath, '**/*'));

        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
          for (var _iterator = files[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            const file = _step.value;

            if ((yield _fsExtra.default.stat(file)).isFile()) {
              yield (0, _initStarterFiles.copy)(file, _path.default.resolve(dir, _path.default.relative(tmplPath, file).replace(/^_/, '.')));
            }
          }
        } catch (err) {
          _didIteratorError = true;
          _iteratorError = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion && _iterator.return != null) {
              _iterator.return();
            }
          } finally {
            if (_didIteratorError) {
              throw _iteratorError;
            }
          }
        }
      }
    }));

    if (typeof templateModule.postCopy === 'function') {
      yield Promise.resolve(templateModule.postCopy(dir));
    }
  });

  return function (_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9hcGkvaW5pdC1zY3JpcHRzL2luaXQtY3VzdG9tLnRzIl0sIm5hbWVzIjpbImQiLCJkaXIiLCJ0ZW1wbGF0ZSIsInRlbXBsYXRlTW9kdWxlUGF0aCIsImVyciIsImVycjIiLCJyZXF1aXJlIiwicmVzb2x2ZSIsImVycjMiLCJlcnI0IiwiZXJyNSIsInRlbXBsYXRlTW9kdWxlIiwiZGVmYXVsdCIsImRlcGVuZGVuY2llcyIsImRldkRlcGVuZGVuY2llcyIsIkRlcFR5cGUiLCJERVYiLCJ0ZW1wbGF0ZURpcmVjdG9yeSIsInRtcGxQYXRoIiwicGF0aCIsImlzQWJzb2x1dGUiLCJmaWxlcyIsImdsb2IiLCJzeW5jIiwiZmlsZSIsImZzIiwic3RhdCIsImlzRmlsZSIsInJlbGF0aXZlIiwicmVwbGFjZSIsInBvc3RDb3B5IiwiUHJvbWlzZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7O0FBQUE7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBQ0E7O0FBRUE7O0FBQ0E7Ozs7Ozs7Ozs7QUFJQSxNQUFNQSxDQUFDLEdBQUcsb0JBQU0sNEJBQU4sQ0FBVjs7Ozs7K0JBRWUsV0FBT0MsR0FBUCxFQUFvQkMsUUFBcEIsRUFBeUM7QUFDdEQsUUFBSUMsa0JBQUo7QUFDQSxVQUFNLHdCQUFVLDhCQUE2QkQsUUFBUyxHQUFoRDtBQUFBO0FBQUEsc0JBQW9ELGFBQVk7QUFDcEUsVUFBSTtBQUNGQyxRQUFBQSxrQkFBa0IsU0FBUyw2QkFBZ0IsMkJBQTBCRCxRQUFTLEVBQW5ELENBQTNCO0FBQ0FGLFFBQUFBLENBQUMsQ0FBQyx1QkFBRCxDQUFEO0FBQ0QsT0FIRCxDQUdFLE9BQU9JLEdBQVAsRUFBWTtBQUNaLFlBQUk7QUFDRkQsVUFBQUEsa0JBQWtCLFNBQVMsNkJBQWdCLDRCQUEyQkQsUUFBUyxFQUFwRCxDQUEzQjtBQUNBRixVQUFBQSxDQUFDLENBQUMsdUJBQUQsQ0FBRDtBQUNELFNBSEQsQ0FHRSxPQUFPSyxJQUFQLEVBQWE7QUFDYixjQUFJO0FBQ0ZGLFlBQUFBLGtCQUFrQixHQUFHRyxPQUFPLENBQUNDLE9BQVIsQ0FBaUIsMkJBQTBCTCxRQUFTLEVBQXBELENBQXJCO0FBQ0FGLFlBQUFBLENBQUMsQ0FBQyxzQkFBRCxDQUFEO0FBQ0QsV0FIRCxDQUdFLE9BQU9RLElBQVAsRUFBYTtBQUNiLGdCQUFJO0FBQ0ZMLGNBQUFBLGtCQUFrQixHQUFHRyxPQUFPLENBQUNDLE9BQVIsQ0FBaUIsNEJBQTJCTCxRQUFTLEVBQXJELENBQXJCO0FBQ0FGLGNBQUFBLENBQUMsQ0FBQyxzQkFBRCxDQUFEO0FBQ0QsYUFIRCxDQUdFLE9BQU9TLElBQVAsRUFBYTtBQUNiLGtCQUFJO0FBQ0ZOLGdCQUFBQSxrQkFBa0IsR0FBR0csT0FBTyxDQUFDQyxPQUFSLENBQWdCTCxRQUFoQixDQUFyQjtBQUNBRixnQkFBQUEsQ0FBQyxDQUFDLHlCQUFELENBQUQ7QUFDRCxlQUhELENBR0UsT0FBT1UsSUFBUCxFQUFhO0FBQ2Isc0JBQU8sc0NBQXFDUixRQUFTLHNEQUFxREEsUUFBUyxJQUFuSDtBQUNEO0FBQ0Y7QUFDRjtBQUNGO0FBQ0Y7QUFDRixLQTNCSyxFQUFOOztBQTZCQSxRQUFJUyxjQUE2QyxHQUFHTCxPQUFPLENBQUNILGtCQUFELENBQTNEOztBQUVBUSxJQUFBQSxjQUFjLEdBQUdBLGNBQWMsQ0FBQ0MsT0FBZixJQUEwQkQsY0FBM0M7QUFFQSxVQUFNLHdCQUFTLGtDQUFUO0FBQUE7QUFBQSxzQkFBNkMsYUFBWTtBQUM3RFgsTUFBQUEsQ0FBQyxDQUFDLHlCQUFELENBQUQ7QUFDQSxZQUFNLGtDQUFlQyxHQUFmLEVBQW9CVSxjQUFjLENBQUNFLFlBQWYsSUFBK0IsRUFBbkQsQ0FBTjtBQUNBYixNQUFBQSxDQUFDLENBQUMsNEJBQUQsQ0FBRDtBQUNBLFlBQU0sa0NBQWVDLEdBQWYsRUFBb0JVLGNBQWMsQ0FBQ0csZUFBZixJQUFrQyxFQUF0RCxFQUEwREMsNkJBQVFDLEdBQWxFLENBQU47QUFDRCxLQUxLLEVBQU47QUFPQSxVQUFNLHdCQUFTLHdCQUFUO0FBQUE7QUFBQSxzQkFBbUMsYUFBWTtBQUNuRCxZQUFNQyxpQkFBaUIsR0FBR04sY0FBYyxDQUFDTSxpQkFBekM7O0FBQ0EsVUFBSUEsaUJBQUosRUFBdUI7QUFDckIsY0FBTUMsUUFBUSxHQUFHRCxpQkFBakI7O0FBQ0EsWUFBSSxDQUFDRSxjQUFLQyxVQUFMLENBQWdCSCxpQkFBaEIsQ0FBTCxFQUF5QztBQUN2QyxnQkFBTyw2RkFBNEZmLFFBQVMsR0FBNUc7QUFDRDs7QUFFRCxjQUFNbUIsS0FBSyxHQUFHQyxjQUFLQyxJQUFMLENBQVVKLGNBQUtaLE9BQUwsQ0FBYVcsUUFBYixFQUF1QixNQUF2QixDQUFWLENBQWQ7O0FBTnFCO0FBQUE7QUFBQTs7QUFBQTtBQVFyQiwrQkFBbUJHLEtBQW5CLDhIQUEwQjtBQUFBLGtCQUFmRyxJQUFlOztBQUN4QixnQkFBSSxPQUFPQyxpQkFBR0MsSUFBSCxDQUFRRixJQUFSLENBQVAsRUFBc0JHLE1BQXRCLEVBQUosRUFBb0M7QUFDbEMsb0JBQU0sNEJBQUtILElBQUwsRUFBV0wsY0FBS1osT0FBTCxDQUFhTixHQUFiLEVBQWtCa0IsY0FBS1MsUUFBTCxDQUFjVixRQUFkLEVBQXdCTSxJQUF4QixFQUE4QkssT0FBOUIsQ0FBc0MsSUFBdEMsRUFBNEMsR0FBNUMsQ0FBbEIsQ0FBWCxDQUFOO0FBQ0Q7QUFDRjtBQVpvQjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBYXRCO0FBQ0YsS0FoQkssRUFBTjs7QUFrQkEsUUFBSSxPQUFPbEIsY0FBYyxDQUFDbUIsUUFBdEIsS0FBbUMsVUFBdkMsRUFBbUQ7QUFDakQsWUFBTUMsT0FBTyxDQUFDeEIsT0FBUixDQUFnQkksY0FBYyxDQUFDbUIsUUFBZixDQUF3QjdCLEdBQXhCLENBQWhCLENBQU47QUFDRDtBQUNGLEciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBhc3luY09yYSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9hc3luYy1vcmEnO1xuaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCBmcyBmcm9tICdmcy1leHRyYSc7XG5pbXBvcnQgZ2xvYiBmcm9tICdnbG9iJztcbmltcG9ydCByZXNvbHZlUGFja2FnZSBmcm9tICdyZXNvbHZlLXBhY2thZ2UnO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5cbmltcG9ydCB7IGNvcHkgfSBmcm9tICcuL2luaXQtc3RhcnRlci1maWxlcyc7XG5pbXBvcnQgaW5zdGFsbERlcExpc3QsIHsgRGVwVHlwZSB9IGZyb20gJy4uLy4uL3V0aWwvaW5zdGFsbC1kZXBlbmRlbmNpZXMnO1xuaW1wb3J0IHsgUG9zc2libGVNb2R1bGUgfSBmcm9tICcuLi8uLi91dGlsL3JlcXVpcmUtc2VhcmNoJztcbmltcG9ydCB7IEZvcmdlVGVtcGxhdGUgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcblxuY29uc3QgZCA9IGRlYnVnKCdlbGVjdHJvbi1mb3JnZTppbml0OmN1c3RvbScpO1xuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoZGlyOiBzdHJpbmcsIHRlbXBsYXRlOiBzdHJpbmcpID0+IHtcbiAgbGV0IHRlbXBsYXRlTW9kdWxlUGF0aCE6IHN0cmluZztcbiAgYXdhaXQgYXN5bmNPcmEoYExvY2F0aW5nIGN1c3RvbSB0ZW1wbGF0ZTogXCIke3RlbXBsYXRlfVwiYCwgYXN5bmMgKCkgPT4ge1xuICAgIHRyeSB7XG4gICAgICB0ZW1wbGF0ZU1vZHVsZVBhdGggPSBhd2FpdCByZXNvbHZlUGFja2FnZShgZWxlY3Ryb24tZm9yZ2UtdGVtcGxhdGUtJHt0ZW1wbGF0ZX1gKTtcbiAgICAgIGQoJ3VzaW5nIGdsb2JhbCB0ZW1wbGF0ZScpO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGVtcGxhdGVNb2R1bGVQYXRoID0gYXdhaXQgcmVzb2x2ZVBhY2thZ2UoYEBlbGVjdHJvbi1mb3JnZS90ZW1wbGF0ZS0ke3RlbXBsYXRlfWApO1xuICAgICAgICBkKCd1c2luZyBnbG9iYWwgdGVtcGxhdGUnKTtcbiAgICAgIH0gY2F0Y2ggKGVycjIpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0ZW1wbGF0ZU1vZHVsZVBhdGggPSByZXF1aXJlLnJlc29sdmUoYGVsZWN0cm9uLWZvcmdlLXRlbXBsYXRlLSR7dGVtcGxhdGV9YCk7XG4gICAgICAgICAgZCgndXNpbmcgbG9jYWwgdGVtcGxhdGUnKTtcbiAgICAgICAgfSBjYXRjaCAoZXJyMykge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZU1vZHVsZVBhdGggPSByZXF1aXJlLnJlc29sdmUoYEBlbGVjdHJvbi1mb3JnZS90ZW1wbGF0ZS0ke3RlbXBsYXRlfWApO1xuICAgICAgICAgICAgZCgndXNpbmcgbG9jYWwgdGVtcGxhdGUnKTtcbiAgICAgICAgICB9IGNhdGNoIChlcnI0KSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICB0ZW1wbGF0ZU1vZHVsZVBhdGggPSByZXF1aXJlLnJlc29sdmUodGVtcGxhdGUpO1xuICAgICAgICAgICAgICBkKCd1c2luZyBhYnNvbHV0ZSB0ZW1wbGF0ZScpO1xuICAgICAgICAgICAgfSBjYXRjaCAoZXJyNSkge1xuICAgICAgICAgICAgICB0aHJvdyBgRmFpbGVkIHRvIGxvY2F0ZSBjdXN0b20gdGVtcGxhdGU6IFwiJHt0ZW1wbGF0ZX1cIlxcblxcblRyeSBcXGBucG0gaW5zdGFsbCAtZyBAZWxlY3Ryb24tZm9yZ2UtdGVtcGxhdGUtJHt0ZW1wbGF0ZX1cXGBgO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgbGV0IHRlbXBsYXRlTW9kdWxlOiBQb3NzaWJsZU1vZHVsZTxGb3JnZVRlbXBsYXRlPiA9IHJlcXVpcmUodGVtcGxhdGVNb2R1bGVQYXRoKTtcblxuICB0ZW1wbGF0ZU1vZHVsZSA9IHRlbXBsYXRlTW9kdWxlLmRlZmF1bHQgfHwgdGVtcGxhdGVNb2R1bGU7XG5cbiAgYXdhaXQgYXN5bmNPcmEoJ0luc3RhbGxpbmcgVGVtcGxhdGUgRGVwZW5kZW5jaWVzJywgYXN5bmMgKCkgPT4ge1xuICAgIGQoJ2luc3RhbGxpbmcgZGVwZW5kZW5jaWVzJyk7XG4gICAgYXdhaXQgaW5zdGFsbERlcExpc3QoZGlyLCB0ZW1wbGF0ZU1vZHVsZS5kZXBlbmRlbmNpZXMgfHwgW10pO1xuICAgIGQoJ2luc3RhbGxpbmcgZGV2RGVwZW5kZW5jaWVzJyk7XG4gICAgYXdhaXQgaW5zdGFsbERlcExpc3QoZGlyLCB0ZW1wbGF0ZU1vZHVsZS5kZXZEZXBlbmRlbmNpZXMgfHwgW10sIERlcFR5cGUuREVWKTtcbiAgfSk7XG5cbiAgYXdhaXQgYXN5bmNPcmEoJ0NvcHlpbmcgVGVtcGxhdGUgRmlsZXMnLCBhc3luYyAoKSA9PiB7XG4gICAgY29uc3QgdGVtcGxhdGVEaXJlY3RvcnkgPSB0ZW1wbGF0ZU1vZHVsZS50ZW1wbGF0ZURpcmVjdG9yeTtcbiAgICBpZiAodGVtcGxhdGVEaXJlY3RvcnkpIHtcbiAgICAgIGNvbnN0IHRtcGxQYXRoID0gdGVtcGxhdGVEaXJlY3Rvcnk7XG4gICAgICBpZiAoIXBhdGguaXNBYnNvbHV0ZSh0ZW1wbGF0ZURpcmVjdG9yeSkpIHtcbiAgICAgICAgdGhyb3cgYEN1c3RvbSB0ZW1wbGF0ZSBwYXRoIG5lZWRzIHRvIGJlIGFic29sdXRlLCB0aGlzIGlzIGFuIGlzc3VlIHdpdGggXCJlbGVjdHJvbi1mb3JnZS10ZW1wbGF0ZS0ke3RlbXBsYXRlfVwiYDtcbiAgICAgIH1cblxuICAgICAgY29uc3QgZmlsZXMgPSBnbG9iLnN5bmMocGF0aC5yZXNvbHZlKHRtcGxQYXRoLCAnKiovKicpKTtcblxuICAgICAgZm9yIChjb25zdCBmaWxlIG9mIGZpbGVzKSB7XG4gICAgICAgIGlmICgoYXdhaXQgZnMuc3RhdChmaWxlKSkuaXNGaWxlKCkpIHtcbiAgICAgICAgICBhd2FpdCBjb3B5KGZpbGUsIHBhdGgucmVzb2x2ZShkaXIsIHBhdGgucmVsYXRpdmUodG1wbFBhdGgsIGZpbGUpLnJlcGxhY2UoL15fLywgJy4nKSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICBpZiAodHlwZW9mIHRlbXBsYXRlTW9kdWxlLnBvc3RDb3B5ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgYXdhaXQgUHJvbWlzZS5yZXNvbHZlKHRlbXBsYXRlTW9kdWxlLnBvc3RDb3B5KGRpcikpO1xuICB9XG59O1xuIl19