"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

require("colors");

var _asyncOra = require("@electron-forge/async-ora");

var _debug = _interopRequireDefault(require("debug"));

var _yarnOrNpm = require("../util/yarn-or-npm");

var _resolveDir = _interopRequireDefault(require("../util/resolve-dir"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const d = (0, _debug.default)('electron-forge:lint');

var _default =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* ({
    dir = process.cwd(),
    interactive = false
  }) {
    _asyncOra.asyncOra.interactive = interactive;
    let success = true;
    let result = null;
    yield (0, _asyncOra.asyncOra)('Linting Application',
    /*#__PURE__*/
    function () {
      var _ref2 = _asyncToGenerator(function* (lintSpinner) {
        const resolvedDir = yield (0, _resolveDir.default)(dir);

        if (!resolvedDir) {
          throw 'Failed to locate lintable Electron application';
        }

        dir = resolvedDir;
        d('executing "run lint" in dir:', dir);

        try {
          yield (0, _yarnOrNpm.yarnOrNpmSpawn)(['run', 'lint'], {
            stdio: process.platform === 'win32' ? 'inherit' : 'pipe',
            cwd: dir
          });
        } catch (err) {
          lintSpinner.fail();
          success = false;
          result = err;
        }
      });

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());

    if (!success) {
      throw result;
    }
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvbGludC50cyJdLCJuYW1lcyI6WyJkIiwiZGlyIiwicHJvY2VzcyIsImN3ZCIsImludGVyYWN0aXZlIiwiYXN5bmNPcmEiLCJzdWNjZXNzIiwicmVzdWx0IiwibGludFNwaW5uZXIiLCJyZXNvbHZlZERpciIsInN0ZGlvIiwicGxhdGZvcm0iLCJlcnIiLCJmYWlsIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7Ozs7Ozs7QUFFQSxNQUFNQSxDQUFDLEdBQUcsb0JBQU0scUJBQU4sQ0FBVjs7Ozs7K0JBT2UsV0FBTztBQUNwQkMsSUFBQUEsR0FBRyxHQUFHQyxPQUFPLENBQUNDLEdBQVIsRUFEYztBQUVwQkMsSUFBQUEsV0FBVyxHQUFHO0FBRk0sR0FBUCxFQUdJO0FBQ2pCQyx1QkFBU0QsV0FBVCxHQUF1QkEsV0FBdkI7QUFFQSxRQUFJRSxPQUFPLEdBQUcsSUFBZDtBQUNBLFFBQUlDLE1BQU0sR0FBRyxJQUFiO0FBRUEsVUFBTSx3QkFBUyxxQkFBVDtBQUFBO0FBQUE7QUFBQSxvQ0FBZ0MsV0FBT0MsV0FBUCxFQUF1QjtBQUMzRCxjQUFNQyxXQUFXLFNBQVMseUJBQVdSLEdBQVgsQ0FBMUI7O0FBQ0EsWUFBSSxDQUFDUSxXQUFMLEVBQWtCO0FBQ2hCLGdCQUFNLGdEQUFOO0FBQ0Q7O0FBRURSLFFBQUFBLEdBQUcsR0FBR1EsV0FBTjtBQUVBVCxRQUFBQSxDQUFDLENBQUMsOEJBQUQsRUFBaUNDLEdBQWpDLENBQUQ7O0FBQ0EsWUFBSTtBQUNGLGdCQUFNLCtCQUFlLENBQUMsS0FBRCxFQUFRLE1BQVIsQ0FBZixFQUFnQztBQUNwQ1MsWUFBQUEsS0FBSyxFQUFFUixPQUFPLENBQUNTLFFBQVIsS0FBcUIsT0FBckIsR0FBK0IsU0FBL0IsR0FBMkMsTUFEZDtBQUVwQ1IsWUFBQUEsR0FBRyxFQUFFRjtBQUYrQixXQUFoQyxDQUFOO0FBSUQsU0FMRCxDQUtFLE9BQU9XLEdBQVAsRUFBWTtBQUNaSixVQUFBQSxXQUFXLENBQUNLLElBQVo7QUFDQVAsVUFBQUEsT0FBTyxHQUFHLEtBQVY7QUFDQUMsVUFBQUEsTUFBTSxHQUFHSyxHQUFUO0FBQ0Q7QUFDRixPQW5CSzs7QUFBQTtBQUFBO0FBQUE7QUFBQSxRQUFOOztBQXFCQSxRQUFJLENBQUNOLE9BQUwsRUFBYztBQUNaLFlBQU1DLE1BQU47QUFDRDtBQUNGLEciLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ2NvbG9ycyc7XG5pbXBvcnQgeyBhc3luY09yYSB9IGZyb20gJ0BlbGVjdHJvbi1mb3JnZS9hc3luYy1vcmEnO1xuaW1wb3J0IGRlYnVnIGZyb20gJ2RlYnVnJztcbmltcG9ydCB7IHlhcm5Pck5wbVNwYXduIH0gZnJvbSAnLi4vdXRpbC95YXJuLW9yLW5wbSc7XG5cbmltcG9ydCByZXNvbHZlRGlyIGZyb20gJy4uL3V0aWwvcmVzb2x2ZS1kaXInO1xuXG5jb25zdCBkID0gZGVidWcoJ2VsZWN0cm9uLWZvcmdlOmxpbnQnKTtcblxuZXhwb3J0IGludGVyZmFjZSBMaW50T3B0aW9ucyB7XG4gIGRpcj86IHN0cmluZztcbiAgaW50ZXJhY3RpdmU/OiBib29sZWFuO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhc3luYyAoe1xuICBkaXIgPSBwcm9jZXNzLmN3ZCgpLFxuICBpbnRlcmFjdGl2ZSA9IGZhbHNlLFxufTogTGludE9wdGlvbnMpID0+IHtcbiAgYXN5bmNPcmEuaW50ZXJhY3RpdmUgPSBpbnRlcmFjdGl2ZTtcblxuICBsZXQgc3VjY2VzcyA9IHRydWU7XG4gIGxldCByZXN1bHQgPSBudWxsO1xuXG4gIGF3YWl0IGFzeW5jT3JhKCdMaW50aW5nIEFwcGxpY2F0aW9uJywgYXN5bmMgKGxpbnRTcGlubmVyKSA9PiB7XG4gICAgY29uc3QgcmVzb2x2ZWREaXIgPSBhd2FpdCByZXNvbHZlRGlyKGRpcik7XG4gICAgaWYgKCFyZXNvbHZlZERpcikge1xuICAgICAgdGhyb3cgJ0ZhaWxlZCB0byBsb2NhdGUgbGludGFibGUgRWxlY3Ryb24gYXBwbGljYXRpb24nO1xuICAgIH1cblxuICAgIGRpciA9IHJlc29sdmVkRGlyO1xuXG4gICAgZCgnZXhlY3V0aW5nIFwicnVuIGxpbnRcIiBpbiBkaXI6JywgZGlyKTtcbiAgICB0cnkge1xuICAgICAgYXdhaXQgeWFybk9yTnBtU3Bhd24oWydydW4nLCAnbGludCddLCB7XG4gICAgICAgIHN0ZGlvOiBwcm9jZXNzLnBsYXRmb3JtID09PSAnd2luMzInID8gJ2luaGVyaXQnIDogJ3BpcGUnLFxuICAgICAgICBjd2Q6IGRpcixcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgbGludFNwaW5uZXIuZmFpbCgpO1xuICAgICAgc3VjY2VzcyA9IGZhbHNlO1xuICAgICAgcmVzdWx0ID0gZXJyO1xuICAgIH1cbiAgfSk7XG5cbiAgaWYgKCFzdWNjZXNzKSB7XG4gICAgdGhyb3cgcmVzdWx0O1xuICB9XG59O1xuIl19