"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash.merge"));

var _asyncOra = require("@electron-forge/async-ora");

var _debug = _interopRequireDefault(require("debug"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _initGit = _interopRequireDefault(require("./init-scripts/init-git"));

var _initNpm = require("./init-scripts/init-npm");

var _electronVersion = require("../util/electron-version");

var _forgeConfig = require("../util/forge-config");

var _messages = require("../util/messages");

var _installDependencies = _interopRequireWildcard(require("../util/install-dependencies"));

var _readPackageJson = require("../util/read-package-json");

var _upgradeForgeConfig = _interopRequireWildcard(require("../util/upgrade-forge-config"));

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const d = (0, _debug.default)('electron-forge:import');

var _default =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* ({
    dir = process.cwd(),
    interactive = false,
    confirmImport,
    shouldContinueOnExisting,
    shouldRemoveDependency,
    shouldUpdateScript,
    outDir
  }) {
    const calculatedOutDir = outDir || 'out';
    _asyncOra.asyncOra.interactive = interactive;
    d(`Attempting to import project in: ${dir}`);

    if (!(yield _fsExtra.default.pathExists(dir)) || !(yield _fsExtra.default.pathExists(_path.default.resolve(dir, 'package.json')))) {
      throw `We couldn't find a project in: ${dir}`;
    } // eslint-disable-next-line max-len


    if (typeof confirmImport === 'function') {
      if (!(yield confirmImport())) {
        process.exit(0);
      }
    }

    yield (0, _initGit.default)(dir);
    const importDeps = [].concat(_initNpm.deps);
    let importDevDeps = [].concat(_initNpm.devDeps);
    let importExactDevDeps = [].concat(_initNpm.exactDevDeps);
    let packageJSON = yield (0, _readPackageJson.readRawPackageJson)(dir);

    if (packageJSON.config && packageJSON.config.forge) {
      if (packageJSON.config.forge.makers) {
        (0, _messages.warn)(interactive, 'It looks like this project is already configured for Electron Forge'.green);

        if (typeof shouldContinueOnExisting === 'function') {
          if (!(yield shouldContinueOnExisting())) {
            process.exit(0);
          }
        }
      } else if (typeof packageJSON.config.forge === 'string') {
        (0, _messages.warn)(interactive, "We can't tell if the Electron Forge config is compatible because it's in an external JavaScript file, not trying to convert it and continuing anyway".yellow);
      } else {
        d('Upgrading an Electron Forge < 6 project');
        packageJSON.config.forge = (0, _upgradeForgeConfig.default)(packageJSON.config.forge);
        importDevDeps = (0, _upgradeForgeConfig.updateUpgradedForgeDevDeps)(packageJSON, importDevDeps);
      }
    }

    packageJSON.dependencies = packageJSON.dependencies || {};
    packageJSON.devDependencies = packageJSON.devDependencies || {};

    var _updateElectronDepend = (0, _electronVersion.updateElectronDependency)(packageJSON, importDevDeps, importExactDevDeps);

    var _updateElectronDepend2 = _slicedToArray(_updateElectronDepend, 2);

    importDevDeps = _updateElectronDepend2[0];
    importExactDevDeps = _updateElectronDepend2[1];
    const keys = Object.keys(packageJSON.dependencies).concat(Object.keys(packageJSON.devDependencies));
    const buildToolPackages = {
      'electron-builder': 'provides mostly equivalent functionality',
      'electron-download': 'already uses this module as a transitive dependency',
      'electron-forge': 'replaced with @electron-forge/cli',
      'electron-installer-debian': 'already uses this module as a transitive dependency',
      'electron-installer-dmg': 'already uses this module as a transitive dependency',
      'electron-installer-flatpak': 'already uses this module as a transitive dependency',
      'electron-installer-redhat': 'already uses this module as a transitive dependency',
      'electron-osx-sign': 'already uses this module as a transitive dependency',
      'electron-packager': 'already uses this module as a transitive dependency',
      'electron-winstaller': 'already uses this module as a transitive dependency'
    };
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = keys[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        const key = _step.value;

        if (buildToolPackages[key]) {
          const explanation = buildToolPackages[key]; // eslint-disable-next-line max-len

          let remove = true;

          if (typeof shouldRemoveDependency === 'function') {
            remove = yield shouldRemoveDependency(key, explanation);
          }

          if (remove) {
            delete packageJSON.dependencies[key];
            delete packageJSON.devDependencies[key];
          }
        }
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    packageJSON.scripts = packageJSON.scripts || {};
    d('reading current scripts object:', packageJSON.scripts);

    const updatePackageScript =
    /*#__PURE__*/
    function () {
      var _ref2 = _asyncToGenerator(function* (scriptName, newValue) {
        if (packageJSON.scripts[scriptName] !== newValue) {
          // eslint-disable-next-line max-len
          let update = true;

          if (typeof shouldUpdateScript === 'function') {
            update = yield shouldUpdateScript(scriptName, newValue);
          }

          if (update) {
            packageJSON.scripts[scriptName] = newValue;
          }
        }
      });

      return function updatePackageScript(_x2, _x3) {
        return _ref2.apply(this, arguments);
      };
    }();

    yield updatePackageScript('start', 'electron-forge start');
    yield updatePackageScript('package', 'electron-forge package');
    yield updatePackageScript('make', 'electron-forge make');
    d('forgified scripts object:', packageJSON.scripts);

    const writeChanges =
    /*#__PURE__*/
    function () {
      var _ref3 = _asyncToGenerator(function* () {
        yield (0, _asyncOra.asyncOra)('Writing modified package.json file',
        /*#__PURE__*/
        _asyncToGenerator(function* () {
          yield _fsExtra.default.writeJson(_path.default.resolve(dir, 'package.json'), packageJSON, {
            spaces: 2
          });
        }));
      });

      return function writeChanges() {
        return _ref3.apply(this, arguments);
      };
    }();

    yield writeChanges();
    yield (0, _asyncOra.asyncOra)('Installing dependencies',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      d('deleting old dependencies forcefully');
      yield _fsExtra.default.remove(_path.default.resolve(dir, 'node_modules/.bin/electron'));
      yield _fsExtra.default.remove(_path.default.resolve(dir, 'node_modules/.bin/electron.cmd'));
      d('installing dependencies');
      yield (0, _installDependencies.default)(dir, importDeps);
      d('installing devDependencies');
      yield (0, _installDependencies.default)(dir, importDevDeps, _installDependencies.DepType.DEV);
      d('installing exactDevDependencies');
      yield (0, _installDependencies.default)(dir, importExactDevDeps, _installDependencies.DepType.DEV, _installDependencies.DepVersionRestriction.EXACT);
    }));
    packageJSON = yield (0, _readPackageJson.readRawPackageJson)(dir);

    if (!packageJSON.version) {
      (0, _messages.warn)(interactive, 'Please set the "version" in your application\'s package.json'.yellow);
    }

    packageJSON.config = packageJSON.config || {};
    const templatePackageJSON = yield (0, _readPackageJson.readRawPackageJson)(_path.default.resolve(__dirname, '../../tmpl'));

    if (packageJSON.config.forge) {
      if (typeof packageJSON.config.forge !== 'string') {
        packageJSON.config.forge = (0, _lodash.default)(templatePackageJSON.config.forge, packageJSON.config.forge);
      }
    } else {
      packageJSON.config.forge = templatePackageJSON.config.forge;
    }

    if (typeof packageJSON.config.forge !== 'string') {
      (0, _forgeConfig.setInitialForgeConfig)(packageJSON);
    }

    yield writeChanges();
    yield (0, _asyncOra.asyncOra)('Fixing .gitignore',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      if (yield _fsExtra.default.pathExists(_path.default.resolve(dir, '.gitignore'))) {
        const gitignore = yield _fsExtra.default.readFile(_path.default.resolve(dir, '.gitignore'));

        if (!gitignore.includes(calculatedOutDir)) {
          yield _fsExtra.default.writeFile(_path.default.resolve(dir, '.gitignore'), `${gitignore}\n${calculatedOutDir}/`);
        }
      }
    }));
    (0, _messages.info)(interactive, `

We have ATTEMPTED to convert your app to be in a format that electron-forge understands.

Thanks for using ${'"electron-forge"'.green}!!!`);
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,