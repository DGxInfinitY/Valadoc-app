"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "ForgeMakeResult", {
  enumerable: true,
  get: function get() {
    return _sharedTypes.ForgeMakeResult;
  }
});
Object.defineProperty(exports, "ImportOptions", {
  enumerable: true,
  get: function get() {
    return _import2.ImportOptions;
  }
});
Object.defineProperty(exports, "InitOptions", {
  enumerable: true,
  get: function get() {
    return _init.InitOptions;
  }
});
Object.defineProperty(exports, "InstallOptions", {
  enumerable: true,
  get: function get() {
    return _install.InstallOptions;
  }
});
Object.defineProperty(exports, "InstallAsset", {
  enumerable: true,
  get: function get() {
    return _install.Asset;
  }
});
Object.defineProperty(exports, "LintOptions", {
  enumerable: true,
  get: function get() {
    return _lint.LintOptions;
  }
});
Object.defineProperty(exports, "MakeOptions", {
  enumerable: true,
  get: function get() {
    return _make.MakeOptions;
  }
});
Object.defineProperty(exports, "PackageOptions", {
  enumerable: true,
  get: function get() {
    return _package2.PackageOptions;
  }
});
Object.defineProperty(exports, "PublishOptions", {
  enumerable: true,
  get: function get() {
    return _publish.PublishOptions;
  }
});
Object.defineProperty(exports, "StartOptions", {
  enumerable: true,
  get: function get() {
    return _start.StartOptions;
  }
});
exports.utils = exports.api = exports.ForgeUtils = exports.ForgeAPI = void 0;

require("source-map-support/register");

require("colors");

var _sharedTypes = require("@electron-forge/shared-types");

var _import2 = _interopRequireWildcard(require("./import"));

var _init = _interopRequireWildcard(require("./init"));

var _install = _interopRequireWildcard(require("./install"));

var _lint = _interopRequireWildcard(require("./lint"));

var _make = _interopRequireWildcard(require("./make"));

var _package2 = _interopRequireWildcard(require("./package"));

var _publish = _interopRequireWildcard(require("./publish"));

var _start = _interopRequireWildcard(require("./start"));

var _forgeConfig = require("../util/forge-config");

var _yarnOrNpm = require("../util/yarn-or-npm");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj.default = obj; return newObj; } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

class ForgeAPI {
  /**
   * Attempt to import a given module directory to the Electron Forge standard.
   *
   * * Sets up `git` and the correct NPM dependencies
   * * Adds a template forge config to `package.json`
   */
  import(opts) {
    return (0, _import2.default)(opts);
  }
  /**
   * Initialize a new Electron Forge template project in the given directory.
   */


  init(opts) {
    return (0, _init.default)(opts);
  }
  /**
   * Install an Electron application from GitHub.
   *
   * Works on all three platforms for all major distributable types.
   */


  install(opts) {
    return (0, _install.default)(opts);
  }
  /**
   * Lint a local Electron application.
   *
   * The promise will be rejected with the stdout+stderr of the linting process
   * if linting fails or will be resolved if it succeeds.
   */


  lint(opts) {
    return (0, _lint.default)(opts);
  }
  /**
   * Make distributables for an Electron application
   */


  make(opts) {
    return (0, _make.default)(opts);
  }
  /**
   * Resolves hooks if they are a path to a file (instead of a `Function`)
   */


  package(opts) {
    return (0, _package2.default)(opts);
  }
  /**
   * Publish an Electron application into the given target service
   */


  publish(opts) {
    return (0, _publish.default)(opts);
  }
  /**
   * Start an Electron application.
   *
   * Handles things like native module rebuilding for you on the fly
   */


  start(opts) {
    return (0, _start.default)(opts);
  }

}

exports.ForgeAPI = ForgeAPI;

class ForgeUtils {
  constructor() {
    _defineProperty(this, "hasYarn", _yarnOrNpm.hasYarn);

    _defineProperty(this, "yarnOrNpmSpawn", _yarnOrNpm.yarnOrNpmSpawn);
  }

  /**
   * Helper for creating a dynamic config value that will get it's real value
   * based on the "buildIdentifier" in your forge config.
   *
   * Usage:
   * `fromBuildIdentifier({ stable: 'App', beta: 'App Beta' })`
   */
  fromBuildIdentifier(map) {
    return (0, _forgeConfig.fromBuildIdentifier)(map);
  }

}

exports.ForgeUtils = ForgeUtils;
const api = new ForgeAPI();
exports.api = api;
const utils = new ForgeUtils();
exports.utils = utils;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9hcGkvaW5kZXgudHMiXSwibmFtZXMiOlsiRm9yZ2VBUEkiLCJpbXBvcnQiLCJvcHRzIiwiaW5pdCIsImluc3RhbGwiLCJsaW50IiwibWFrZSIsInBhY2thZ2UiLCJwdWJsaXNoIiwic3RhcnQiLCJGb3JnZVV0aWxzIiwiaGFzWWFybiIsInlhcm5Pck5wbVNwYXduIiwiZnJvbUJ1aWxkSWRlbnRpZmllciIsIm1hcCIsImFwaSIsInV0aWxzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFHQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFFQTs7QUFDQTs7Ozs7O0FBRU8sTUFBTUEsUUFBTixDQUFlO0FBQ3BCOzs7Ozs7QUFNQUMsRUFBQUEsTUFBTSxDQUFDQyxJQUFELEVBQXNCO0FBQzFCLFdBQU8sc0JBQVFBLElBQVIsQ0FBUDtBQUNEO0FBQ0Q7Ozs7O0FBR0FDLEVBQUFBLElBQUksQ0FBQ0QsSUFBRCxFQUFvQjtBQUN0QixXQUFPLG1CQUFLQSxJQUFMLENBQVA7QUFDRDtBQUNEOzs7Ozs7O0FBS0FFLEVBQUFBLE9BQU8sQ0FBQ0YsSUFBRCxFQUF1QjtBQUM1QixXQUFPLHNCQUFRQSxJQUFSLENBQVA7QUFDRDtBQUNEOzs7Ozs7OztBQU1BRyxFQUFBQSxJQUFJLENBQUNILElBQUQsRUFBb0I7QUFDdEIsV0FBTyxtQkFBS0EsSUFBTCxDQUFQO0FBQ0Q7QUFDRDs7Ozs7QUFHQUksRUFBQUEsSUFBSSxDQUFDSixJQUFELEVBQW9CO0FBQ3RCLFdBQU8sbUJBQUtBLElBQUwsQ0FBUDtBQUNEO0FBQ0Q7Ozs7O0FBR0FLLEVBQUFBLE9BQU8sQ0FBQ0wsSUFBRCxFQUF1QjtBQUM1QixXQUFPLHVCQUFTQSxJQUFULENBQVA7QUFDRDtBQUNEOzs7OztBQUdBTSxFQUFBQSxPQUFPLENBQUNOLElBQUQsRUFBdUI7QUFDNUIsV0FBTyxzQkFBUUEsSUFBUixDQUFQO0FBQ0Q7QUFDRDs7Ozs7OztBQUtBTyxFQUFBQSxLQUFLLENBQUNQLElBQUQsRUFBcUI7QUFDeEIsV0FBTyxvQkFBTUEsSUFBTixDQUFQO0FBQ0Q7O0FBMURtQjs7OztBQTZEZixNQUFNUSxVQUFOLENBQWlCO0FBQUE7QUFBQSxxQ0FZWkMsa0JBWlk7O0FBQUEsNENBYUxDLHlCQWJLO0FBQUE7O0FBQ3RCOzs7Ozs7O0FBT0FDLEVBQUFBLG1CQUFtQixDQUFJQyxHQUFKLEVBQTJDO0FBQzVELFdBQU8sc0NBQW9CQSxHQUFwQixDQUFQO0FBQ0Q7O0FBVnFCOzs7QUFnQnhCLE1BQU1DLEdBQUcsR0FBRyxJQUFJZixRQUFKLEVBQVo7O0FBQ0EsTUFBTWdCLEtBQUssR0FBRyxJQUFJTixVQUFKLEVBQWQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ2NvbG9ycyc7XG5pbXBvcnQgeyBGb3JnZU1ha2VSZXN1bHQgfSBmcm9tICdAZWxlY3Ryb24tZm9yZ2Uvc2hhcmVkLXR5cGVzJztcbmltcG9ydCB7IENoaWxkUHJvY2VzcyB9IGZyb20gJ2NoaWxkX3Byb2Nlc3MnO1xuXG5pbXBvcnQgX2ltcG9ydCwgeyBJbXBvcnRPcHRpb25zIH0gZnJvbSAnLi9pbXBvcnQnO1xuaW1wb3J0IGluaXQsIHsgSW5pdE9wdGlvbnMgfSBmcm9tICcuL2luaXQnO1xuaW1wb3J0IGluc3RhbGwsIHsgSW5zdGFsbE9wdGlvbnMsIEFzc2V0IGFzIEluc3RhbGxBc3NldCB9IGZyb20gJy4vaW5zdGFsbCc7XG5pbXBvcnQgbGludCwgeyBMaW50T3B0aW9ucyB9IGZyb20gJy4vbGludCc7XG5pbXBvcnQgbWFrZSwgeyBNYWtlT3B0aW9ucyB9IGZyb20gJy4vbWFrZSc7XG5pbXBvcnQgX3BhY2thZ2UsIHsgUGFja2FnZU9wdGlvbnMgfSBmcm9tICcuL3BhY2thZ2UnO1xuaW1wb3J0IHB1Ymxpc2gsIHsgUHVibGlzaE9wdGlvbnMgfSBmcm9tICcuL3B1Ymxpc2gnO1xuaW1wb3J0IHN0YXJ0LCB7IFN0YXJ0T3B0aW9ucyB9IGZyb20gJy4vc3RhcnQnO1xuXG5pbXBvcnQgeyBmcm9tQnVpbGRJZGVudGlmaWVyIH0gZnJvbSAnLi4vdXRpbC9mb3JnZS1jb25maWcnO1xuaW1wb3J0IHsgaGFzWWFybiwgeWFybk9yTnBtU3Bhd24gfSBmcm9tICcuLi91dGlsL3lhcm4tb3ItbnBtJztcblxuZXhwb3J0IGNsYXNzIEZvcmdlQVBJIHtcbiAgLyoqXG4gICAqIEF0dGVtcHQgdG8gaW1wb3J0IGEgZ2l2ZW4gbW9kdWxlIGRpcmVjdG9yeSB0byB0aGUgRWxlY3Ryb24gRm9yZ2Ugc3RhbmRhcmQuXG4gICAqXG4gICAqICogU2V0cyB1cCBgZ2l0YCBhbmQgdGhlIGNvcnJlY3QgTlBNIGRlcGVuZGVuY2llc1xuICAgKiAqIEFkZHMgYSB0ZW1wbGF0ZSBmb3JnZSBjb25maWcgdG8gYHBhY2thZ2UuanNvbmBcbiAgICovXG4gIGltcG9ydChvcHRzOiBJbXBvcnRPcHRpb25zKSB7XG4gICAgcmV0dXJuIF9pbXBvcnQob3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIEluaXRpYWxpemUgYSBuZXcgRWxlY3Ryb24gRm9yZ2UgdGVtcGxhdGUgcHJvamVjdCBpbiB0aGUgZ2l2ZW4gZGlyZWN0b3J5LlxuICAgKi9cbiAgaW5pdChvcHRzOiBJbml0T3B0aW9ucykge1xuICAgIHJldHVybiBpbml0KG9wdHMpO1xuICB9XG4gIC8qKlxuICAgKiBJbnN0YWxsIGFuIEVsZWN0cm9uIGFwcGxpY2F0aW9uIGZyb20gR2l0SHViLlxuICAgKlxuICAgKiBXb3JrcyBvbiBhbGwgdGhyZWUgcGxhdGZvcm1zIGZvciBhbGwgbWFqb3IgZGlzdHJpYnV0YWJsZSB0eXBlcy5cbiAgICovXG4gIGluc3RhbGwob3B0czogSW5zdGFsbE9wdGlvbnMpIHtcbiAgICByZXR1cm4gaW5zdGFsbChvcHRzKTtcbiAgfVxuICAvKipcbiAgICogTGludCBhIGxvY2FsIEVsZWN0cm9uIGFwcGxpY2F0aW9uLlxuICAgKlxuICAgKiBUaGUgcHJvbWlzZSB3aWxsIGJlIHJlamVjdGVkIHdpdGggdGhlIHN0ZG91dCtzdGRlcnIgb2YgdGhlIGxpbnRpbmcgcHJvY2Vzc1xuICAgKiBpZiBsaW50aW5nIGZhaWxzIG9yIHdpbGwgYmUgcmVzb2x2ZWQgaWYgaXQgc3VjY2VlZHMuXG4gICAqL1xuICBsaW50KG9wdHM6IExpbnRPcHRpb25zKSB7XG4gICAgcmV0dXJuIGxpbnQob3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIE1ha2UgZGlzdHJpYnV0YWJsZXMgZm9yIGFuIEVsZWN0cm9uIGFwcGxpY2F0aW9uXG4gICAqL1xuICBtYWtlKG9wdHM6IE1ha2VPcHRpb25zKSB7XG4gICAgcmV0dXJuIG1ha2Uob3B0cyk7XG4gIH1cbiAgLyoqXG4gICAqIFJlc29sdmVzIGhvb2tzIGlmIHRoZXkgYXJlIGEgcGF0aCB0byBhIGZpbGUgKGluc3RlYWQgb2YgYSBgRnVuY3Rpb25gKVxuICAgKi9cbiAgcGFja2FnZShvcHRzOiBQYWNrYWdlT3B0aW9ucykge1xuICAgIHJldHVybiBfcGFja2FnZShvcHRzKTtcbiAgfVxuICAvKipcbiAgICogUHVibGlzaCBhbiBFbGVjdHJvbiBhcHBsaWNhdGlvbiBpbnRvIHRoZSBnaXZlbiB0YXJnZXQgc2VydmljZVxuICAgKi9cbiAgcHVibGlzaChvcHRzOiBQdWJsaXNoT3B0aW9ucykge1xuICAgIHJldHVybiBwdWJsaXNoKG9wdHMpO1xuICB9XG4gIC8qKlxuICAgKiBTdGFydCBhbiBFbGVjdHJvbiBhcHBsaWNhdGlvbi5cbiAgICpcbiAgICogSGFuZGxlcyB0aGluZ3MgbGlrZSBuYXRpdmUgbW9kdWxlIHJlYnVpbGRpbmcgZm9yIHlvdSBvbiB0aGUgZmx5XG4gICAqL1xuICBzdGFydChvcHRzOiBTdGFydE9wdGlvbnMpIHtcbiAgICByZXR1cm4gc3RhcnQob3B0cyk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZvcmdlVXRpbHMge1xuICAvKipcbiAgICogSGVscGVyIGZvciBjcmVhdGluZyBhIGR5bmFtaWMgY29uZmlnIHZhbHVlIHRoYXQgd2lsbCBnZXQgaXQncyByZWFsIHZhbHVlXG4gICAqIGJhc2VkIG9uIHRoZSBcImJ1aWxkSWRlbnRpZmllclwiIGluIHlvdXIgZm9yZ2UgY29uZmlnLlxuICAgKlxuICAgKiBVc2FnZTpcbiAgICogYGZyb21CdWlsZElkZW50aWZpZXIoeyBzdGFibGU6ICdBcHAnLCBiZXRhOiAnQXBwIEJldGEnIH0pYFxuICAgKi9cbiAgZnJvbUJ1aWxkSWRlbnRpZmllcjxUPihtYXA6IHsgW2tleTogc3RyaW5nXTogVCB8IHVuZGVmaW5lZCB9KSB7XG4gICAgcmV0dXJuIGZyb21CdWlsZElkZW50aWZpZXIobWFwKTtcbiAgfVxuXG4gIGhhc1lhcm4gPSBoYXNZYXJuO1xuICB5YXJuT3JOcG1TcGF3biA9IHlhcm5Pck5wbVNwYXduO1xufVxuXG5jb25zdCBhcGkgPSBuZXcgRm9yZ2VBUEkoKTtcbmNvbnN0IHV0aWxzID0gbmV3IEZvcmdlVXRpbHMoKTtcblxuZXhwb3J0IHtcbiAgRm9yZ2VNYWtlUmVzdWx0LFxuICBJbXBvcnRPcHRpb25zLFxuICBJbml0T3B0aW9ucyxcbiAgSW5zdGFsbEFzc2V0LFxuICBJbnN0YWxsT3B0aW9ucyxcbiAgTGludE9wdGlvbnMsXG4gIE1ha2VPcHRpb25zLFxuICBQYWNrYWdlT3B0aW9ucyxcbiAgUHVibGlzaE9wdGlvbnMsXG4gIFN0YXJ0T3B0aW9ucyxcbiAgYXBpLFxuICB1dGlscyxcbn07XG4iXX0=