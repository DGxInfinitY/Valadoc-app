"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

require("colors");

var _asyncOra = require("@electron-forge/async-ora");

var _makerBase = _interopRequireDefault(require("@electron-forge/maker-base"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _forgeConfig = _interopRequireDefault(require("../util/forge-config"));

var _hook = require("../util/hook");

var _messages = require("../util/messages");

var _parseArchs = _interopRequireDefault(require("../util/parse-archs"));

var _readPackageJson = require("../util/read-package-json");

var _resolveDir = _interopRequireDefault(require("../util/resolve-dir"));

var _outDir = _interopRequireDefault(require("../util/out-dir"));

var _electronVersion = require("../util/electron-version");

var _requireSearch = _interopRequireDefault(require("../util/require-search"));

var _package = _interopRequireDefault(require("./package"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const _require = require('electron-download/lib/arch'),
      hostArch = _require.host;

class MakerImpl extends _makerBase.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", 'impl');

    _defineProperty(this, "defaultPlatforms", []);
  }

}

var _default =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* ({
    dir = process.cwd(),
    interactive = false,
    skipPackage = false,
    arch = hostArch(),
    platform = process.platform,
    overrideTargets,
    outDir
  }) {
    _asyncOra.asyncOra.interactive = interactive;
    let forgeConfig;
    yield (0, _asyncOra.asyncOra)('Resolving Forge Config',
    /*#__PURE__*/
    _asyncToGenerator(function* () {
      const resolvedDir = yield (0, _resolveDir.default)(dir);

      if (!resolvedDir) {
        throw 'Failed to locate makeable Electron application';
      }

      dir = resolvedDir;
      forgeConfig = yield (0, _forgeConfig.default)(dir);
    }));
    const actualOutDir = outDir || (0, _outDir.default)(dir, forgeConfig);
    const actualTargetPlatform = platform;
    platform = platform === 'mas' ? 'darwin' : platform;

    if (!['darwin', 'win32', 'linux', 'mas'].includes(actualTargetPlatform)) {
      throw new Error(`'${actualTargetPlatform}' is an invalid platform. Choices are 'darwin', 'mas', 'win32' or 'linux'`);
    }

    const makers = {};
    let targets = (overrideTargets || forgeConfig.makers).map(target => {
      if (typeof target === 'string') {
        return {
          name: target
        };
      }

      return target;
    });
    let targetId = 0;
    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
      for (var _iterator = targets[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
        const target = _step.value;
        let maker;

        if (target.__isElectronForgeMaker) {
          maker = target;
          if (maker.platforms.indexOf(actualTargetPlatform) === -1) continue;
        } else {
          const resolvableTarget = target;
          const MakerClass = (0, _requireSearch.default)(dir, [resolvableTarget.name]);

          if (!MakerClass) {
            throw `Could not find module with name: ${resolvableTarget.name}`;
          }

          maker = new MakerClass(resolvableTarget.config, resolvableTarget.platforms || undefined);
          if (maker.platforms.indexOf(actualTargetPlatform) === -1) continue;
        }

        if (!maker.isSupportedOnCurrentPlatform) {
          throw new Error([`Maker for target ${maker.name} is incompatible with this version of `, 'electron-forge, please upgrade or contact the maintainer ', '(needs to implement \'isSupportedOnCurrentPlatform)\')'].join(''));
        }

        if (!(yield maker.isSupportedOnCurrentPlatform())) {
          throw new Error([`Cannot make for ${platform} and target ${maker.name}: the maker declared `, `that it cannot run on ${process.platform}`].join(''));
        }

        makers[targetId] = maker;
        targetId += 1;
      }
    } catch (err) {
      _didIteratorError = true;
      _iteratorError = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion && _iterator.return != null) {
          _iterator.return();
        }
      } finally {
        if (_didIteratorError) {
          throw _iteratorError;
        }
      }
    }

    if (!skipPackage) {
      (0, _messages.info)(interactive, 'We need to package your application before we can make it'.green);
      yield (0, _package.default)({
        dir,
        interactive,
        arch,
        outDir: actualOutDir,
        platform: actualTargetPlatform
      });
    } else {
      (0, _messages.warn)(interactive, 'WARNING: Skipping the packaging step, this could result in an out of date build'.red);
    }

    targets = targets.filter((_, i) => makers[i]);
    (0, _messages.info)(interactive, `Making for the following targets: ${`${targets.map((t, i) => makers[i].name).join(', ')}`.cyan}`);
    const packageJSON = yield (0, _readPackageJson.readMutatedPackageJson)(dir, forgeConfig);
    const appName = forgeConfig.packagerConfig.name || packageJSON.productName || packageJSON.name;
    const outputs = [];
    yield (0, _hook.runHook)(forgeConfig, 'preMake');
    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
      for (var _iterator2 = (0, _parseArchs.default)(platform, arch, (yield (0, _electronVersion.getElectronVersion)(dir, packageJSON)))[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
        const targetArch = _step2.value;

        const packageDir = _path.default.resolve(actualOutDir, `${appName}-${actualTargetPlatform}-${targetArch}`);

        if (!(yield _fsExtra.default.pathExists(packageDir))) {
          throw new Error(`Couldn't find packaged app at: ${packageDir}`);
        }

        targetId = 0;
        var _iteratorNormalCompletion3 = true;
        var _didIteratorError3 = false;
        var _iteratorError3 = undefined;

        try {
          for (var _iterator3 = targets[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
            const target = _step3.value;
            const maker = makers[targetId];
            targetId += 1; // eslint-disable-next-line no-loop-func

            yield (0, _asyncOra.asyncOra)(`Making for target: ${maker.name.green} - On platform: ${actualTargetPlatform.cyan} - For arch: ${targetArch.cyan}`,
            /*#__PURE__*/
            _asyncToGenerator(function* () {
              try {
                /**
                 * WARNING: DO NOT ATTEMPT TO PARALLELIZE MAKERS
                 *
                 * Currently it is assumed we have 1 maker per make call but that is
                 * not enforced.  It is technically possible to have 1 maker be called
                 * multiple times.  The "prepareConfig" method however implicitly
                 * requires a lock that is not enforced.  There are two options:
                 *
                 *   * Provide makers a getConfig() method
                 *   * Remove support for config being provided as a method
                 *   * Change the entire API of maker from a single constructor to
                 *     providing a MakerFactory
                 */
                maker.prepareConfig(targetArch);
                const artifacts = yield maker.make({
                  appName,
                  forgeConfig,
                  packageJSON,
                  targetArch,
                  dir: packageDir,
                  makeDir: _path.default.resolve(actualOutDir, 'make'),
                  targetPlatform: actualTargetPlatform
                });
                outputs.push({
                  artifacts,
                  packageJSON,
                  platform: actualTargetPlatform,
                  arch: targetArch
                });
              } catch (err) {
                if (err) {
                  throw {
                    message: `An error occured while making for target: ${maker.name}`,
                    stack: `${err.message}\n${err.stack}`
                  };
                } else {
                  throw new Error(`An unknown error occured while making for target: ${maker.name}`);
                }
              }
            }));
          }
        } catch (err) {
          _didIteratorError3 = true;
          _iteratorError3 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
              _iterator3.return();
            }
          } finally {
            if (_didIteratorError3) {
              throw _iteratorError3;
            }
          }
        }
      } // If the postMake hooks modifies the locations / names of the outputs it must return
      // the new locations so that the publish step knows where to look

    } catch (err) {
      _didIteratorError2 = true;
      _iteratorError2 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
          _iterator2.return();
        }
      } finally {
        if (_didIteratorError2) {
          throw _iteratorError2;
        }
      }
    }

    return yield (0, _hook.runMutatingHook)(forgeConfig, 'postMake', outputs);
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,