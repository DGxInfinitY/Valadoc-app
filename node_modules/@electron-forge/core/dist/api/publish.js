"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

require("colors");

var _asyncOra = require("@electron-forge/async-ora");

var _debug = _interopRequireDefault(require("debug"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _path = _interopRequireDefault(require("path"));

var _forgeConfig = _interopRequireDefault(require("../util/forge-config"));

var _readPackageJson = require("../util/read-package-json");

var _resolveDir = _interopRequireDefault(require("../util/resolve-dir"));

var _publishState = _interopRequireDefault(require("../util/publish-state"));

var _outDir = _interopRequireDefault(require("../util/out-dir"));

var _make = _interopRequireDefault(require("./make"));

var _requireSearch = _interopRequireDefault(require("../util/require-search"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const d = (0, _debug.default)('electron-forge:publish');

const publish =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* ({
    dir = process.cwd(),
    interactive = false,
    makeOptions = {},
    publishTargets = undefined,
    dryRun = false,
    dryRunResume = false,
    makeResults = undefined,
    outDir
  }) {
    _asyncOra.asyncOra.interactive = interactive;

    if (dryRun && dryRunResume) {
      throw 'Can\'t dry run and resume a dry run at the same time';
    }

    if (dryRunResume && makeResults) {
      throw 'Can\'t resume a dry run and use the provided makeResults at the same time';
    }

    const forgeConfig = yield (0, _forgeConfig.default)(dir);
    let packageJSON = yield (0, _readPackageJson.readMutatedPackageJson)(dir, forgeConfig);
    const calculatedOutDir = outDir || (0, _outDir.default)(dir, forgeConfig);

    const dryRunDir = _path.default.resolve(calculatedOutDir, 'publish-dry-run');

    if (dryRunResume) {
      d('attempting to resume from dry run');
      const publishes = yield _publishState.default.loadFromDirectory(dryRunDir, dir);
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = publishes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          const publishStates = _step.value;
          d('publishing for given state set');
          yield publish({
            dir,
            interactive,
            publishTargets,
            makeOptions,
            dryRun: false,
            dryRunResume: false,
            makeResults: publishStates.map(({
              state
            }) => state)
          });
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return != null) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return;
    }

    if (!makeResults) {
      d('triggering make');
      makeResults = yield (0, _make.default)(Object.assign({
        dir,
        interactive
      }, makeOptions));
    } else {
      // Restore values from dry run
      d('restoring publish settings from dry run');
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = makeResults[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          const makeResult = _step2.value;
          packageJSON = makeResult.packageJSON;
          makeOptions.platform = makeResult.platform;
          makeOptions.arch = makeResult.arch;
          var _iteratorNormalCompletion3 = true;
          var _didIteratorError3 = false;
          var _iteratorError3 = undefined;

          try {
            for (var _iterator3 = makeResult.artifacts[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
              const makePath = _step3.value;

              if (!(yield _fsExtra.default.pathExists(makePath))) {
                throw `Attempted to resume a dry run but an artifact (${makePath}) could not be found`;
              }
            }
          } catch (err) {
            _didIteratorError3 = true;
            _iteratorError3 = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion3 && _iterator3.return != null) {
                _iterator3.return();
              }
            } finally {
              if (_didIteratorError3) {
                throw _iteratorError3;
              }
            }
          }
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {
            _iterator2.return();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }
    }

    if (dryRun) {
      d('saving results of make in dry run state', makeResults);
      yield _fsExtra.default.remove(dryRunDir);
      yield _publishState.default.saveToDirectory(dryRunDir, makeResults, dir);
      return;
    }

    const resolvedDir = yield (0, _resolveDir.default)(dir);

    if (!resolvedDir) {
      throw 'Failed to locate publishable Electron application';
    }

    dir = resolvedDir;
    const testPlatform = makeOptions.platform || process.platform;

    if (!publishTargets) {
      publishTargets = forgeConfig.publishers || []; // .filter(publisher => (typeof publisher !== 'string' && publisher.platforms) ? publisher.platforms.indexOf(testPlatform) !== -1 : true);
    }

    publishTargets = publishTargets.map(target => {
      if (typeof target === 'string') {
        return (forgeConfig.publishers || []).find(p => {
          if (typeof p === 'string') return false;
          if (p.__isElectronForgePublisher) return false;
          return p.name === target;
        }) || {
          name: target
        };
      }

      return target;
    });
    var _iteratorNormalCompletion4 = true;
    var _didIteratorError4 = false;
    var _iteratorError4 = undefined;

    try {
      for (var _iterator4 = publishTargets[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
        const publishTarget = _step4.value;
        let publisher;

        if (publishTarget.__isElectronForgePublisher) {
          publisher = publishTarget;
        } else {
          const resolvablePublishTarget = publishTarget;
          let PublisherClass;
          yield (0, _asyncOra.asyncOra)(`Resolving publish target: ${`${resolvablePublishTarget.name}`.cyan}`,
          /*#__PURE__*/
          _asyncToGenerator(function* () {
            // eslint-disable-line no-loop-func
            PublisherClass = (0, _requireSearch.default)(dir, [resolvablePublishTarget.name]);

            if (!PublisherClass) {
              throw `Could not find a publish target with the name: ${resolvablePublishTarget.name}`;
            }
          }));
          publisher = new PublisherClass(resolvablePublishTarget.config || {}, resolvablePublishTarget.platforms);
        }

        yield publisher.publish({
          dir,
          makeResults,
          forgeConfig
        });
      }
    } catch (err) {
      _didIteratorError4 = true;
      _iteratorError4 = err;
    } finally {
      try {
        if (!_iteratorNormalCompletion4 && _iterator4.return != null) {
          _iterator4.return();
        }
      } finally {
        if (_didIteratorError4) {
          throw _iteratorError4;
        }
      }
    }
  });

  return function publish(_x) {
    return _ref.apply(this, arguments);
  };
}();

var _default = publish;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,