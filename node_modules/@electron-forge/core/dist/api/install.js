"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

require("source-map-support/register");

require("colors");

var _asyncOra = require("@electron-forge/async-ora");

var _installerBase = _interopRequireDefault(require("@electron-forge/installer-base"));

var _debug = _interopRequireDefault(require("debug"));

var _nodeFetch = _interopRequireDefault(require("node-fetch"));

var _fsExtra = _interopRequireDefault(require("fs-extra"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _pify = _interopRequireDefault(require("pify"));

var _semver = _interopRequireDefault(require("semver"));

var _installerDmg = _interopRequireDefault(require("@electron-forge/installer-dmg"));

var _installerZip = _interopRequireDefault(require("@electron-forge/installer-zip"));

var _installerDeb = _interopRequireDefault(require("@electron-forge/installer-deb"));

var _installerRpm = _interopRequireDefault(require("@electron-forge/installer-rpm"));

var _installerExe = _interopRequireDefault(require("@electron-forge/installer-exe"));

var _messages = require("../util/messages");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const nugget = require('nugget');

const d = (0, _debug.default)('electron-forge:install');
const GITHUB_API = 'https://api.github.com';

class InstallerImpl extends _installerBase.default {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "name", 'impl');
  }

}

var _default =
/*#__PURE__*/
function () {
  var _ref = _asyncToGenerator(function* ({
    interactive = false,
    prerelease = false,
    repo,
    chooseAsset
  }) {
    _asyncOra.asyncOra.interactive = interactive;

    if (typeof chooseAsset !== 'function') {
      throw 'Expected chooseAsset to be a function in install call';
    }

    let latestRelease;
    let possibleAssets = [];
    yield (0, _asyncOra.asyncOra)('Searching for Application',
    /*#__PURE__*/
    function () {
      var _ref2 = _asyncToGenerator(function* (searchSpinner) {
        if (!repo || repo.indexOf('/') === -1) {
          throw 'Invalid repository name, must be in the format owner/name';
        }

        d('searching for repo:', repo);
        let releases;

        try {
          releases = yield (yield (0, _nodeFetch.default)(`${GITHUB_API}/repos/${repo}/releases`)).json();
        } catch (err) {// Ignore error
        }

        if (!releases || releases.message === 'Not Found' || !Array.isArray(releases)) {
          throw `Failed to find releases for repository "${repo}".  Please check the name and try again.`;
        }

        if (releases.length === 0) {
          throw `Repository "${repo}" has no releases`;
        }

        releases = releases.filter(release => !release.prerelease || prerelease);
        const sortedReleases = releases.sort((releaseA, releaseB) => {
          let tagA = releaseA.tag_name;
          if (tagA.substr(0, 1) === 'v') tagA = tagA.substr(1);
          let tagB = releaseB.tag_name;
          if (tagB.substr(0, 1) === 'v') tagB = tagB.substr(1);
          return _semver.default.gt(tagB, tagA) ? 1 : -1;
        });
        latestRelease = sortedReleases[0];
        searchSpinner.text = 'Searching for Releases'; // eslint-disable-line

        const assets = latestRelease.assets;

        if (!assets || !Array.isArray(assets) || assets.length === 0) {
          throw 'Could not find any assets for the latest release';
        }

        const installTargets = {
          win32: [/\.exe$/],
          darwin: [/OSX.*\.zip$/, /darwin.*\.zip$/, /macOS.*\.zip$/, /mac.*\.zip$/, /\.dmg$/],
          linux: [/\.rpm$/, /\.deb$/]
        };
        possibleAssets = assets.filter(asset => {
          const targetSuffixes = installTargets[process.platform];
          var _iteratorNormalCompletion = true;
          var _didIteratorError = false;
          var _iteratorError = undefined;

          try {
            for (var _iterator = targetSuffixes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
              const suffix = _step.value;
              if (suffix.test(asset.name)) return true;
            }
          } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
          } finally {
            try {
              if (!_iteratorNormalCompletion && _iterator.return != null) {
                _iterator.return();
              }
            } finally {
              if (_didIteratorError) {
                throw _iteratorError;
              }
            }
          }

          return false;
        });

        if (possibleAssets.length === 0) {
          throw `Failed to find any installable assets for target platform: ${`${process.platform}`.cyan}`;
        }
      });

      return function (_x2) {
        return _ref2.apply(this, arguments);
      };
    }());
    (0, _messages.info)(interactive, `Found latest release${prerelease ? ' (including prereleases)' : ''}: ${latestRelease.tag_name.cyan}`);
    let targetAsset = possibleAssets[0];

    if (possibleAssets.length > 1) {
      targetAsset = yield Promise.resolve(chooseAsset(possibleAssets));
    }

    const tmpdir = _path.default.resolve(_os.default.tmpdir(), 'forge-install');

    const pathSafeRepo = repo.replace(/[/\\]/g, '-');
    const filename = `${pathSafeRepo}-${latestRelease.tag_name}-${targetAsset.name}`;

    const fullFilePath = _path.default.resolve(tmpdir, filename);

    if (!(yield _fsExtra.default.pathExists(fullFilePath)) || (yield _fsExtra.default.stat(fullFilePath)).size !== targetAsset.size) {
      yield _fsExtra.default.mkdirs(tmpdir);
      const nuggetOpts = {
        target: filename,
        dir: tmpdir,
        resume: true,
        strictSSL: true
      };
      yield (0, _pify.default)(nugget)(targetAsset.browser_download_url, nuggetOpts);
    }

    yield (0, _asyncOra.asyncOra)('Installing Application',
    /*#__PURE__*/
    function () {
      var _ref3 = _asyncToGenerator(function* (installSpinner) {
        const installActions = {
          win32: {
            '.exe': _installerExe.default
          },
          darwin: {
            '.zip': _installerZip.default,
            '.dmg': _installerDmg.default
          },
          linux: {
            '.deb': _installerDeb.default,
            '.rpm': _installerRpm.default
          }
        };
        const suffixFnIdent = Object.keys(installActions[process.platform]).find(suffix => targetAsset.name.endsWith(suffix));

        if (!suffixFnIdent) {
          throw `No installer to handle "${targetAsset.name}"`;
        }

        const InstallerClass = installActions[process.platform][suffixFnIdent];
        const installer = new InstallerClass();
        yield installer.install({
          installSpinner,
          filePath: fullFilePath
        });
      });

      return function (_x3) {
        return _ref3.apply(this, arguments);
      };
    }());
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,